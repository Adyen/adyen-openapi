{
   "openapi" : "3.1.0",
   "servers" : [
      {
         "url" : "https://kyc-test.adyen.com/lem/v1"
      }
   ],
   "info" : {
      "version" : "1",
      "x-publicVersion" : true,
      "title" : "Legal Entity API",
      "description" : "The Legal Entity API enables you to manage legal entities that contain information required for verification. \nFor every account holder, you need to create a legal entity for their organization and the individuals associated with their organization.\n## Authentication\nTo connect to the Legal Entity API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://support.adyen.com/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:\n\n```\ncurl\n-U \"ws12345@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\\n-H \"Content-Type: application/json\" \\\n...\n```\nNote that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).\n\n## Versioning\nThe Legal Entity API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.\n\nFor example:\n```\nhttps://kyc-test.adyen.com/lem/v1/legalEntities\n```\n## Going live\nWhen going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v1`.\n\nFor more information, refer to our [Going live documentation](https://docs.adyen.com/issuing/integration-checklist#going-live).",
      "x-timestamp" : "2022-05-03T09:24:02Z",
      "termsOfService" : "https://www.adyen.com/legal/terms-and-conditions",
      "contact" : {
         "name" : "Adyen Developer Experience team",
         "url" : "https://www.adyen.help/hc/en-us/community/topics",
         "email" : "developer-experience@adyen.com"
      }
   },
   "x-groups" : [
      "Legal entities",
      "Transfer instruments",
      "Business lines",
      "Documents"
   ],
   "tags" : [
      {
         "name" : "Legal entities"
      },
      {
         "name" : "Business lines"
      },
      {
         "name" : "Documents"
      },
      {
         "name" : "Transfer instruments"
      }
   ],
   "paths" : {
      "/businessLines" : {
         "post" : {
            "tags" : [
               "Business lines"
            ],
            "summary" : "Create a business line",
            "description" : "Creates a business line. \n\nThis resource contains information about your user's line of business, including their industry and their source of funds. Adyen uses this information to verify your users as required by payment industry regulations. Adyen informs you of the verification results through webhooks or API responses.",
            "x-addedInVersion" : "1",
            "operationId" : "post-businessLines",
            "x-groupName" : "Business lines",
            "x-sortIndex" : 12,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "createBusinessLines" : {
                           "$ref" : "#/components/examples/post-businessLines-createBusinessLines"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/BusinessLineInfo"
                     }
                  }
               }
            },
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "post-businessLines" : {
                              "$ref" : "#/components/examples/post-businessLines-post-businessLines-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/BusinessLine"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/businessLines/{id}" : {
         "get" : {
            "tags" : [
               "Business lines"
            ],
            "summary" : "Get a business line",
            "description" : "Returns a business line.",
            "x-addedInVersion" : "1",
            "operationId" : "get-businessLines-id",
            "x-groupName" : "Business lines",
            "x-sortIndex" : 13,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the business line.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/BusinessLine"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/documents" : {
         "post" : {
            "tags" : [
               "Documents"
            ],
            "summary" : "Upload a document for verification checks",
            "description" : "Uploads a document for verification checks.\n\n Adyen uses the information from the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities) to run automated verification checks. If these checks fail, you will be notified to provide additional documents. Adyen uses the documents to validate the identity of the individual or organization legal entity, or the legal entity's bank account details.\n\n You should only upload documents when Adyen requests additional information for the legal entity. For more information, refer to [Onboard and verify account holders](https://docs.adyen.com/issuing/kyc-verification).",
            "x-addedInVersion" : "1",
            "operationId" : "post-documents",
            "x-groupName" : "Documents",
            "x-sortIndex" : 4,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "schema" : {
                        "$ref" : "#/components/schemas/Document"
                     }
                  }
               }
            },
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/Document"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/documents/{id}" : {
         "delete" : {
            "tags" : [
               "Documents"
            ],
            "summary" : "Delete a document",
            "description" : "Deletes a document.",
            "x-addedInVersion" : "1",
            "operationId" : "delete-documents-id",
            "x-groupName" : "Documents",
            "x-sortIndex" : 7,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the document to be deleted.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/VoidResponse"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "get" : {
            "tags" : [
               "Documents"
            ],
            "summary" : "Get a document",
            "description" : "Returns a document.",
            "x-addedInVersion" : "1",
            "operationId" : "get-documents-id",
            "x-groupName" : "Documents",
            "x-sortIndex" : 5,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the document.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/Document"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "patch" : {
            "tags" : [
               "Documents"
            ],
            "summary" : "Update a document",
            "description" : "Updates a document.",
            "x-addedInVersion" : "1",
            "operationId" : "patch-documents-id",
            "x-groupName" : "Documents",
            "x-sortIndex" : 6,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "schema" : {
                        "$ref" : "#/components/schemas/Document"
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "description" : "The unique identifier of the document to be updated.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/Document"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/legalEntities" : {
         "post" : {
            "tags" : [
               "Legal entities"
            ],
            "summary" : "Create a legal entity",
            "description" : "Creates a legal entity. \n\nThis resource contains information about an individual or organization that will be onboarded in your balance platform. Adyen uses this information to perform verification checks as required by payment industry regulations. Adyen informs you of the verification results through webhooks or API responses. \n\nAfter the legal entity has passed the verification checks, you can issue a card to them. For more information, refer to [Onboard and verify account holders](https://docs.adyen.com/issuing/kyc-verification).",
            "x-addedInVersion" : "1",
            "operationId" : "post-legalEntities",
            "x-groupName" : "Legal entities",
            "x-sortIndex" : 1,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "schema" : {
                        "$ref" : "#/components/schemas/LegalEntityInfo"
                     }
                  }
               }
            },
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/LegalEntity"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/legalEntities/{id}" : {
         "get" : {
            "tags" : [
               "Legal entities"
            ],
            "summary" : "Get a legal entity",
            "description" : "Returns a legal entity.",
            "x-addedInVersion" : "1",
            "operationId" : "get-legalEntities-id",
            "x-groupName" : "Legal entities",
            "x-sortIndex" : 2,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the legal entity.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/LegalEntity"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "patch" : {
            "tags" : [
               "Legal entities"
            ],
            "summary" : "Update a legal entity",
            "description" : "Updates a legal entity.\n\n >To update the `entityAssociations` array, you need to replace the entire array. For example, if the array has 3 entries and you want to remove 1 entry, you need to PATCH the resource with the remaining 2 entries.",
            "x-addedInVersion" : "1",
            "operationId" : "patch-legalEntities-id",
            "x-groupName" : "Legal entities",
            "x-sortIndex" : 3,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "schema" : {
                        "$ref" : "#/components/schemas/GenericEntityInfo"
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "description" : "The unique identifier of the legal entity.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/LegalEntity"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/legalEntities/{id}/businessLines" : {
         "get" : {
            "tags" : [
               "Legal entities"
            ],
            "summary" : "Get all business lines under a legal entity",
            "description" : "Returns the business lines owned by a legal entity.",
            "x-addedInVersion" : "1",
            "operationId" : "get-legalEntities-id-businessLines",
            "x-groupName" : "Legal entities",
            "x-sortIndex" : 4,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "parameters" : [
               {
                  "description" : "Unique identifier of the legal entity",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/BusinessLines"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/transferInstruments" : {
         "post" : {
            "tags" : [
               "Transfer instruments"
            ],
            "summary" : "Create a transfer instrument",
            "description" : "Creates a transfer instrument. \n\nA transfer instrument is a bank account or other payment details that a legal entity owns. Adyen performs verification checks on the transfer instrument as required by payment industry regulations. We inform you of the verification results through webhooks or API responses.\n\nWhen the transfer instrument passes the verification checks, you can start sending funds from the balance platform to the transfer instrument (such as payouts).",
            "x-addedInVersion" : "1",
            "operationId" : "post-transferInstruments",
            "x-groupName" : "Transfer instruments",
            "x-sortIndex" : 8,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "schema" : {
                        "$ref" : "#/components/schemas/TransferInstrumentInfo"
                     }
                  }
               }
            },
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/TransferInstrument"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/transferInstruments/{id}" : {
         "delete" : {
            "tags" : [
               "Transfer instruments"
            ],
            "summary" : "Delete a transfer instrument",
            "description" : "Deletes a transfer instrument.",
            "x-addedInVersion" : "1",
            "operationId" : "delete-transferInstruments-id",
            "x-groupName" : "Transfer instruments",
            "x-sortIndex" : 11,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the transfer instrument to be deleted.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/VoidResponse"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "get" : {
            "tags" : [
               "Transfer instruments"
            ],
            "summary" : "Get a transfer instrument",
            "description" : "Returns a transfer instrument.",
            "x-addedInVersion" : "1",
            "operationId" : "get-transferInstruments-id",
            "x-groupName" : "Transfer instruments",
            "x-sortIndex" : 9,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the transfer instrument.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/TransferInstrument"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "patch" : {
            "tags" : [
               "Transfer instruments"
            ],
            "summary" : "Update a transfer instrument",
            "description" : "Updates a transfer instrument.",
            "x-addedInVersion" : "1",
            "operationId" : "patch-transferInstruments-id",
            "x-groupName" : "Transfer instruments",
            "x-sortIndex" : 10,
            "security" : [
               {
                  "BasicAuth" : [
                     ]
               },
               {
                  "ApiKeyAuth" : [
                     ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "schema" : {
                        "$ref" : "#/components/schemas/TransferInstrumentInfo"
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "description" : "The unique identifier of the transfer instrument.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/TransferInstrument"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/ServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      }
   },
   "components" : {
      "schemas" : {
         "Address" : {
            "properties" : {
               "city" : {
                  "description" : "The name of the city. Required if `stateOrProvince` is provided.\n\nIf you specify the city, you must also send `postalCode` and `street`.",
                  "type" : "string"
               },
               "country" : {
                  "description" : "The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.",
                  "type" : "string"
               },
               "postalCode" : {
                  "description" : "Postal code. Required if `stateOrProvince` and/or `city` is provided.",
                  "type" : "string"
               },
               "stateOrProvince" : {
                  "description" : "The two-letter ISO 3166-2 state or province code. For example, **CA** in the US. \n\nIf you specify the state or province, you must also send `city`, `postalCode`, and `street`.",
                  "type" : "string"
               },
               "street" : {
                  "description" : "The name of the street, and the house or building number. Required if `stateOrProvince` and/or `city` is provided.",
                  "type" : "string"
               },
               "street2" : {
                  "description" : "The apartment, unit, or suite number.",
                  "type" : "string"
               }
            },
            "required" : [
               "country"
            ]
         },
         "Attachment" : {
            "properties" : {
               "content" : {
                  "description" : "The document in Base64-encoded string format.",
                  "format" : "byte",
                  "type" : "string"
               },
               "contentType" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "The file format.\n\n Possible values: **application/pdf**, **image/jpg**, **image/jpeg**, **image/png**. ",
                  "type" : "string"
               },
               "filename" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "The name of the file including the file extension.",
                  "type" : "string"
               },
               "pageType" : {
                  "description" : "Specifies which side of the ID card is uploaded.\n\n* When `type` is **driversLicense**, set this to **front** or **back**.\n\n* When omitted, we infer the page number based on the order of attachments.",
                  "type" : "string"
               }
            },
            "required" : [
               "content"
            ]
         },
         "BankAccountInfo" : {
            "properties" : {
               "accountNumber" : {
                  "description" : "The bank account number (without separators).\n\n When this is provided, the `bankCode` and `branchCode` are also required.",
                  "type" : "string"
               },
               "accountType" : {
                  "description" : "The type of bank account. Only applies to bank accounts held in the US. \n\nPossible values: **checking**, **savings**.",
                  "type" : "string"
               },
               "bankBicSwift" : {
                  "description" : "The bank's BIC or SWIFT code.",
                  "type" : "string"
               },
               "bankCity" : {
                  "description" : "The city where the bank is located.",
                  "type" : "string"
               },
               "bankCode" : {
                  "description" : "The bank code of the banking institution with which the bank account is registered.\n\nRequired when you provide an `accountNumber`.",
                  "type" : "string"
               },
               "bankName" : {
                  "description" : "The name of the banking institution where the bank account is held.",
                  "type" : "string"
               },
               "branchCode" : {
                  "description" : "The branch code of the branch under which the bank account is registered.\n\nRequired when you provide an `accountNumber`.\n\n In the following countries, this value corresponds to:\n\n\n* United States: routing number\n* United Kingdom: sort code\n* Germany: Bankleitzahl",
                  "type" : "string"
               },
               "checkCode" : {
                  "description" : "The check code of the bank account.",
                  "type" : "string"
               },
               "countryCode" : {
                  "description" : "The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.",
                  "type" : "string"
               },
               "currencyCode" : {
                  "description" : "The account's three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**.",
                  "type" : "string"
               },
               "iban" : {
                  "description" : "The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.",
                  "type" : "string"
               },
               "requestedVerificationCode" : {
                  "type" : "string"
               }
            },
            "required" : [
               "countryCode",
               "currencyCode"
            ]
         },
         "BirthData" : {
            "properties" : {
               "dateOfBirth" : {
                  "description" : "The individual's date of birth, in YYYY-MM-DD format.",
                  "type" : "string"
               }
            }
         },
         "BusinessLine" : {
            "properties" : {
               "capability" : {
                  "description" : "The capability for which you are creating the business line. For example, **receivePayments**.",
                  "type" : "string"
               },
               "id" : {
                  "description" : "The unique identifier of the business line.",
                  "readOnly" : true,
                  "type" : "string"
               },
               "industryCode" : {
                  "description" : "A code that represents the type of goods and services that your user is offering. For example, **4431A** for computer software stores. ",
                  "type" : "string"
               },
               "legalEntityId" : {
                  "description" : "Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.",
                  "type" : "string"
               },
               "salesChannels" : {
                  "description" : "A list of channels where goods or services are sold. You cannot combine point of sale and ecommerce in one business line.\n\n Possible values and combinations:\n\n - For point of sale: **pos** and **posMoto**\n\n- For ecommerce: **eCommerce** and **ecomMoto**\n\n- For Pay by Link: **payByLink**",
                  "items" : {
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "sourceOfFunds" : {
                  "description" : "Contains information about the source of your user's funds. Required for some capabilities, for example, **issueCard**.",
                  "$ref" : "#/components/schemas/SourceOfFunds"
               },
               "webData" : {
                  "description" : "List of website URLs where your user's goods or services are sold. When this is required for a capability but your user does not have an online presence, provide the reason in the `webDataExemption` object.",
                  "items" : {
                     "$ref" : "#/components/schemas/WebData"
                  },
                  "type" : "array"
               },
               "webDataExemption" : {
                  "description" : "The reason why the web data is not provided.",
                  "$ref" : "#/components/schemas/WebDataExemption"
               }
            },
            "required" : [
               "capability",
               "industryCode",
               "legalEntityId",
               "id"
            ]
         },
         "BusinessLineInfo" : {
            "properties" : {
               "capability" : {
                  "description" : "The capability for which you are creating the business line. For example, **receivePayments**.",
                  "type" : "string"
               },
               "industryCode" : {
                  "description" : "A code that represents the type of goods and services that your user is offering. For example, **4431A** for computer software stores. ",
                  "type" : "string"
               },
               "legalEntityId" : {
                  "description" : "Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.",
                  "type" : "string"
               },
               "salesChannels" : {
                  "description" : "A list of channels where goods or services are sold. You cannot combine point of sale and ecommerce in one business line.\n\n Possible values and combinations:\n\n - For point of sale: **pos** and **posMoto**\n\n- For ecommerce: **eCommerce** and **ecomMoto**\n\n- For Pay by Link: **payByLink**",
                  "items" : {
                     "type" : "string"
                  },
                  "type" : "array"
               },
               "sourceOfFunds" : {
                  "description" : "Contains information about the source of your user's funds. Required for some capabilities, for example, **issueCard**.",
                  "$ref" : "#/components/schemas/SourceOfFunds"
               },
               "webData" : {
                  "description" : "List of website URLs where your user's goods or services are sold. When this is required for a capability but your user does not have an online presence, provide the reason in the `webDataExemption` object.",
                  "items" : {
                     "$ref" : "#/components/schemas/WebData"
                  },
                  "type" : "array"
               },
               "webDataExemption" : {
                  "description" : "The reason why the web data is not provided.",
                  "$ref" : "#/components/schemas/WebDataExemption"
               }
            },
            "required" : [
               "capability",
               "industryCode",
               "legalEntityId"
            ]
         },
         "BusinessLines" : {
            "properties" : {
               "businessLines" : {
                  "description" : "List of business lines.",
                  "items" : {
                     "$ref" : "#/components/schemas/BusinessLine"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "businessLines"
            ]
         },
         "Document" : {
            "properties" : {
               "attachment" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "x-deprecatedMessage" : "Use the `attachments` array instead.",
                  "description" : "Object that contains the document.",
                  "$ref" : "#/components/schemas/Attachment"
               },
               "attachments" : {
                  "description" : "Array that contains the document. The array supports multiple attachments for uploading different sides or pages of a document.",
                  "items" : {
                     "$ref" : "#/components/schemas/Attachment"
                  },
                  "type" : "array"
               },
               "description" : {
                  "description" : "Your description for the document.",
                  "type" : "string"
               },
               "expiryDate" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "The expiry date of the document, in YYYY-MM-DD format.",
                  "type" : "string"
               },
               "fileName" : {
                  "description" : "The filename of the document.",
                  "type" : "string"
               },
               "id" : {
                  "description" : "The unique identifier of the document.",
                  "readOnly" : true,
                  "type" : "string"
               },
               "issuerCountry" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.",
                  "type" : "string"
               },
               "issuerState" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "The state or province where the document was issued (AU only).",
                  "type" : "string"
               },
               "number" : {
                  "description" : "The number in the document.",
                  "type" : "string"
               },
               "owner" : {
                  "description" : "Contains information about the resource that owns the document.",
                  "$ref" : "#/components/schemas/Entity"
               },
               "type" : {
                  "description" : "Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity `type`.\n\n* When providing ID numbers for individuals, the values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.\n\nWhen uploading documents:\n* For `type` **organization**, the values can be **proofOfAddress**, **registrationDocument**, or **taxDocument**. \n\n* For `type` **individual**, the values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**, or **proofOfResidency**.\n\n* Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).",
                  "enum" : [
                     "bankStatement",
                     "driversLicense",
                     "identityCard",
                     "nationalIdNumber",
                     "passport",
                     "proofOfAddress",
                     "proofOfNationalIdNumber",
                     "proofOfResidency",
                     "registrationDocument",
                     "taxDocument"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "type",
               "description",
               "owner",
               "attachments",
               "id"
            ]
         },
         "Entity" : {
            "properties" : {
               "id" : {
                  "description" : "Unique identifier of the resource that owns the document. Depending on the entity `type`, this value can be the unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities__resParam_id) or the [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).",
                  "type" : "string"
               },
               "type" : {
                  "description" : "Type of resource that owns the document.\n\nPossible values: **legalEntity**, **bankAccount**.",
                  "type" : "string"
               }
            },
            "required" : [
               "id",
               "type"
            ]
         },
         "EntityReference" : {
            "properties" : {
               "id" : {
                  "description" : "The unique identifier of the resource.",
                  "type" : "string"
               }
            }
         },
         "GenericEntityInfo" : {
            "properties" : {
               "entityAssociations" : {
                  "description" : "List of legal entities associated with the current legal entity.\nFor example, ultimate business owners associated with an organization through ownership or control, or as signatories. ",
                  "items" : {
                     "$ref" : "#/components/schemas/LegalEntityAssociation"
                  },
                  "type" : "array"
               },
               "individual" : {
                  "description" : "Information about the individual. Required if `type` is **individual**.",
                  "$ref" : "#/components/schemas/Individual"
               },
               "organization" : {
                  "description" : "Information about the organization. Required if `type` is **organization**.",
                  "$ref" : "#/components/schemas/Organization"
               }
            }
         },
         "IdentificationData" : {
            "properties" : {
               "expiryDate" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "The expiry date of the document, in YYYY-MM-DD format.",
                  "type" : "string"
               },
               "issuerCountry" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.",
                  "type" : "string"
               },
               "issuerState" : {
                  "description" : "The state or province where the document was issued (AU only).",
                  "type" : "string"
               },
               "nationalIdExempt" : {
                  "description" : "Applies only to individuals in the US. Set to **true** if the individual does not have an SSN. To verify their identity, Adyen will require them to [upload an ID document](https://docs.adyen.com/issuing/kyc-verification#upload-documents).",
                  "type" : "boolean"
               },
               "number" : {
                  "description" : "The number in the document.",
                  "type" : "string"
               },
               "type" : {
                  "description" : "Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity `type`.\n\n* When providing ID numbers for individuals, the values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.\n\nWhen uploading documents:\n* For `type` **organization**, the values can be **proofOfAddress**, **registrationDocument**, or **taxDocument**. \n\n* For `type` **individual**, the values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**, or **proofOfResidency**.\n\n* Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).",
                  "enum" : [
                     "bankStatement",
                     "driversLicense",
                     "identityCard",
                     "nationalIdNumber",
                     "passport",
                     "proofOfAddress",
                     "proofOfNationalIdNumber",
                     "proofOfResidency",
                     "registrationDocument",
                     "taxDocument"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "type"
            ]
         },
         "Individual" : {
            "properties" : {
               "birthData" : {
                  "description" : "The individual's birth information.",
                  "$ref" : "#/components/schemas/BirthData"
               },
               "email" : {
                  "description" : "The email address of the legal entity.",
                  "type" : "string"
               },
               "identificationData" : {
                  "description" : "Information about the individual's identification document.",
                  "$ref" : "#/components/schemas/IdentificationData"
               },
               "name" : {
                  "description" : "The individual's name.",
                  "$ref" : "#/components/schemas/Name"
               },
               "nationality" : {
                  "description" : "The individual's nationality.",
                  "type" : "string"
               },
               "phone" : {
                  "description" : "The phone number of the legal entity.",
                  "$ref" : "#/components/schemas/PhoneNumber"
               },
               "residentialAddress" : {
                  "description" : "The residential address of the individual.",
                  "$ref" : "#/components/schemas/Address"
               },
               "webData" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "The website and app URL of the legal entity.",
                  "$ref" : "#/components/schemas/WebData"
               }
            },
            "required" : [
               "name",
               "residentialAddress"
            ]
         },
         "LegalEntity" : {
            "properties" : {
               "documents" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "List of documents uploaded for the legal entity.",
                  "items" : {
                     "$ref" : "#/components/schemas/EntityReference"
                  },
                  "type" : "array"
               },
               "entityAssociations" : {
                  "description" : "List of legal entities associated with the current legal entity.\nFor example, ultimate business owners associated with an organization through ownership or control, or as signatories. ",
                  "items" : {
                     "$ref" : "#/components/schemas/LegalEntityAssociation"
                  },
                  "type" : "array"
               },
               "id" : {
                  "description" : "The unique identifier of the legal entity.",
                  "readOnly" : true,
                  "type" : "string"
               },
               "individual" : {
                  "description" : "Information about the individual. Required if `type` is **individual**.",
                  "$ref" : "#/components/schemas/Individual"
               },
               "organization" : {
                  "description" : "Information about the organization. Required if `type` is **organization**.",
                  "$ref" : "#/components/schemas/Organization"
               },
               "reference" : {
                  "description" : "Your reference for the legal entity, maximum 150 characters.",
                  "type" : "string"
               },
               "transferInstruments" : {
                  "description" : "List of transfer instruments owned by the legal entity.",
                  "items" : {
                     "$ref" : "#/components/schemas/EntityReference"
                  },
                  "type" : "array"
               },
               "type" : {
                  "description" : "The type of legal entity.\n\n Possible values: **individual** or **organization**",
                  "enum" : [
                     "individual",
                     "organization"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "type",
               "id"
            ]
         },
         "LegalEntityAssociation" : {
            "properties" : {
               "jobTitle" : {
                  "description" : "The individual's job title if the `type` is **uboThroughControl** or **signatory**.",
                  "type" : "string"
               },
               "legalEntityId" : {
                  "description" : "The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id).",
                  "type" : "string"
               },
               "type" : {
                  "description" : "Defines the relationship of the legal entity to the current legal entity. \n\nFor example, **uboThroughOwnership**, **uboThroughControl**, or **signatory**. ",
                  "enum" : [
                     "signatory",
                     "uboThroughControl",
                     "uboThroughOwnership"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "legalEntityId",
               "type"
            ]
         },
         "LegalEntityInfo" : {
            "properties" : {
               "entityAssociations" : {
                  "description" : "List of legal entities associated with the current legal entity.\nFor example, ultimate business owners associated with an organization through ownership or control, or as signatories. ",
                  "items" : {
                     "$ref" : "#/components/schemas/LegalEntityAssociation"
                  },
                  "type" : "array"
               },
               "individual" : {
                  "description" : "Information about the individual. Required if `type` is **individual**.",
                  "$ref" : "#/components/schemas/Individual"
               },
               "organization" : {
                  "description" : "Information about the organization. Required if `type` is **organization**.",
                  "$ref" : "#/components/schemas/Organization"
               },
               "reference" : {
                  "description" : "Your reference for the legal entity, maximum 150 characters.",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The type of legal entity.\n\n Possible values: **individual** or **organization**",
                  "enum" : [
                     "individual",
                     "organization"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "type"
            ]
         },
         "Name" : {
            "properties" : {
               "firstName" : {
                  "description" : "The individual's first name.",
                  "type" : "string"
               },
               "infix" : {
                  "description" : "The infix in the individual's name, if any.",
                  "type" : "string"
               },
               "lastName" : {
                  "description" : "The individual's last name.",
                  "type" : "string"
               }
            },
            "required" : [
               "firstName",
               "lastName"
            ]
         },
         "Organization" : {
            "properties" : {
               "description" : {
                  "description" : "Your description for the organization.",
                  "type" : "string"
               },
               "doingBusinessAs" : {
                  "description" : "The organization's registered name, if different from the legal name.",
                  "type" : "string"
               },
               "email" : {
                  "description" : "The email address of the legal entity.",
                  "type" : "string"
               },
               "legalName" : {
                  "description" : "The organization's legal name.",
                  "type" : "string"
               },
               "phone" : {
                  "description" : "The phone number of the legal entity.",
                  "$ref" : "#/components/schemas/PhoneNumber"
               },
               "principalPlaceOfBusiness" : {
                  "description" : "The address where the organization operates from. Provide this if the principal place of business is different from the `registeredAddress`.",
                  "$ref" : "#/components/schemas/Address"
               },
               "registeredAddress" : {
                  "description" : "The address of the organization registered at their registrar (such as the Chamber of Commerce).",
                  "$ref" : "#/components/schemas/Address"
               },
               "registrationNumber" : {
                  "description" : "The organization's registration number.",
                  "type" : "string"
               },
               "stockData" : {
                  "description" : "Information about the organization's publicly traded stock. Provide this object only if `type` is **listedPublicCompany**.",
                  "$ref" : "#/components/schemas/StockData"
               },
               "taxExempt" : {
                  "description" : "Indicates whether the legal entity is exempt from tax. Defaults to **false**. When **true**, the `taxIdAbsenceReason` must be provided.",
                  "type" : "boolean"
               },
               "taxId" : {
                  "description" : "The organization's tax identifier.",
                  "type" : "string"
               },
               "taxIdAbsenceReason" : {
                  "description" : "The reason the organization has not provided a tax identifier.\n\nPossible values: **industryExemption**, **belowTaxThreshold**.",
                  "enum" : [
                     "industryExemption",
                     "belowTaxThreshold"
                  ],
                  "type" : "string"
               },
               "type" : {
                  "description" : "Type of organization. \n\nPossible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**,**nonProfit**, **partnershipIncorporated**, **privateCompany**.",
                  "enum" : [
                     "associationIncorporated",
                     "governmentalOrganization",
                     "listedPublicCompany",
                     "nonProfit",
                     "partnershipIncorporated",
                     "privateCompany"
                  ],
                  "type" : "string"
               },
               "webData" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "The website and app URL of the legal entity.",
                  "$ref" : "#/components/schemas/WebData"
               }
            },
            "required" : [
               "legalName",
               "type",
               "registeredAddress"
            ]
         },
         "PhoneNumber" : {
            "properties" : {
               "countryCode" : {
                  "description" : "The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code. For example, **US** or **NL**.",
                  "type" : "string"
               },
               "number" : {
                  "description" : "The phone number.",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The type of phone number.\n Possible values: **mobile**, **landline**, **sip**, **fax.** ",
                  "type" : "string"
               }
            },
            "required" : [
               "type",
               "number"
            ]
         },
         "RecurringDetail" : {
            "properties" : {
               "merchantAccount" : {
                  "description" : "The merchant account used when the payment details were stored.",
                  "type" : "string"
               },
               "reference" : {
                  "description" : "The `recurringDetailReference` returned in the response when the payment details were stored.",
                  "type" : "string"
               },
               "shopperReference" : {
                  "description" : "The unique identifier used when the payment details were stored.",
                  "type" : "string"
               }
            }
         },
         "ServiceError" : {
            "properties" : {
               "errorCode" : {
                  "description" : "The error code mapped to the error message.",
                  "type" : "string"
               },
               "errorType" : {
                  "description" : "The category of the error.",
                  "type" : "string"
               },
               "message" : {
                  "description" : "A short explanation of the issue.",
                  "type" : "string"
               },
               "pspReference" : {
                  "description" : "The PSP reference of the payment.",
                  "type" : "string"
               },
               "status" : {
                  "description" : "The HTTP response status.",
                  "format" : "int32",
                  "type" : "integer"
               }
            }
         },
         "SourceOfFunds" : {
            "properties" : {
               "acquiringBusinessLineId" : {
                  "description" : "The unique identifier of the business line that will be the source of funds.This must be a business line for a **receivePayments** or **receiveFromPlatformPayments** capability. Required when `adyenProcessedFunds` is **true**.",
                  "type" : "string"
               },
               "adyenProcessedFunds" : {
                  "description" : "Indicates whether the funds are coming from transactions processed by Adyen.\n\n - If **true**, the `acquiringBusinessLineId` is required.\n\n - If **false**, a `description` is required.",
                  "type" : "boolean"
               },
               "description" : {
                  "description" : "Text describing the source of funds. For example, for `type` **business**, provide a description of the business. Required when `adyenProcessedFunds` is **false**.",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The type of the source of funds. Possible value: **business**.",
                  "enum" : [
                     "business"
                  ],
                  "type" : "string"
               }
            }
         },
         "StockData" : {
            "properties" : {
               "marketIdentifier" : {
                  "description" : "The four-digit [Market Identifier Code](https://en.wikipedia.org/wiki/Market_Identifier_Code) of the stock market where the organization's stocks are traded.",
                  "type" : "string"
               },
               "stockNumber" : {
                  "description" : "The 12-digit International Securities Identification Number (ISIN) of the company, without dashes (-).",
                  "type" : "string"
               },
               "tickerSymbol" : {
                  "description" : "The stock ticker symbol.",
                  "type" : "string"
               }
            }
         },
         "TransferInstrument" : {
            "properties" : {
               "bankAccount" : {
                  "description" : "Contains information about the legal entity's bank account. Required when `type` is **bankAccount**.",
                  "$ref" : "#/components/schemas/BankAccountInfo"
               },
               "documents" : {
                  "deprecated" : true,
                  "x-deprecatedInVersion" : "1",
                  "description" : "List of documents uploaded for the transfer instrument.",
                  "items" : {
                     "$ref" : "#/components/schemas/EntityReference"
                  },
                  "type" : "array"
               },
               "id" : {
                  "description" : "The unique identifier of the transfer instrument.",
                  "readOnly" : true,
                  "type" : "string"
               },
               "legalEntityId" : {
                  "description" : "The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities__resParam_id) that owns the transfer instrument.",
                  "type" : "string"
               },
               "recurringDetail" : {
                  "description" : "Contains information about the legal entity's previously stored payment details. Required when `type` is **recurringDetail**.",
                  "$ref" : "#/components/schemas/RecurringDetail"
               },
               "reference" : {
                  "description" : "The reference to the supporting entity that is this transfer instrument",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The type of transfer instrument.\n\nPossible values: **bankAccount**, **recurringDetail**.",
                  "type" : "string"
               }
            },
            "required" : [
               "legalEntityId",
               "type",
               "id"
            ]
         },
         "TransferInstrumentInfo" : {
            "properties" : {
               "bankAccount" : {
                  "description" : "Contains information about the legal entity's bank account. Required when `type` is **bankAccount**.",
                  "$ref" : "#/components/schemas/BankAccountInfo"
               },
               "legalEntityId" : {
                  "description" : "The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities__resParam_id) that owns the transfer instrument.",
                  "type" : "string"
               },
               "recurringDetail" : {
                  "description" : "Contains information about the legal entity's previously stored payment details. Required when `type` is **recurringDetail**.",
                  "$ref" : "#/components/schemas/RecurringDetail"
               },
               "reference" : {
                  "description" : "The reference to the supporting entity that is this transfer instrument",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The type of transfer instrument.\n\nPossible values: **bankAccount**, **recurringDetail**.",
                  "type" : "string"
               }
            },
            "required" : [
               "legalEntityId",
               "type"
            ]
         },
         "VoidResponse" : {
            
         },
         "WebData" : {
            "properties" : {
               "webAddress" : {
                  "description" : "The URL of the website.",
                  "type" : "string"
               }
            }
         },
         "WebDataExemption" : {
            "properties" : {
               "reason" : {
                  "description" : "The reason why the web data was not provided. Possible value: **noOnlinePresence**.",
                  "enum" : [
                     "noOnlinePresence"
                  ],
                  "type" : "string"
               }
            }
         }
      },
      "securitySchemes" : {
         "ApiKeyAuth" : {
            "in" : "header",
            "name" : "X-API-Key",
            "type" : "apiKey"
         },
         "BasicAuth" : {
            "scheme" : "basic",
            "type" : "http"
         }
      },
      "examples" : {
         "post-businessLines-createBusinessLines" : {
            "summary" : "Create a business line for receiving payments",
            "description" : "Example request for receiving payments",
            "value" : {
               "capability" : "receivePayments",
               "industryCode" : "55",
               "webData" : [
                  {
                     "webAddress" : "https://www.adyen.com"
                  }
               ],
               "legalEntityId" : "LE322KT223222D5FJ7THR293F",
               "sourceOfFunds" : {
                  "type" : "business",
                  "adyenProcessedFunds" : "false",
                  "description" : "Funds from my flower shop business"
               }
            }
         },
         "post-businessLines-post-businessLines-200" : {
            "summary" : "Example response for creating a business line",
            "value" : {
               "capability" : "receivePayments",
               "industryCode" : "55",
               "legalEntityId" : "LE322KH223222D5FJHXVQBW3Q",
               "sourceOfFunds" : {
                  "adyenProcessedFunds" : "false",
                  "description" : "Funds from my flower shop business",
                  "type" : "business"
               },
               "webData" : [
                  {
                     "webAddress" : "https://www.adyen.com"
                  }
               ],
               "id" : "SE322JV223222D5FKLGQPC2H5"
            }
         }
      }
   }
}