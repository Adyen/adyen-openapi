{
  "openapi" : "3.1.0",
  "info" : {
    "title" : "Adyen Checkout API",
    "description" : "Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).\n\nThis API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).\n\n## Authentication\nEach request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:\n\n```\ncurl\n-H \"Content-Type: application/json\" \\\n-H \"X-API-Key: YOUR_API_KEY\" \\\n...\n```\n## Versioning\nCheckout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.\n\nFor example:\n```\nhttps://checkout-test.adyen.com/v68/payments\n```\n\n## Server-side API libraries\nWe provide open-source [server-side API libraries](https://docs.adyen.com/development-resources/libraries/) in several languages: \n- PHP\n- Java\n- Node.js\n- .NET\n- Go\n- Python\n- Ruby\n- Apex (beta)\n\nSee our [integration examples](https://github.com/adyen-examples#%EF%B8%8F-official-integration-examples) for example uses of the libraries.\n\n## Developer resources\nCheckout API is available through a Postman collection. Click the button below to create a fork, then set the environment variables at **Environments**&nbsp;>&nbsp;**Adyen&nbsp;APIs**. \n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25716737-46ad970e-dc9e-4246-bac2-769c6083e7b5?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D25716737-46ad970e-dc9e-4246-bac2-769c6083e7b5%26entityType%3Dcollection%26workspaceId%3Da8d63f9f-cfc7-4810-90c5-9e0c60030d3e#?env%5BAdyen%20APIs%5D=W3sia2V5IjoiWC1BUEktS2V5IiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoic2VjcmV0In0seyJrZXkiOiJZT1VSX01FUkNIQU5UX0FDQ09VTlQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0In0seyJrZXkiOiJZT1VSX0NPTVBBTllfQUNDT1VOVCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQifSx7ImtleSI6IllPVVJfQkFMQU5DRV9QTEFURk9STSIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQifV0=)\n\n\n## Going live\n\nTo access the live endpoints, you need an API key from your live Customer Area.\n\nThe live endpoint URLs contain a prefix which is unique to your company account, for example:\n```\nhttps://{PREFIX}-checkout-live.adyenpayments.com/checkout/v68/payments\n```\n\nGet your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.\n\nWhen preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.\n\n## Release notes\nHave a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=68) to find out what changed in this version!",
    "termsOfService" : "https://www.adyen.com/legal/terms-and-conditions",
    "contact" : {
      "name" : "Adyen Developer Experience team",
      "url" : "https://github.com/Adyen/adyen-openapi"
    },
    "version" : "68",
    "x-publicVersion" : true
  },
  "servers" : [ {
    "url" : "https://checkout-test.adyen.com/v68"
  } ],
  "tags" : [ {
    "name" : "Payments"
  }, {
    "name" : "Donations"
  }, {
    "name" : "Payment links"
  }, {
    "name" : "Modifications"
  }, {
    "name" : "Recurring"
  }, {
    "name" : "Orders"
  }, {
    "name" : "Utility"
  } ],
  "paths" : {
    "/applePay/sessions" : {
      "post" : {
        "tags" : [ "Utility" ],
        "summary" : "Get an Apple Pay session",
        "description" : "You need to use this endpoint if you have an API-only integration with Apple Pay which uses Adyen's Apple Pay certificate.\n\nThe endpoint returns the Apple Pay session data which you need to complete the [Apple Pay session validation](https://docs.adyen.com/payment-methods/apple-pay/api-only?tab=adyen-certificate-validation_1#complete-apple-pay-session-validation).",
        "operationId" : "post-applePay-sessions",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApplePaySessionRequest"
              },
              "examples" : {
                "basic" : {
                  "$ref" : "#/components/examples/post-applePay-sessions-basic"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplePaySessionResponse"
                },
                "examples" : {
                  "basic" : {
                    "$ref" : "#/components/examples/post-applePay-sessions-basic-200"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 2,
        "x-methodName" : "getApplePaySession"
      }
    },
    "/cancels" : {
      "post" : {
        "tags" : [ "Modifications" ],
        "summary" : "Cancel an authorised payment",
        "description" : "Cancels the authorisation on a payment that has not yet been [captured](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/captures), and returns a unique reference for this request. You get the outcome of the request asynchronously, in a [**TECHNICAL_CANCEL** webhook](https://docs.adyen.com/online-payments/cancel#cancellation-webhook).\n\nIf you want to cancel a payment using the [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference), use the [`/payments/{paymentPspReference}/cancels`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/cancels) endpoint instead.\n\nIf you want to cancel a payment but are not sure whether it has been captured, use the [`/payments/{paymentPspReference}/reversals`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/reversals) endpoint instead.\n\nFor more information, refer to [Cancel](https://docs.adyen.com/online-payments/cancel).",
        "operationId" : "post-cancels",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StandalonePaymentCancelRequest"
              },
              "examples" : {
                "cancel-with-own-reference" : {
                  "$ref" : "#/components/examples/post-cancels-cancel-with-own-reference"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - the request has been fulfilled and has resulted in one or more new resources being created.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StandalonePaymentCancelResponse"
                },
                "examples" : {
                  "cancel-with-own-reference" : {
                    "$ref" : "#/components/examples/post-cancels-cancel-with-own-reference-201"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 3,
        "x-methodName" : "cancelAuthorisedPayment"
      }
    },
    "/cardDetails" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Get the brands and other details of a card",
        "description" : "Use this endpoint to get information about the card or network token that enables you to decide on the routing of the transaction and the eligibility of the card for the type of transaction.\n\nIf you include [your supported brands](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/cardDetails__reqParam_supportedBrands) in the request, the response also tells you if you support each [brand that was identified on the card](https://docs.adyen.com/api-explorer/Checkout/latest/post/cardDetails#responses-200-brands).\n\nIf you have an API-only integration and collect card data, use this endpoint to find out if the shopper's card is co-bad. For co-badged cards, you must let the shopper choose the brand to pay with  if you support both brands.\n\n## Server-side API libraries\nWe provide open-source [server-side API libraries](https://docs.adyen.com/development-resources/libraries/) in several languages: \n- PHP\n- Java\n- Node.js\n- .NET\n- Go\n- Python\n- Ruby\n- Apex (beta)\n\nSee our [integration examples](https://github.com/adyen-examples#%EF%B8%8F-official-integration-examples) for example uses of the libraries.\n\n## Developer resources\nBIN Lookup API is available through a Postman collection. Click the button below to create a fork, then set the environment variables at **Environments**&nbsp;>&nbsp;**Adyen&nbsp;APIs**. \n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25716737-677c7679-a695-4ebb-91da-68b4e7c9228a?action=collection%2Ffork&source=rip_markdown&collection-url=entityId%3D25716737-677c7679-a695-4ebb-91da-68b4e7c9228a%26entityType%3Dcollection%26workspaceId%3Da8d63f9f-cfc7-4810-90c5-9e0c60030d3e#?env%5BAdyen%20APIs%5D=W3sia2V5IjoiWC1BUEktS2V5IiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoic2VjcmV0In0seyJrZXkiOiJZT1VSX01FUkNIQU5UX0FDQ09VTlQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0In0seyJrZXkiOiJZT1VSX0NPTVBBTllfQUNDT1VOVCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQifSx7ImtleSI6IllPVVJfQkFMQU5DRV9QTEFURk9STSIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6ImRlZmF1bHQifV0=)\n\n\n",
        "operationId" : "post-cardDetails",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CardDetailsRequest"
              },
              "examples" : {
                "basic" : {
                  "$ref" : "#/components/examples/post-cardDetails-basic"
                },
                "supported-brands" : {
                  "$ref" : "#/components/examples/post-cardDetails-supported-brands"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CardDetailsResponse"
                },
                "examples" : {
                  "basic" : {
                    "$ref" : "#/components/examples/post-cardDetails-basic-200"
                  },
                  "supported-brands" : {
                    "$ref" : "#/components/examples/post-cardDetails-supported-brands-200"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 6,
        "x-methodName" : "cardDetails"
      }
    },
    "/donationCampaigns" : {
      "post" : {
        "tags" : [ "Donations" ],
        "summary" : "Get a list of donation campaigns.",
        "description" : "Queries the available donation campaigns for a donation based on the donation context (like merchant account, currency, and locale). The response contains active donation campaigns.",
        "operationId" : "post-donationCampaigns",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DonationCampaignsRequest"
              },
              "examples" : {
                "donation-campaigns" : {
                  "$ref" : "#/components/examples/post-donationCampaigns-donation-campaigns"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DonationCampaignsResponse"
                },
                "examples" : {
                  "donation-campaigns" : {
                    "$ref" : "#/components/examples/post-donationCampaigns-donation-campaigns-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "67",
        "x-sortIndex" : 1,
        "x-methodName" : "donationCampaigns"
      }
    },
    "/donations" : {
      "post" : {
        "tags" : [ "Donations" ],
        "summary" : "Start a transaction for donations",
        "description" : "Takes in the donation token generated by the `/payments` request and uses it to make the donation for the donation account specified in the request.\n\nFor more information, see [Donations](https://docs.adyen.com/online-payments/donations).",
        "operationId" : "post-donations",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DonationPaymentRequest"
              },
              "examples" : {
                "donations" : {
                  "$ref" : "#/components/examples/post-donations-donations"
                },
                "donations-with-campaigns" : {
                  "$ref" : "#/components/examples/post-donations-donations-with-campaigns"
                },
                "donations-with-token" : {
                  "$ref" : "#/components/examples/post-donations-donations-with-token"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DonationPaymentResponse"
                },
                "examples" : {
                  "donations" : {
                    "$ref" : "#/components/examples/post-donations-donations-200"
                  },
                  "donations-with-campaigns" : {
                    "$ref" : "#/components/examples/post-donations-donations-with-campaigns-200"
                  },
                  "donations-with-token" : {
                    "$ref" : "#/components/examples/post-donations-donations-with-token-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "donations-with-token" : {
                    "$ref" : "#/components/examples/post-donations-donations-with-token-422"
                  },
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 2,
        "x-methodName" : "donations"
      }
    },
    "/orders" : {
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Create an order",
        "description" : "Creates an order to be used for partial payments. Make a POST `/orders` call before making a `/payments` call when processing payments with different payment methods.",
        "operationId" : "post-orders",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateOrderRequest"
              },
              "examples" : {
                "basic" : {
                  "$ref" : "#/components/examples/post-orders-basic"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateOrderResponse"
                },
                "examples" : {
                  "basic" : {
                    "$ref" : "#/components/examples/post-orders-basic-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 2,
        "x-methodName" : "orders"
      }
    },
    "/orders/cancel" : {
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Cancel an order",
        "description" : "Cancels an order. Cancellation of an order results in an automatic rollback of all payments made in the order, either by canceling or refunding the payment, depending on the type of payment method.",
        "operationId" : "post-orders-cancel",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancelOrderRequest"
              },
              "examples" : {
                "basic" : {
                  "$ref" : "#/components/examples/post-orders-cancel-basic"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CancelOrderResponse"
                },
                "examples" : {
                  "basic" : {
                    "$ref" : "#/components/examples/post-orders-cancel-basic-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 3,
        "x-methodName" : "cancelOrder"
      }
    },
    "/originKeys" : {
      "post" : {
        "tags" : [ "Utility" ],
        "summary" : "Create originKey values for domains",
        "description" : "This operation takes the origin domains and returns a JSON object containing the corresponding origin keys for the domains. \n> If you're still using origin key for your Web Drop-in or Components integration, we recommend [switching to client key](https://docs.adyen.com/development-resources/client-side-authentication/migrate-from-origin-key-to-client-key). This allows you to use a single key for all origins, add or remove origins without generating a new key, and detect the card type from the number entered in your payment form. ",
        "operationId" : "post-originKeys",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UtilityRequest"
              },
              "examples" : {
                "basic" : {
                  "$ref" : "#/components/examples/post-originKeys-basic"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UtilityResponse"
                },
                "examples" : {
                  "basic" : {
                    "$ref" : "#/components/examples/post-originKeys-basic-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-deprecatedInVersion" : "67",
        "x-sortIndex" : 1,
        "x-methodName" : "originKeys"
      }
    },
    "/paymentLinks" : {
      "post" : {
        "tags" : [ "Payment links" ],
        "summary" : "Create a payment link",
        "description" : "Creates a payment link to a [Pay by Link](https://docs.adyen.com/unified-commerce/pay-by-link/) page where the shopper can pay. The list of payment methods presented to the shopper depends on the `currency` and `country` parameters sent in the request.\n\nFor more information, refer to [Pay by Link documentation](https://docs.adyen.com/online-payments/pay-by-link#create-payment-links-through-api).",
        "operationId" : "post-paymentLinks",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentLinkRequest"
              },
              "examples" : {
                "basic" : {
                  "$ref" : "#/components/examples/post-paymentLinks-basic"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentLinkResponse"
                },
                "examples" : {
                  "basic" : {
                    "$ref" : "#/components/examples/post-paymentLinks-basic-201"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 1,
        "x-methodName" : "paymentLinks"
      }
    },
    "/paymentLinks/{linkId}" : {
      "get" : {
        "tags" : [ "Payment links" ],
        "summary" : "Get a payment link",
        "description" : "Retrieves the payment link details using the payment link `id`.",
        "operationId" : "get-paymentLinks-linkId",
        "parameters" : [ {
          "name" : "linkId",
          "in" : "path",
          "description" : "Unique identifier of the payment link.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentLinkResponse"
                },
                "examples" : {
                  "basic" : {
                    "$ref" : "#/components/examples/get-paymentLinks-linkId-basic-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 2,
        "x-methodName" : "getPaymentLink"
      },
      "patch" : {
        "tags" : [ "Payment links" ],
        "summary" : "Update the status of a payment link",
        "description" : "Updates the status of a payment link. Use this endpoint to [force the expiry of a payment link](https://docs.adyen.com/online-payments/pay-by-link#update-payment-link-status).",
        "operationId" : "patch-paymentLinks-linkId",
        "parameters" : [ {
          "name" : "linkId",
          "in" : "path",
          "description" : "Unique identifier of the payment link.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePaymentLinkRequest"
              },
              "examples" : {
                "basic" : {
                  "$ref" : "#/components/examples/patch-paymentLinks-linkId-basic"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentLinkResponse"
                },
                "examples" : {
                  "basic" : {
                    "$ref" : "#/components/examples/patch-paymentLinks-linkId-basic-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 3,
        "x-methodName" : "updatePaymentLink"
      }
    },
    "/paymentMethods" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Get a list of available payment methods",
        "description" : "Retrieves the list of available payment methods for the transaction, based on the transaction information like amount, country, and currency.",
        "operationId" : "post-paymentMethods",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentMethodsRequest"
              },
              "examples" : {
                "basic" : {
                  "$ref" : "#/components/examples/post-paymentMethods-basic"
                },
                "filtered" : {
                  "$ref" : "#/components/examples/post-paymentMethods-filtered"
                },
                "include-stored" : {
                  "$ref" : "#/components/examples/post-paymentMethods-include-stored"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentMethodsResponse"
                },
                "examples" : {
                  "basic" : {
                    "$ref" : "#/components/examples/post-paymentMethods-basic-200"
                  },
                  "filtered" : {
                    "$ref" : "#/components/examples/post-paymentMethods-filtered-200"
                  },
                  "include-stored" : {
                    "$ref" : "#/components/examples/post-paymentMethods-include-stored-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 2,
        "x-methodName" : "paymentMethods"
      }
    },
    "/paymentMethods/balance" : {
      "post" : {
        "tags" : [ "Orders" ],
        "summary" : "Get the balance of a gift card",
        "description" : "Retrieves the balance remaining on a shopper's gift card. To check a gift card's balance, make a POST `/paymentMethods/balance` call and include the gift card's details inside a `paymentMethod` object.",
        "operationId" : "post-paymentMethods-balance",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BalanceCheckRequest"
              },
              "examples" : {
                "basic" : {
                  "$ref" : "#/components/examples/post-paymentMethods-balance-basic"
                },
                "not-enough" : {
                  "$ref" : "#/components/examples/post-paymentMethods-balance-not-enough"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BalanceCheckResponse"
                },
                "examples" : {
                  "basic" : {
                    "$ref" : "#/components/examples/post-paymentMethods-balance-basic-200"
                  },
                  "not-enough" : {
                    "$ref" : "#/components/examples/post-paymentMethods-balance-not-enough-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 1,
        "x-methodName" : "getBalanceOfGiftCard"
      }
    },
    "/payments" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Start a transaction",
        "description" : "Sends payment parameters (like amount, country, and currency) together with other required input details collected from the shopper. To know more about required parameters for specific payment methods, refer to our [payment method guides](https://docs.adyen.com/payment-methods). \nThe response depends on the [payment flow](https://docs.adyen.com/payment-methods#payment-flow):\n* For a direct flow, the response includes a `pspReference` and a `resultCode` with the payment result, for example **Authorised** or **Refused**. \n* For a redirect or additional action, the response contains an `action` object. ",
        "operationId" : "post-payments",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentRequest"
              },
              "examples" : {
                "applepay" : {
                  "$ref" : "#/components/examples/post-payments-applepay"
                },
                "card-3d-secure-2-web" : {
                  "$ref" : "#/components/examples/post-payments-card-3d-secure-2-web"
                },
                "card-3d-secure-direct" : {
                  "$ref" : "#/components/examples/post-payments-card-3d-secure-direct"
                },
                "card-direct" : {
                  "$ref" : "#/components/examples/post-payments-card-direct"
                },
                "card-securedfields" : {
                  "$ref" : "#/components/examples/post-payments-card-securedfields"
                },
                "enableOneClick-SF" : {
                  "$ref" : "#/components/examples/post-payments-enableOneClick-SF"
                },
                "enableOneClick-raw" : {
                  "$ref" : "#/components/examples/post-payments-enableOneClick-raw"
                },
                "googlepay" : {
                  "$ref" : "#/components/examples/post-payments-googlepay"
                },
                "ideal" : {
                  "$ref" : "#/components/examples/post-payments-ideal"
                },
                "klarna" : {
                  "$ref" : "#/components/examples/post-payments-klarna"
                },
                "oneclick-direct" : {
                  "$ref" : "#/components/examples/post-payments-oneclick-direct"
                },
                "oneclick-securedfields" : {
                  "$ref" : "#/components/examples/post-payments-oneclick-securedfields"
                },
                "recurring" : {
                  "$ref" : "#/components/examples/post-payments-recurring"
                },
                "split" : {
                  "$ref" : "#/components/examples/post-payments-split"
                },
                "split-balanceplatform" : {
                  "$ref" : "#/components/examples/post-payments-split-balanceplatform"
                },
                "subscription-first-transaction" : {
                  "$ref" : "#/components/examples/post-payments-subscription-first-transaction"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentResponse"
                },
                "examples" : {
                  "card-direct" : {
                    "$ref" : "#/components/examples/post-payments-card-direct-200"
                  },
                  "card-securedfields" : {
                    "$ref" : "#/components/examples/post-payments-card-securedfields-200"
                  },
                  "enableOneClick-SF" : {
                    "$ref" : "#/components/examples/post-payments-enableOneClick-SF-200"
                  },
                  "enableOneClick-raw" : {
                    "$ref" : "#/components/examples/post-payments-enableOneClick-raw-200"
                  },
                  "ideal" : {
                    "$ref" : "#/components/examples/post-payments-ideal-200"
                  },
                  "split-balanceplatform" : {
                    "$ref" : "#/components/examples/post-payments-split-balanceplatform-200"
                  },
                  "subscription-first-transaction" : {
                    "$ref" : "#/components/examples/post-payments-subscription-first-transaction-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 3,
        "x-methodName" : "payments"
      }
    },
    "/payments/details" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Submit details for a payment",
        "description" : "Submits details for a payment created using `/payments`. This step is only needed when no final state has been reached on the `/payments` request, for example when the shopper was redirected to another page to complete the payment.\n\n",
        "operationId" : "post-payments-details",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentDetailsRequest"
              },
              "examples" : {
                "00.redirect" : {
                  "$ref" : "#/components/examples/post-payments-details-00.redirect"
                },
                "3d-secure-2-native" : {
                  "$ref" : "#/components/examples/post-payments-details-3d-secure-2-native"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentDetailsResponse"
                },
                "examples" : {
                  "00.redirect" : {
                    "$ref" : "#/components/examples/post-payments-details-00.redirect-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 4,
        "x-methodName" : "paymentsDetails"
      }
    },
    "/payments/{paymentPspReference}/amountUpdates" : {
      "post" : {
        "tags" : [ "Modifications" ],
        "summary" : "Update an authorised amount",
        "description" : "Increases or decreases the authorised payment amount and returns a unique reference for this request. You get the outcome of the request asynchronously, in an [**AUTHORISATION_ADJUSTMENT** webhook](https://docs.adyen.com/development-resources/webhooks/webhook-types/#event-codes).\n\nYou can only update authorised amounts that have not yet been [captured](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/captures).\n\nThe amount you specify in the request is the updated amount, which is larger or smaller than the initial authorised amount.\n\nFor more information, refer to [Authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#use-cases).",
        "operationId" : "post-payments-paymentPspReference-amountUpdates",
        "parameters" : [ {
          "name" : "paymentPspReference",
          "in" : "path",
          "description" : "The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the payment.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentAmountUpdateRequest"
              },
              "examples" : {
                "amount-update" : {
                  "$ref" : "#/components/examples/post-payments-paymentPspReference-amountUpdates-amount-update"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - the request has been fulfilled and has resulted in one or more new resources being created.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentAmountUpdateResponse"
                },
                "examples" : {
                  "amount-update" : {
                    "$ref" : "#/components/examples/post-payments-paymentPspReference-amountUpdates-amount-update-201"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 6,
        "x-methodName" : "updateAuthorisedAmount"
      }
    },
    "/payments/{paymentPspReference}/cancels" : {
      "post" : {
        "tags" : [ "Modifications" ],
        "summary" : "Cancel an authorised payment",
        "description" : "Cancels the authorisation on a payment that has not yet been [captured](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/captures), and returns a unique reference for this request. You get the outcome of the request asynchronously, in a [**CANCELLATION** webhook](https://docs.adyen.com/online-payments/cancel#cancellation-webhook).\n\nIf you want to cancel a payment but don't have the [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference), use the [`/cancels`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/cancels) endpoint instead.\n\nIf you want to cancel a payment but are not sure whether it has been captured, use the [`/payments/{paymentPspReference}/reversals`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/reversals) endpoint instead.\n\nFor more information, refer to [Cancel](https://docs.adyen.com/online-payments/cancel).",
        "operationId" : "post-payments-paymentPspReference-cancels",
        "parameters" : [ {
          "name" : "paymentPspReference",
          "in" : "path",
          "description" : "The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the payment that you want to cancel. ",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentCancelRequest"
              },
              "examples" : {
                "cancel-with-psp-reference" : {
                  "$ref" : "#/components/examples/post-payments-paymentPspReference-cancels-cancel-with-psp-reference"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - the request has been fulfilled and has resulted in one or more new resources being created.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentCancelResponse"
                },
                "examples" : {
                  "cancel-with-psp-reference" : {
                    "$ref" : "#/components/examples/post-payments-paymentPspReference-cancels-cancel-with-psp-reference-201"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 2,
        "x-methodName" : "cancelAuthorisedPaymentByPspReference"
      }
    },
    "/payments/{paymentPspReference}/captures" : {
      "post" : {
        "tags" : [ "Modifications" ],
        "summary" : "Capture an authorised payment",
        "description" : " Captures an authorised payment and returns a unique reference for this request. You get the outcome of the request asynchronously, in a [**CAPTURE** webhook](https://docs.adyen.com/online-payments/capture#capture-notification).\n\nYou can capture either the full authorised amount or a part of the authorised amount. By default, any unclaimed amount after a partial capture gets cancelled. This does not apply if you enabled multiple partial captures on your account and the payment method supports multiple partial captures. \n\n[Automatic capture](https://docs.adyen.com/online-payments/capture#automatic-capture) is the default setting for most payment methods. In these cases, you don't need to make capture requests. However, making capture requests for payments that are captured automatically does not result in double charges.\n\nFor more information, refer to [Capture](https://docs.adyen.com/online-payments/capture).",
        "operationId" : "post-payments-paymentPspReference-captures",
        "parameters" : [ {
          "name" : "paymentPspReference",
          "in" : "path",
          "description" : "The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the payment that you want to capture.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentCaptureRequest"
              },
              "examples" : {
                "capture" : {
                  "$ref" : "#/components/examples/post-payments-paymentPspReference-captures-capture"
                },
                "split-balanceplatform" : {
                  "$ref" : "#/components/examples/post-payments-paymentPspReference-captures-split-balanceplatform"
                },
                "split-classic" : {
                  "$ref" : "#/components/examples/post-payments-paymentPspReference-captures-split-classic"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - the request has been fulfilled and has resulted in one or more new resources being created.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentCaptureResponse"
                },
                "examples" : {
                  "capture" : {
                    "$ref" : "#/components/examples/post-payments-paymentPspReference-captures-capture-201"
                  },
                  "split-balanceplatform" : {
                    "$ref" : "#/components/examples/post-payments-paymentPspReference-captures-split-balanceplatform-201"
                  },
                  "split-classic" : {
                    "$ref" : "#/components/examples/post-payments-paymentPspReference-captures-split-classic-201"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 1,
        "x-methodName" : "captureAuthorisedPayment"
      }
    },
    "/payments/{paymentPspReference}/refunds" : {
      "post" : {
        "tags" : [ "Modifications" ],
        "summary" : "Refund a captured payment",
        "description" : "Refunds a payment that has been [captured](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/captures), and returns a unique reference for this request. You get the outcome of the request asynchronously, in a [**REFUND** webhook](https://docs.adyen.com/online-payments/refund#refund-webhook).\n\nYou can refund either the full captured amount or a part of the captured amount. You can also perform multiple partial refunds, as long as their sum doesn't exceed the captured amount.\n\n> Some payment methods do not support partial refunds. To learn if a payment method supports partial refunds, refer to the payment method page such as [cards](https://docs.adyen.com/payment-methods/cards#supported-cards), [iDEAL](https://docs.adyen.com/payment-methods/ideal), or [Klarna](https://docs.adyen.com/payment-methods/klarna). \n\nIf you want to refund a payment but are not sure whether it has been captured, use the [`/payments/{paymentPspReference}/reversals`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/reversals) endpoint instead.\n\nFor more information, refer to [Refund](https://docs.adyen.com/online-payments/refund).",
        "operationId" : "post-payments-paymentPspReference-refunds",
        "parameters" : [ {
          "name" : "paymentPspReference",
          "in" : "path",
          "description" : "The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the payment that you want to refund.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentRefundRequest"
              },
              "examples" : {
                "refund" : {
                  "$ref" : "#/components/examples/post-payments-paymentPspReference-refunds-refund"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - the request has been fulfilled and has resulted in one or more new resources being created.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentRefundResponse"
                },
                "examples" : {
                  "refund" : {
                    "$ref" : "#/components/examples/post-payments-paymentPspReference-refunds-refund-201"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 4,
        "x-methodName" : "refundCapturedPayment"
      }
    },
    "/payments/{paymentPspReference}/reversals" : {
      "post" : {
        "tags" : [ "Modifications" ],
        "summary" : "Refund or cancel a payment",
        "description" : "[Refunds](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/refunds) a payment if it has already been captured, and [cancels](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments/{paymentPspReference}/cancels) a payment if it has not yet been captured. Returns a unique reference for this request. You get the outcome of the request asynchronously, in a [**CANCEL_OR_REFUND** webhook](https://docs.adyen.com/online-payments/reversal/#cancel-or-refund-webhook).\n\nThe reversed amount is always the full payment amount.\n> Do not use this request for payments that involve multiple partial captures.\n\nFor more information, refer to [Reversal](https://docs.adyen.com/online-payments/reversal).",
        "operationId" : "post-payments-paymentPspReference-reversals",
        "parameters" : [ {
          "name" : "paymentPspReference",
          "in" : "path",
          "description" : "The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the payment that you want to reverse. ",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentReversalRequest"
              },
              "examples" : {
                "reversal" : {
                  "$ref" : "#/components/examples/post-payments-paymentPspReference-reversals-reversal"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - the request has been fulfilled and has resulted in one or more new resources being created.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentReversalResponse"
                },
                "examples" : {
                  "reversal" : {
                    "$ref" : "#/components/examples/post-payments-paymentPspReference-reversals-reversal-201"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 5,
        "x-methodName" : "refundOrCancelPayment"
      }
    },
    "/paypal/updateOrder" : {
      "post" : {
        "tags" : [ "Utility" ],
        "summary" : "Updates the order for PayPal Express Checkout",
        "description" : "Updates the order for PayPal Express Checkout. This can be used to update the PayPal lightbox with an updated amount and delivery methods based on the delivery address.",
        "operationId" : "post-paypal-updateOrder",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaypalUpdateOrderRequest"
              },
              "examples" : {
                "advanced-with-delivery" : {
                  "$ref" : "#/components/examples/post-paypal-updateOrder-advanced-with-delivery"
                },
                "advanced-without-delivery" : {
                  "$ref" : "#/components/examples/post-paypal-updateOrder-advanced-without-delivery"
                },
                "sessions-with-delivery" : {
                  "$ref" : "#/components/examples/post-paypal-updateOrder-sessions-with-delivery"
                },
                "sessions-without-delivery" : {
                  "$ref" : "#/components/examples/post-paypal-updateOrder-sessions-without-delivery"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaypalUpdateOrderResponse"
                },
                "examples" : {
                  "advanced-with-delivery" : {
                    "$ref" : "#/components/examples/post-paypal-updateOrder-advanced-with-delivery-200"
                  },
                  "advanced-without-delivery" : {
                    "$ref" : "#/components/examples/post-paypal-updateOrder-advanced-without-delivery-200"
                  },
                  "sessions-with-delivery" : {
                    "$ref" : "#/components/examples/post-paypal-updateOrder-sessions-with-delivery-200"
                  },
                  "sessions-without-delivery" : {
                    "$ref" : "#/components/examples/post-paypal-updateOrder-sessions-without-delivery-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 3,
        "x-methodName" : "updatesOrderForPaypalExpressCheckout"
      }
    },
    "/sessions" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Create a payment session",
        "description" : "Creates a payment session for [Drop-in](https://docs.adyen.com/online-payments/build-your-integration/sessions-flow/?platform=Web&integration=Drop-in), [Components](https://docs.adyen.com/online-payments/build-your-integration/sessions-flow/?platform=Web&integration=Components), and [Hosted Checkout](https://docs.adyen.com/online-payments/build-your-integration/sessions-flow/?platform=Web&integration=Hosted+Checkout) integrations.\n\nThe response contains encrypted payment session data. The front end then uses the session data to make any required server-side calls for the payment flow.\n\nYou get the payment outcome asynchronously, in an [AUTHORISATION](https://docs.adyen.com/api-explorer/#/Webhooks/latest/post/AUTHORISATION) webhook.",
        "operationId" : "post-sessions",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCheckoutSessionRequest"
              },
              "examples" : {
                "00.success" : {
                  "$ref" : "#/components/examples/post-sessions-00.success"
                },
                "01.klarna" : {
                  "$ref" : "#/components/examples/post-sessions-01.klarna"
                },
                "enableOneClick" : {
                  "$ref" : "#/components/examples/post-sessions-enableOneClick"
                },
                "split" : {
                  "$ref" : "#/components/examples/post-sessions-split"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - the request has been fulfilled and has resulted in one or more new resources being created.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCheckoutSessionResponse"
                },
                "examples" : {
                  "00.success" : {
                    "$ref" : "#/components/examples/post-sessions-00.success-201"
                  },
                  "01.klarna" : {
                    "$ref" : "#/components/examples/post-sessions-01.klarna-201"
                  },
                  "enableOneClick" : {
                    "$ref" : "#/components/examples/post-sessions-enableOneClick-201"
                  },
                  "split" : {
                    "$ref" : "#/components/examples/post-sessions-split-201"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "68",
        "x-sortIndex" : 1,
        "x-methodName" : "sessions"
      }
    },
    "/sessions/{sessionId}" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "Get the result of a payment session",
        "description" : "Returns the status of the payment session with the `sessionId` and `sessionResult` specified in the path.",
        "operationId" : "get-sessions-sessionId",
        "parameters" : [ {
          "name" : "sessionId",
          "in" : "path",
          "description" : "A unique identifier of the session.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sessionResult",
          "in" : "query",
          "description" : "The `sessionResult` value from the Drop-in or Component.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionResultResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-sessions-sessionId-success-200"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "68",
        "x-sortIndex" : 2,
        "x-methodName" : "getResultOfPaymentSession"
      }
    },
    "/storedPaymentMethods" : {
      "post" : {
        "tags" : [ "Recurring" ],
        "summary" : "Create a token to store payment details",
        "description" : "Creates a token to store the shopper's payment details. This token can be used for the shopper's future payments.",
        "operationId" : "post-storedPaymentMethods",
        "parameters" : [ {
          "$ref" : "#/components/parameters/Idempotency-Key"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StoredPaymentMethodRequest"
              },
              "examples" : {
                "encrypted-card-details" : {
                  "$ref" : "#/components/examples/post-storedPaymentMethods-encrypted-card-details"
                },
                "unencrypted-card-details" : {
                  "$ref" : "#/components/examples/post-storedPaymentMethods-unencrypted-card-details"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created - the request has been fulfilled and has resulted in one or more new resources being created.",
            "headers" : {
              "Idempotency-Key" : {
                "$ref" : "#/components/headers/Idempotency-Key"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoredPaymentMethodResource"
                },
                "examples" : {
                  "encrypted-card-details" : {
                    "$ref" : "#/components/examples/post-storedPaymentMethods-encrypted-card-details-201"
                  },
                  "unencrypted-card-details" : {
                    "$ref" : "#/components/examples/post-storedPaymentMethods-unencrypted-card-details-201"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-sortIndex" : 1,
        "x-methodName" : "storedPaymentMethods"
      }
    },
    "/validateShopperId" : {
      "post" : {
        "tags" : [ "Utility" ],
        "summary" : "Validates shopper Id",
        "description" : "Validates the shopperId.\n",
        "operationId" : "post-validateShopperId",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValidateShopperIdRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidateShopperIdResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          }
        },
        "x-methodName" : "validateShopperId",
        "x-sortIndex" : 4
      }
    }
  },
  "components" : {
    "schemas" : {
      "AccountInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountAgeIndicator" : {
            "type" : "string",
            "description" : "Indicator for the length of time since this shopper account was created in the merchant's environment.\nAllowed values:\n* notApplicable\n* thisTransaction\n* lessThan30Days\n* from30To60Days\n* moreThan60Days",
            "enum" : [ "notApplicable", "thisTransaction", "lessThan30Days", "from30To60Days", "moreThan60Days" ]
          },
          "accountChangeDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date when the shopper's account was last changed."
          },
          "accountChangeIndicator" : {
            "type" : "string",
            "description" : "Indicator for the length of time since the shopper's account was last updated.\nAllowed values:\n* thisTransaction\n* lessThan30Days\n* from30To60Days\n* moreThan60Days",
            "enum" : [ "thisTransaction", "lessThan30Days", "from30To60Days", "moreThan60Days" ]
          },
          "accountCreationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date when the shopper's account was created."
          },
          "accountType" : {
            "type" : "string",
            "description" : "Indicates the type of account. For example, for a multi-account card product.\nAllowed values:\n* notApplicable\n* credit\n* debit",
            "enum" : [ "notApplicable", "credit", "debit" ],
            "x-addedInVersion" : "50"
          },
          "addCardAttemptsDay" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of attempts the shopper tried to add a card to their account in the last day."
          },
          "deliveryAddressUsageDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date the selected delivery address was first used."
          },
          "deliveryAddressUsageIndicator" : {
            "type" : "string",
            "description" : "Indicator for the length of time since this delivery address was first used.\nAllowed values:\n* thisTransaction\n* lessThan30Days\n* from30To60Days\n* moreThan60Days",
            "enum" : [ "thisTransaction", "lessThan30Days", "from30To60Days", "moreThan60Days" ]
          },
          "homePhone" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Shopper's home phone number (including the country code).",
            "x-deprecatedInVersion" : "68",
            "x-deprecatedMessage" : "Use `ThreeDS2RequestData.homePhone` instead."
          },
          "mobilePhone" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Shopper's mobile phone number (including the country code).",
            "x-deprecatedInVersion" : "68",
            "x-deprecatedMessage" : "Use `ThreeDS2RequestData.mobilePhone` instead."
          },
          "passwordChangeDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date when the shopper last changed their password."
          },
          "passwordChangeIndicator" : {
            "type" : "string",
            "description" : "Indicator when the shopper has changed their password.\nAllowed values:\n* notApplicable\n* thisTransaction\n* lessThan30Days\n* from30To60Days\n* moreThan60Days",
            "enum" : [ "notApplicable", "thisTransaction", "lessThan30Days", "from30To60Days", "moreThan60Days" ]
          },
          "pastTransactionsDay" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of all transactions (successful and abandoned) from this shopper in the past 24 hours."
          },
          "pastTransactionsYear" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of all transactions (successful and abandoned) from this shopper in the past year."
          },
          "paymentAccountAge" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date this payment method was added to the shopper's account."
          },
          "paymentAccountIndicator" : {
            "type" : "string",
            "description" : "Indicator for the length of time since this payment method was added to this shopper's account.\nAllowed values:\n* notApplicable\n* thisTransaction\n* lessThan30Days\n* from30To60Days\n* moreThan60Days",
            "enum" : [ "notApplicable", "thisTransaction", "lessThan30Days", "from30To60Days", "moreThan60Days" ]
          },
          "purchasesLast6Months" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of successful purchases in the last six months."
          },
          "suspiciousActivity" : {
            "type" : "boolean",
            "description" : "Whether suspicious activity was recorded on this account."
          },
          "workPhone" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Shopper's work phone number (including the country code).",
            "x-deprecatedInVersion" : "68",
            "x-deprecatedMessage" : "Use `ThreeDS2RequestData.workPhone` instead."
          }
        }
      },
      "AcctInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "chAccAgeInd" : {
            "type" : "string",
            "description" : "Length of time that the cardholder has had the account with the 3DS Requestor. \nAllowed values:\n* **01** — No account\n* **02** — Created during this transaction\n* **03** — Less than 30 days\n* **04** — 30–60 days\n* **05** — More than 60 days",
            "enum" : [ "01", "02", "03", "04", "05" ],
            "maxLength" : 2,
            "minLength" : 2
          },
          "chAccChange" : {
            "type" : "string",
            "description" : "Date that the cardholder’s account with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added. \nFormat: **YYYYMMDD**"
          },
          "chAccChangeInd" : {
            "type" : "string",
            "description" : "Length of time since the cardholder’s account information with the 3DS Requestor was last changed, including Billing or Shipping address, new payment account, or new user(s) added. \nAllowed values:\n* **01** — Changed during this transaction\n* **02** — Less than 30 days\n* **03** — 30–60 days\n* **04** — More than 60 days",
            "enum" : [ "01", "02", "03", "04" ],
            "maxLength" : 2,
            "minLength" : 2
          },
          "chAccPwChange" : {
            "type" : "string",
            "description" : "Date that cardholder’s account with the 3DS Requestor had a password change or account reset. \nFormat: **YYYYMMDD**"
          },
          "chAccPwChangeInd" : {
            "type" : "string",
            "description" : "Indicates the length of time since the cardholder’s account with the 3DS Requestor had a password change or account reset. \nAllowed values:\n* **01** — No change\n* **02** — Changed during this transaction\n* **03** — Less than 30 days\n* **04** — 30–60 days\n* **05** — More than 60 days",
            "enum" : [ "01", "02", "03", "04", "05" ],
            "maxLength" : 2,
            "minLength" : 2
          },
          "chAccString" : {
            "type" : "string",
            "description" : "Date that the cardholder opened the account with the 3DS Requestor. \nFormat: **YYYYMMDD**"
          },
          "nbPurchaseAccount" : {
            "type" : "string",
            "description" : "Number of purchases with this cardholder account during the previous six months. Max length: 4 characters."
          },
          "paymentAccAge" : {
            "type" : "string",
            "description" : "String that the payment account was enrolled in the cardholder’s account with the 3DS Requestor. \nFormat: **YYYYMMDD**"
          },
          "paymentAccInd" : {
            "type" : "string",
            "description" : "Indicates the length of time that the payment account was enrolled in the cardholder’s account with the 3DS Requestor. \nAllowed values:\n* **01** — No account (guest checkout)\n* **02** — During this transaction\n* **03** — Less than 30 days\n* **04** — 30–60 days\n* **05** — More than 60 days",
            "enum" : [ "01", "02", "03", "04", "05" ],
            "maxLength" : 2,
            "minLength" : 2
          },
          "provisionAttemptsDay" : {
            "type" : "string",
            "description" : "Number of Add Card attempts in the last 24 hours. Max length: 3 characters."
          },
          "shipAddressUsage" : {
            "type" : "string",
            "description" : "String when the shipping address used for this transaction was first used with the 3DS Requestor. \nFormat: **YYYYMMDD**"
          },
          "shipAddressUsageInd" : {
            "type" : "string",
            "description" : "Indicates when the shipping address used for this transaction was first used with the 3DS Requestor. \nAllowed values:\n* **01** — This transaction\n* **02** — Less than 30 days\n* **03** — 30–60 days\n* **04** — More than 60 days",
            "enum" : [ "01", "02", "03", "04" ],
            "maxLength" : 2,
            "minLength" : 2
          },
          "shipNameIndicator" : {
            "type" : "string",
            "description" : "Indicates if the Cardholder Name on the account is identical to the shipping Name used for this transaction. \nAllowed values:\n* **01** — Account Name identical to shipping Name\n* **02** — Account Name different to shipping Name",
            "enum" : [ "01", "02" ],
            "maxLength" : 2,
            "minLength" : 2
          },
          "suspiciousAccActivity" : {
            "type" : "string",
            "description" : "Indicates whether the 3DS Requestor has experienced suspicious activity (including previous fraud) on the cardholder account. \nAllowed values:\n* **01** — No suspicious activity has been observed\n* **02** — Suspicious activity has been observed",
            "enum" : [ "01", "02" ],
            "maxLength" : 2,
            "minLength" : 2
          },
          "txnActivityDay" : {
            "type" : "string",
            "description" : "Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous 24 hours. Max length: 3 characters.",
            "maxLength" : 3
          },
          "txnActivityYear" : {
            "type" : "string",
            "description" : "Number of transactions (successful and abandoned) for this cardholder account with the 3DS Requestor across all payment accounts in the previous year. Max length: 3 characters.",
            "maxLength" : 3
          }
        }
      },
      "AchDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountHolderType" : {
            "type" : "string",
            "description" : "The account holder type (personal or business).",
            "enum" : [ "business", "personal" ]
          },
          "bankAccountNumber" : {
            "type" : "string",
            "description" : "The bank account number (without separators)."
          },
          "bankAccountType" : {
            "type" : "string",
            "description" : "The bank account type (checking, savings...).",
            "enum" : [ "balance", "checking", "deposit", "general", "other", "payment", "savings" ]
          },
          "bankLocationId" : {
            "type" : "string",
            "description" : "The bank routing number of the account. The field value is `nil` in most cases."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "encryptedBankAccountNumber" : {
            "type" : "string",
            "description" : "Encrypted bank account number. The bank account number (without separators)."
          },
          "encryptedBankLocationId" : {
            "type" : "string",
            "description" : "Encrypted location id. The bank routing number of the account. The field value is `nil` in most cases."
          },
          "ownerName" : {
            "type" : "string",
            "description" : "The name of the bank account holder.\nIf you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:\n* χ12 is converted to ch12.\n* üA is converted to euA.\n* Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\nAfter replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:\n* John17 - allowed.\n* J17 - allowed.\n* 171 - not allowed.\n* John-7 - allowed.\n> If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "transferInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of your user's verified transfer instrument, which you can use to top up their balance accounts."
          },
          "type" : {
            "type" : "string",
            "default" : "ach",
            "description" : "**ach**",
            "enum" : [ "ach", "ach_plaid" ]
          }
        },
        "title" : "ACH Direct Debit"
      },
      "AdditionalData3DSecure" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "allow3DS2" : {
            "type" : "string",
            "description" : "Indicates if you are able to process 3D Secure 2 transactions natively on your payment page. Send this parameter when you are using `/payments` endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).\n\n > This parameter only indicates readiness to support native 3D Secure 2 authentication. To specify if you _want_ to perform 3D Secure, use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) or send the `executeThreeD` parameter.\n\nPossible values:\n* **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen selects redirect or native authentication based on your configuration to optimize authorization rates and improve the shopper's experience.\n* **false** – Not ready to support native 3D Secure 2 authentication. Adyen offers redirect 3D Secure 2 authentication instead, based on your configuration.\n"
          },
          "challengeWindowSize" : {
            "type" : "string",
            "description" : "Dimensions of the 3DS2 challenge window to be displayed to the cardholder.\n\nPossible values:\n\n* **01** - size of 250x400 \n* **02** - size of 390x400\n* **03** - size of 500x600\n* **04** - size of 600x400\n* **05** - Fullscreen",
            "enum" : [ "01", "02", "03", "04", "05" ]
          },
          "executeThreeD" : {
            "type" : "string",
            "description" : "Indicates if you want to perform 3D Secure authentication on a transaction.\n\n > Alternatively, you can use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) to configure rules for applying 3D Secure.\n\nPossible values:\n* **true** – Perform 3D Secure authentication.\n* **false** – Don't perform 3D Secure authentication. Note that this setting results in refusals if the issuer mandates 3D Secure because of the PSD2 directive  or other, national regulations. \n"
          },
          "mpiImplementationType" : {
            "type" : "string",
            "description" : "In case of Secure+, this field must be set to **CUPSecurePlus**."
          },
          "scaExemption" : {
            "type" : "string",
            "description" : "Indicates the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that you want to request for the transaction.\n\n Possible values:\n* **lowValue** \n* **secureCorporate** \n* **trustedBeneficiary** \n* **transactionRiskAnalysis** "
          },
          "threeDSVersion" : {
            "type" : "string",
            "description" : "Indicates your preference for the 3D Secure version. \n> If you use this parameter, you override the checks from Adyen's Authentication Engine. We recommend to use this field only if you have an extensive knowledge of 3D Secure.\n\nPossible values:\n* **2.1.0**: Apply 3D Secure version 2.1.0. \n* **2.2.0**: Apply 3D Secure version 2.2.0. If the issuer does not support version 2.2.0, we will fall back to 2.1.0.\n\nThe following rules apply:\n* If you prefer 2.1.0 or 2.2.0 but we receive a negative `transStatus` in the `ARes`, we will apply the fallback policy configured in your account.\n* If you the BIN is not enrolled, you will receive an error.\n\n"
          }
        }
      },
      "AdditionalDataAirline" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "airline.agency_invoice_number" : {
            "type" : "string",
            "description" : "The reference number for the invoice, issued by the agency.\n* Encoding: ASCII\n* minLength: 1 character\n* maxLength: 6 characters"
          },
          "airline.agency_plan_name" : {
            "type" : "string",
            "description" : "The two-letter agency plan identifier.\n* Encoding: ASCII\n* minLength: 2 characters\n* maxLength: 2 characters"
          },
          "airline.airline_code" : {
            "type" : "string",
            "description" : "The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier.\n* Format: IATA 3-digit accounting code (PAX)\n* Example: KLM = 074\n* minLength: 3 characters\n* maxLength: 3 characters\n* Must not be all spaces\n* Must not be all zeros."
          },
          "airline.airline_designator_code" : {
            "type" : "string",
            "description" : "The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier.\n* Encoding: ASCII\n* Example: KLM = KL\n* minLength: 2 characters\n* maxLength: 2 characters\n* Must not be all spaces\n* Must not be all zeros."
          },
          "airline.boarding_fee" : {
            "type" : "string",
            "description" : "The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* Encoding: Numeric\n* minLength: 1 character\n* maxLength: 18 characters"
          },
          "airline.computerized_reservation_system" : {
            "type" : "string",
            "description" : "The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket.\n* Encoding: ASCII\n* minLength: 4 characters\n* maxLength: 4 characters"
          },
          "airline.customer_reference_number" : {
            "type" : "string",
            "description" : "The alphanumeric customer reference number.\n* Encoding: ASCII\n* maxLength: 20 characters\n* If you send more than 20 characters, the customer reference number is truncated\n* Must not be all spaces"
          },
          "airline.document_type" : {
            "type" : "string",
            "description" : "A code that identifies the type of item bought. The description of the code can appear on credit card statements.\n* Encoding: ASCII\n* Example: Passenger ticket = 01\n* minLength: 2 characters\n* maxLength: 2 characters"
          },
          "airline.flight_date" : {
            "type" : "string",
            "description" : "The flight departure date. Local time `(HH:mm)` is optional.\n* Date format: `yyyy-MM-dd`\n* Date and time format: `yyyy-MM-dd HH:mm`\n* minLength: 10 characters\n* maxLength: 16 characters"
          },
          "airline.issue_date" : {
            "type" : "string",
            "description" : "The date that the ticket was issued to the passenger.\n* minLength: 6 characters\n* maxLength: 6 characters\n* Date format: YYMMDD"
          },
          "airline.leg.carrier_code" : {
            "type" : "string",
            "description" : "The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier.\nThis field is required if the airline data includes leg details.\n* Example: KLM = KL\n* minLength: 2 characters\n* maxLength: 2 characters\n* Must not be all spaces\n* Must not be all zeros."
          },
          "airline.leg.class_of_travel" : {
            "type" : "string",
            "description" : "A one-letter travel class identifier.\n The following are common:\n * F: first class\n* J: business class\n* Y: economy class\n* W: premium economy\n\n* Encoding: ASCII\n* minLength: 1 character\n* maxLength: 1 character\n* Must not be all spaces\n* Must not be all zeros."
          },
          "airline.leg.date_of_travel" : {
            "type" : "string",
            "description" : "\t\nDate and time of travel in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format `yyyy-MM-dd HH:mm`.\n* Encoding: ASCII\n* minLength: 16 characters\n* maxLength: 16 characters"
          },
          "airline.leg.depart_airport" : {
            "type" : "string",
            "description" : "The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport.\nThis field is required if the airline data includes leg details.\n\n* Encoding: ASCII\n* Example: Amsterdam = AMS\n* minLength: 3 characters\n* maxLength: 3 characters\n* Must not be all spaces\n* Must not be all zeros."
          },
          "airline.leg.depart_tax" : {
            "type" : "string",
            "description" : "The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* Encoding: Numeric\n* minLength: 1\n* maxLength: 12\n* Must not be all zeros."
          },
          "airline.leg.destination_code" : {
            "type" : "string",
            "description" : "The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport.\nThis field is required if the airline data includes leg details.\n* Example: Amsterdam = AMS\n* Encoding: ASCII\n* minLength: 3 characters\n* maxLength: 3 characters\n* Must not be all spaces\n* Must not be all zeros."
          },
          "airline.leg.fare_base_code" : {
            "type" : "string",
            "description" : "The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric.\n* minLength: 1 character\n* maxLength: 15 characters\n* Must not be all spaces\n* Must not be all zeros."
          },
          "airline.leg.flight_number" : {
            "type" : "string",
            "description" : "The flight identifier.\n* minLength: 1 character\n* maxLength: 5 characters\n* Must not be all spaces\n* Must not be all zeros."
          },
          "airline.leg.stop_over_code" : {
            "type" : "string",
            "description" : "A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not.\n* Encoding: ASCII\n* minLength: 1 character\n* maxLength: 1 character"
          },
          "airline.passenger.date_of_birth" : {
            "type" : "string",
            "description" : "The passenger's date of birth.\n\nDate format: `yyyy-MM-dd`\n* minLength: 10\n* maxLength: 10"
          },
          "airline.passenger.first_name" : {
            "type" : "string",
            "description" : "The passenger's first name.\n> This field is required if the airline data includes passenger details or leg details.\n* Encoding: ASCII"
          },
          "airline.passenger.last_name" : {
            "type" : "string",
            "description" : "The passenger's last name.\n> This field is required if the airline data includes passenger details or leg details.\n* Encoding: ASCII"
          },
          "airline.passenger.phone_number" : {
            "type" : "string",
            "description" : "The passenger's phone number, including country code. This is an alphanumeric field that can include the '+' and '-' signs.\n* Encoding: ASCII\n* minLength: 3 characters\n* maxLength: 30 characters"
          },
          "airline.passenger.traveller_type" : {
            "type" : "string",
            "description" : "The IATA passenger type code (PTC).\n* Encoding: ASCII\n* minLength: 3 characters\n* maxLength: 6 characters"
          },
          "airline.passenger_name" : {
            "type" : "string",
            "description" : "The passenger's name, initials, and title.\n* Format: last name + first name or initials + title\n* Example: *FLYER / MARY MS*\n* minLength: 1 character\n* maxLength: 20 characters\n* If you send more than 20 characters, the name is truncated\n* Must not be all spaces \n* Must not be all zeros."
          },
          "airline.ticket_issue_address" : {
            "type" : "string",
            "description" : "The address of the organization that issued the ticket.\n* minLength: 0 characters\n* maxLength: 16 characters"
          },
          "airline.ticket_number" : {
            "type" : "string",
            "description" : "The ticket's unique identifier.\n* minLength: 1 character\n* maxLength: 15 characters\n* Must not be all spaces\n* Must not be all zeros."
          },
          "airline.travel_agency_code" : {
            "type" : "string",
            "description" : "The unique identifier from IATA or ARC for the travel agency that issues the ticket.\n* Encoding: ASCII\n* minLength: 1 character\n* maxLength: 8 characters\n* Must not be all spaces\n* Must not be all zeros."
          },
          "airline.travel_agency_name" : {
            "type" : "string",
            "description" : "The name of the travel agency.\n\n* Encoding: ASCII\n* minLength: 1 character\n* maxLength: 25 characters\n* Must not be all spaces\n* Must not be all zeros."
          }
        },
        "required" : [ "airline.passenger_name" ]
      },
      "AdditionalDataCarRental" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "carRental.checkOutDate" : {
            "type" : "string",
            "description" : "The pick-up date.\n* Date format: `yyyyMMdd`"
          },
          "carRental.customerServiceTollFreeNumber" : {
            "type" : "string",
            "description" : "The customer service phone number of the car rental company.\n* Format: Alphanumeric\n* maxLength: 17\n* For US and CA numbers must be 10 characters in length\n* Must not start with a space\n* Must not contain any special characters such as + or -\n*Must not be all zeros."
          },
          "carRental.daysRented" : {
            "type" : "string",
            "description" : "Number of days for which the car is being rented.\n* Format: Numeric\n* maxLength: 4\n* Must not be all spaces"
          },
          "carRental.fuelCharges" : {
            "type" : "string",
            "description" : "Any fuel charges associated with the rental, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* Format: Numeric\n* maxLength: 12"
          },
          "carRental.insuranceCharges" : {
            "type" : "string",
            "description" : "Any insurance charges associated with the rental, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* Format: Numeric\n* maxLength: 12\n* Must not be all spaces\n*Must not be all zeros."
          },
          "carRental.locationCity" : {
            "type" : "string",
            "description" : "The city where the car is rented.\n* Format: Alphanumeric\n* maxLength: 18\n* Must not start with a space or be all spaces\n*Must not be all zeros."
          },
          "carRental.locationCountry" : {
            "type" : "string",
            "description" : "The country where the car is rented, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n* Format: Alphanumeric\n* maxLength: 2"
          },
          "carRental.locationStateProvince" : {
            "type" : "string",
            "description" : "The state or province where the car is rented.\n* Format: Alphanumeric\n* maxLength: 2\n* Must not start with a space or be all spaces\n*Must not be all zeros."
          },
          "carRental.noShowIndicator" : {
            "type" : "string",
            "description" : "Indicates if the customer didn't pick up their rental car.\n* Y - Customer did not pick up their car\n* N - Not applicable"
          },
          "carRental.oneWayDropOffCharges" : {
            "type" : "string",
            "description" : "The charge for not returning a car to the original rental location, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* maxLength: 12"
          },
          "carRental.rate" : {
            "type" : "string",
            "description" : "The daily rental rate, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* Format: Alphanumeric\n* maxLength: 12"
          },
          "carRental.rateIndicator" : {
            "type" : "string",
            "description" : "Specifies whether the given rate is applied daily or weekly.\n* D - Daily rate\n* W - Weekly rate"
          },
          "carRental.rentalAgreementNumber" : {
            "type" : "string",
            "description" : "The rental agreement number for the car rental.\n* Format: Alphanumeric\n* maxLength: 9\n* Must not start with a space or be all spaces\n*Must not be all zeros."
          },
          "carRental.rentalClassId" : {
            "type" : "string",
            "description" : "The classification of the rental car.\n* Format: Alphanumeric\n* maxLength: 4\n* Must not start with a space or be all spaces\n*Must not be all zeros."
          },
          "carRental.renterName" : {
            "type" : "string",
            "description" : "The name of the person renting the car.\n* Format: Alphanumeric\n* maxLength: 26\n* If you send more than 26 characters, the name is truncated\n* Must not start with a space or be all spaces\n*Must not be all zeros."
          },
          "carRental.returnCity" : {
            "type" : "string",
            "description" : "The city where the car must be returned.\n* Format: Alphanumeric\n* maxLength: 18\n* Must not start with a space or be all spaces\n*Must not be all zeros."
          },
          "carRental.returnCountry" : {
            "type" : "string",
            "description" : "The country where the car must be returned, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n* Format: Alphanumeric\n* maxLength: 2"
          },
          "carRental.returnDate" : {
            "type" : "string",
            "description" : "The last date to return the car by.\n* Date format: `yyyyMMdd`\n* maxLength: 8"
          },
          "carRental.returnLocationId" : {
            "type" : "string",
            "description" : "The agency code, phone number, or address abbreviation\n* Format: Alphanumeric\n* maxLength: 10\n* Must not start with a space or be all spaces\n*Must not be all zeros."
          },
          "carRental.returnStateProvince" : {
            "type" : "string",
            "description" : "The state or province where the car must be returned.\n* Format: Alphanumeric\n* maxLength: 3\n* Must not start with a space or be all spaces\n*Must not be all zeros."
          },
          "carRental.taxExemptIndicator" : {
            "type" : "string",
            "description" : "Indicates if the goods or services were tax-exempt, or if tax was not paid on them.\n\nValues:\n* Y - Goods or services were tax exempt\n* N - Tax was not collected"
          },
          "travelEntertainmentAuthData.duration" : {
            "type" : "string",
            "description" : "Number of days the car is rented for. This should be included in the auth message.\n* Format: Numeric\n* maxLength: 4"
          },
          "travelEntertainmentAuthData.market" : {
            "type" : "string",
            "description" : "Indicates what market-specific dataset will be submitted or is being submitted. Value should be 'A' for car rental. This should be included in the auth message.\n* Format: Alphanumeric\n* maxLength: 1"
          }
        }
      },
      "AdditionalDataCommon" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "RequestedTestAcquirerResponseCode" : {
            "type" : "string",
            "description" : "Triggers test scenarios that allow to replicate certain acquirer response codes. See [Testing result codes and refusal reasons](https://docs.adyen.com/development-resources/testing/result-codes/) to learn about the possible values, and the `refusalReason` values you can trigger. "
          },
          "RequestedTestErrorResponseCode" : {
            "type" : "string",
            "description" : "Triggers test scenarios that allow to replicate certain communication errors.\n\nAllowed values:\n* **NO_CONNECTION_AVAILABLE** – There wasn't a connection available to service the outgoing communication.\nThis is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request.\n* **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response.\nThis is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response."
          },
          "allowPartialAuth" : {
            "type" : "string",
            "description" : "Set to true to authorise a part of the requested amount in case the cardholder does not have enough funds on their account. \nIf a payment was partially authorised, the response includes resultCode: PartiallyAuthorised and the authorised amount in additionalData.authorisedAmountValue.\nTo enable this functionality, contact our Support Team."
          },
          "authorisationType" : {
            "type" : "string",
            "description" : "Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/online-payments/adjust-authorisation#authorisation-types).\n\nAllowed values:\n* **PreAuth** – flags the payment request to be handled as a pre-authorisation.\n* **FinalAuth** – flags the payment request to be handled as a final authorisation."
          },
          "autoRescue" : {
            "type" : "string",
            "description" : "Set to **true** to enable [Auto Rescue](https://docs.adyen.com/online-payments/auto-rescue/) for a transaction. Use the `maxDaysToRescue` to specify a rescue window."
          },
          "customRoutingFlag" : {
            "type" : "string",
            "description" : "Allows you to determine or override the acquirer account that should be used for the transaction.\n\nIf you need to process a payment with an acquirer different from a default one, you can set up a corresponding configuration on the Adyen payments platform. Then you can pass a custom routing flag in a payment request's additional data to target a specific acquirer.\n\nTo enable this functionality, contact [Support](https://www.adyen.help/hc/en-us/requests/new)."
          },
          "industryUsage" : {
            "type" : "string",
            "description" : "In case of [asynchronous authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#adjust-authorisation), this field denotes why the additional payment is made.\n\nPossible values:\n\n * **NoShow**: An incremental charge is carried out because of a no-show for a guaranteed reservation.\n\n * **DelayedCharge**: An incremental charge is carried out to process an additional payment after the original services have been rendered and the respective payment has been processed.",
            "enum" : [ "NoShow", "DelayedCharge" ]
          },
          "manualCapture" : {
            "type" : "string",
            "description" : "Set to **true** to require [manual capture](https://docs.adyen.com/online-payments/capture) for the transaction."
          },
          "maxDaysToRescue" : {
            "type" : "string",
            "description" : "The rescue window for a transaction, in days, when `autoRescue` is set to **true**. You can specify a value between 1 and 48.\n\n* For [cards](https://docs.adyen.com/online-payments/auto-rescue/cards/), the default is one calendar month.\n * For [SEPA](https://docs.adyen.com/online-payments/auto-rescue/sepa/), the default is 42 days."
          },
          "networkTxReference" : {
            "type" : "string",
            "description" : "Allows you to link the transaction to the original or previous one in a subscription/card-on-file chain. This field is required for token-based transactions where Adyen does not tokenize the card.\n\nTransaction identifier from card schemes, for example, Mastercard Trace ID or the Visa Transaction ID.\n\nSubmit the original transaction ID of the contract in your payment request if you are not tokenizing card details with Adyen and are making a merchant-initiated transaction (MIT) for subsequent charges.\n\nMake sure you are sending `shopperInteraction` **ContAuth** and `recurringProcessingModel` **Subscription** or **UnscheduledCardOnFile** to ensure that the transaction is classified as MIT."
          },
          "overwriteBrand" : {
            "type" : "string",
            "description" : "Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the `selectedBrand` value to specify how to process the transaction."
          },
          "subMerchantCity" : {
            "type" : "string",
            "description" : "This field is required if the transaction is performed by a registered payment facilitator. This field must contain the city of the actual merchant's address.\n* Format: alpha-numeric.\n* Maximum length: 13 characters."
          },
          "subMerchantCountry" : {
            "type" : "string",
            "description" : "This field is required if the transaction is performed by a registered payment facilitator. This field must contain the three-letter country code of the actual merchant's address.\n* Format: alpha-numeric.\n* Fixed length: 3 characters."
          },
          "subMerchantEmail" : {
            "type" : "string",
            "description" : "This field is required for transactions performed by registered payment facilitators. This field contains the email address of the sub-merchant.\n* Format: Alphanumeric\n* Maximum length: 40 characters"
          },
          "subMerchantID" : {
            "type" : "string",
            "description" : "This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID.\n\nA unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator.\n* Format: alpha-numeric.\n* Fixed length: 15 characters."
          },
          "subMerchantName" : {
            "type" : "string",
            "description" : "This field is required if the transaction is performed by a registered payment facilitator. This field must contain the name of the actual merchant.\n* Format: alpha-numeric.\n* Maximum length: 22 characters."
          },
          "subMerchantPhoneNumber" : {
            "type" : "string",
            "description" : "This field is required for transactions performed by registered payment facilitators. This field contains the phone number of the sub-merchant.* Format: Alphanumeric\n* Maximum length: 20 characters"
          },
          "subMerchantPostalCode" : {
            "type" : "string",
            "description" : "This field is required if the transaction is performed by a registered payment facilitator. This field must contain the postal code of the actual merchant's address.\n* Format: alpha-numeric.\n* Maximum length: 10 characters."
          },
          "subMerchantState" : {
            "type" : "string",
            "description" : "This field is required if the transaction is performed by a registered payment facilitator, and if applicable to the country. This field must contain the state code of the actual merchant's address.\n* Format: alpha-numeric.\n* Maximum length: 3 characters."
          },
          "subMerchantStreet" : {
            "type" : "string",
            "description" : "This field is required if the transaction is performed by a registered payment facilitator. This field must contain the street of the actual merchant's address.\n* Format: alpha-numeric.\n* Maximum length: 60 characters."
          },
          "subMerchantTaxId" : {
            "type" : "string",
            "description" : "This field is required if the transaction is performed by a registered payment facilitator. This field must contain the tax ID of the actual merchant.\n* Format: alpha-numeric.\n* Fixed length: 11 or 14 characters."
          }
        }
      },
      "AdditionalDataLevel23" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "enhancedSchemeData.customerReference" : {
            "type" : "string",
            "description" : "The reference number to identify the customer and their order. \n* Encoding: ASCII\n* Max length: 25 characters\n* Must not start with a space or be all spaces.\n* Must not be all zeros."
          },
          "enhancedSchemeData.destinationCountryCode" : {
            "type" : "string",
            "description" : "The three-letter [ISO 3166-1 alpha-3 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) for the destination address.\n* Encoding: ASCII\n* Fixed length: 3 characters"
          },
          "enhancedSchemeData.destinationPostalCode" : {
            "type" : "string",
            "description" : "The postal code of the destination address.\n* Encoding: ASCII\n* Max length: 10 characters\n* Must not start with a space.\n* For the US, it must be in five or nine digits format. For example, 10001 or 10001-0000.\n* For Canada, it must be in 6 digits format. For example, M4B 1G5."
          },
          "enhancedSchemeData.destinationStateProvinceCode" : {
            "type" : "string",
            "description" : "The state or province code of the destination address.\n* Encoding: ASCII\n* Max length: 3 characters\n* Must not start with a space."
          },
          "enhancedSchemeData.dutyAmount" : {
            "type" : "string",
            "description" : "The duty tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* For example, 2000 means USD 20.00.\n* Encoding: Numeric\n* Max length: 12 characters"
          },
          "enhancedSchemeData.freightAmount" : {
            "type" : "string",
            "description" : "The shipping amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* For example, 2000 means USD 20.00.\n* Encoding: Numeric\n* Max length: 12 characters"
          },
          "enhancedSchemeData.itemDetailLine[itemNr].commodityCode" : {
            "type" : "string",
            "description" : "The code that identifies the item in a standardized commodity coding scheme. There are different commodity coding schemes:\n* [UNSPSC commodity codes](https://www.unspsc.org/)\n* [HS commodity codes](https://www.wcoomd.org/en/topics/nomenclature/overview.aspx)\n* [NAICS commodity codes](https://www.census.gov/naics/)\n* [NAPCS commodity codes](https://www.census.gov/naics/napcs/)\n\n\n* Encoding: ASCII\n* Max length: 12 characters\n* Must not start with a space or be all spaces.\n* Must not be all zeros."
          },
          "enhancedSchemeData.itemDetailLine[itemNr].description" : {
            "type" : "string",
            "description" : "A description of the item, that provides details about the purchase.\n\n For Visa transactions with level 3 ESD, the description must not be the same or very similar to your merchant name, or, consist only of common words like \"product\", or \"service\".\n* Encoding: ASCII\n* Max length: 26 characters\n* Must not be a single character.\n* Must not be blank.\n* Must not be all special characters.\n* Must not be blank.\n* Must not start with a space or be all spaces.\n* Must not be all zeros."
          },
          "enhancedSchemeData.itemDetailLine[itemNr].discountAmount" : {
            "type" : "string",
            "description" : "The discount amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* For example, 2000 means USD 20.00.\n* Encoding: Numeric\n* Max length: 12 characters"
          },
          "enhancedSchemeData.itemDetailLine[itemNr].productCode" : {
            "type" : "string",
            "description" : "The product code. Must be a unique product code associated with the item or service. This can be your unique code for the item, or the manufacturer's product code. \n* Encoding: ASCII.\n* Max length: 12 characters\n* Must not start with a space or be all spaces.\n* Must not be all zeros."
          },
          "enhancedSchemeData.itemDetailLine[itemNr].quantity" : {
            "type" : "string",
            "description" : "The number of items. Must be an integer greater than zero.\n* Encoding: Numeric\n* Max length: 12 characters\n* Must not start with a space or be all spaces."
          },
          "enhancedSchemeData.itemDetailLine[itemNr].totalAmount" : {
            "type" : "string",
            "description" : "The total amount for the line item, in [minor units](https://docs.adyen.com/development-resources/currency-codes). See [Amount requirements for level 2/3 ESD](https://docs.adyen.com//payment-methods/cards/enhanced-scheme-data/l2-l3#amount-requirements) to learn more about how to calculate the line item total.\n* For example, 2000 means USD 20.00.\n* Max length: 12 characters\n* Must not start with a space or be all spaces.\n* Must not be all zeros."
          },
          "enhancedSchemeData.itemDetailLine[itemNr].unitOfMeasure" : {
            "type" : "string",
            "description" : "The unit of measurement for an item.\n* Encoding: ASCII\n* Max length: 3 characters\n* Must not start with a space or be all spaces.\n* Must not be all zeros."
          },
          "enhancedSchemeData.itemDetailLine[itemNr].unitPrice" : {
            "type" : "string",
            "description" : "The unit price in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* For example, 2000 means USD 20.00.\n* Encoding: Numeric\n* Max length: 12 characters\n* Must not be all zeros."
          },
          "enhancedSchemeData.orderDate" : {
            "type" : "string",
            "description" : "The order date.\n* Format: `ddMMyy`\n* Encoding: ASCII\n* Max length: 6 characters"
          },
          "enhancedSchemeData.shipFromPostalCode" : {
            "type" : "string",
            "description" : "The postal code of the address where the item is shipped from.\n* Encoding: ASCII\n* Max length: 10 characters\n* Must not start with a space or be all spaces.\n* Must not be all zeros.For the US, it must be in five or nine digits format. For example, 10001 or 10001-0000.\n* For Canada, it must be in 6 digits format. For example, M4B 1G5."
          },
          "enhancedSchemeData.totalTaxAmount" : {
            "type" : "string",
            "description" : "The amount of state or provincial [tax included in the total transaction amount](https://docs.adyen.com/payment-methods/cards/enhanced-scheme-data/l2-l3#requirements-to-send-level-2-3-esd), in [minor units](https://docs.adyen.com/development-resources/currency-codes). \n* For example, 2000 means USD 20.00.\n* Encoding: Numeric \n* Max length: 12 characters\n* Must not be all zeros."
          }
        }
      },
      "AdditionalDataLodging" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "lodging.SpecialProgramCode" : {
            "type" : "string",
            "description" : "A code that corresponds to the category of lodging charges for the payment. Possible values:\n* 1: Lodging\n* 2: No show reservation\n* 3: Advanced deposit"
          },
          "lodging.checkInDate" : {
            "type" : "string",
            "description" : "The arrival date.\n* Date format: **yyyyMmDd**. For example, for 2023 April 22, **20230422**."
          },
          "lodging.checkOutDate" : {
            "type" : "string",
            "description" : "The departure date.\n* Date format: **yyyyMmDd**. For example, for 2023 April 22, **20230422**."
          },
          "lodging.customerServiceTollFreeNumber" : {
            "type" : "string",
            "description" : "The toll-free phone number for the lodging.\n* Format: numeric\n* Max length: 17 characters.\n* For US and CA numbers must be 10 characters in length\n* Must not start with a space\n* Must not contain any special characters such as + or -\n* Must not be all zeros."
          },
          "lodging.fireSafetyActIndicator" : {
            "type" : "string",
            "description" : "Identifies that the facility complies with the Hotel and Motel Fire Safety Act of 1990. Must be 'Y' or 'N'.\n* Format: alphabetic\n* Max length: 1 character"
          },
          "lodging.folioCashAdvances" : {
            "type" : "string",
            "description" : "The folio cash advances, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* Format: numeric\n* Max length: 12 characters"
          },
          "lodging.folioNumber" : {
            "type" : "string",
            "description" : "The card acceptor’s internal invoice or billing ID reference number.\n* Max length: 25 characters\n* Must not start with a space\n* Must not contain any special characters\n* Must not be all zeros."
          },
          "lodging.foodBeverageCharges" : {
            "type" : "string",
            "description" : "Any charges for food and beverages associated with the booking, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* Format: numeric\n* Max length: 12 characters"
          },
          "lodging.noShowIndicator" : {
            "type" : "string",
            "description" : "Indicates if the customer didn't check in for their booking.\n Possible values: \n* **Y**: the customer didn't check in \n* **N**: the customer checked in"
          },
          "lodging.prepaidExpenses" : {
            "type" : "string",
            "description" : "The prepaid expenses for the booking.\n* Format: numeric\n* Max length: 12 characters"
          },
          "lodging.propertyPhoneNumber" : {
            "type" : "string",
            "description" : "The lodging property location's phone number.\n* Format: numeric\n* Min length: 10 characters\n* Max length: 17 characters\n* For US and CA numbers must be 10 characters in length\n* Must not start with a space\n* Must not contain any special characters such as + or -\n* Must not be all zeros."
          },
          "lodging.room1.numberOfNights" : {
            "type" : "string",
            "description" : "The total number of nights the room is booked for.\n* Format: numeric\n* Must be a number between 0 and 99\n* Max length: 4 characters"
          },
          "lodging.room1.rate" : {
            "type" : "string",
            "description" : "The rate for the room, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* Format: numeric\n* Max length: 12 characters\n* Must not be a negative number"
          },
          "lodging.totalRoomTax" : {
            "type" : "string",
            "description" : "The total room tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* Format: numeric\n* Max length: 12 characters\n* Must not be a negative number"
          },
          "lodging.totalTax" : {
            "type" : "string",
            "description" : "The total tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* Format: numeric\n* Max length: 12 characters\n* Must not be a negative number"
          },
          "travelEntertainmentAuthData.duration" : {
            "type" : "string",
            "description" : "The number of nights. This should be included in the auth message.\n* Format: numeric\n* Max length: 4 characters"
          },
          "travelEntertainmentAuthData.market" : {
            "type" : "string",
            "description" : "Indicates what market-specific dataset will be submitted. Must be 'H' for Hotel. This should be included in the auth message.\n\n* Format: alphanumeric\n* Max length: 1 character"
          }
        }
      },
      "AdditionalDataOpenInvoice" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "openinvoicedata.merchantData" : {
            "type" : "string",
            "description" : "Holds different merchant data points like product, purchase, customer, and so on. It takes data in a Base64 encoded string.\n\nThe `merchantData` parameter needs to be added to the `openinvoicedata` signature at the end.\n\nSince the field is optional, if it's not included it does not impact computing the merchant signature.\n\nApplies only to Klarna.\n\nYou can contact Klarna for the format and structure of the string."
          },
          "openinvoicedata.numberOfLines" : {
            "type" : "string",
            "description" : "The number of invoice lines included in `openinvoicedata`.\n\nThere needs to be at least one line, so `numberOfLines` needs to be at least 1."
          },
          "openinvoicedata.recipientFirstName" : {
            "type" : "string",
            "description" : "First name of the recipient. If the delivery address and the billing address are different, specify the `recipientFirstName` and `recipientLastName` to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna."
          },
          "openinvoicedata.recipientLastName" : {
            "type" : "string",
            "description" : "Last name of the recipient. If the delivery address and the billing address are different, specify the `recipientFirstName` and `recipientLastName` to share the delivery address with Klarna. Otherwise, only the billing address is shared with Klarna."
          },
          "openinvoicedataLine[itemNr].currencyCode" : {
            "type" : "string",
            "description" : "The three-character ISO currency code."
          },
          "openinvoicedataLine[itemNr].description" : {
            "type" : "string",
            "description" : "A text description of the product the invoice line refers to."
          },
          "openinvoicedataLine[itemNr].itemAmount" : {
            "type" : "string",
            "description" : "The price for one item in the invoice line, represented in minor units.\n\nThe due amount for the item, VAT excluded."
          },
          "openinvoicedataLine[itemNr].itemId" : {
            "type" : "string",
            "description" : "A unique id for this item. Required for RatePay if the description of each item is not unique."
          },
          "openinvoicedataLine[itemNr].itemVatAmount" : {
            "type" : "string",
            "description" : "The VAT due for one item in the invoice line, represented in minor units."
          },
          "openinvoicedataLine[itemNr].itemVatPercentage" : {
            "type" : "string",
            "description" : "The VAT percentage for one item in the invoice line, represented in minor units.\n\nFor example, 19% VAT is specified as 1900."
          },
          "openinvoicedataLine[itemNr].numberOfItems" : {
            "type" : "string",
            "description" : "The number of units purchased of a specific product."
          },
          "openinvoicedataLine[itemNr].returnShippingCompany" : {
            "type" : "string",
            "description" : "Name of the shipping company handling the the return shipment."
          },
          "openinvoicedataLine[itemNr].returnTrackingNumber" : {
            "type" : "string",
            "description" : "The tracking number for the return of the shipment."
          },
          "openinvoicedataLine[itemNr].returnTrackingUri" : {
            "type" : "string",
            "description" : "URI where the customer can track the return of their shipment."
          },
          "openinvoicedataLine[itemNr].shippingCompany" : {
            "type" : "string",
            "description" : "Name of the shipping company handling the delivery."
          },
          "openinvoicedataLine[itemNr].shippingMethod" : {
            "type" : "string",
            "description" : "Shipping method."
          },
          "openinvoicedataLine[itemNr].trackingNumber" : {
            "type" : "string",
            "description" : "The tracking number for the shipment."
          },
          "openinvoicedataLine[itemNr].trackingUri" : {
            "type" : "string",
            "description" : "URI where the customer can track their shipment."
          }
        }
      },
      "AdditionalDataOpi" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "opi.includeTransToken" : {
            "type" : "string",
            "description" : "Optional boolean indicator. Set to **true** if you want an ecommerce transaction to return an `opi.transToken` as additional data in the response.\n\nYou can store this Oracle Payment Interface token in your Oracle Opera database. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce)."
          }
        }
      },
      "AdditionalDataRatepay" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "ratepay.installmentAmount" : {
            "type" : "string",
            "description" : "Amount the customer has to pay each month."
          },
          "ratepay.interestRate" : {
            "type" : "string",
            "description" : "Interest rate of this installment."
          },
          "ratepay.lastInstallmentAmount" : {
            "type" : "string",
            "description" : "Amount of the last installment."
          },
          "ratepay.paymentFirstday" : {
            "type" : "string",
            "description" : "Calendar day of the first payment."
          },
          "ratepaydata.deliveryDate" : {
            "type" : "string",
            "description" : "Date the merchant delivered the goods to the customer."
          },
          "ratepaydata.dueDate" : {
            "type" : "string",
            "description" : "Date by which the customer must settle the payment."
          },
          "ratepaydata.invoiceDate" : {
            "type" : "string",
            "description" : "Invoice date, defined by the merchant. If not included, the invoice date is set to the delivery date."
          },
          "ratepaydata.invoiceId" : {
            "type" : "string",
            "description" : "Identification name or number for the invoice, defined by the merchant."
          }
        }
      },
      "AdditionalDataRetry" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "retry.chainAttemptNumber" : {
            "type" : "string",
            "description" : "The number of times the transaction (not order) has been retried between different payment service providers. For instance, the `chainAttemptNumber` set to 2 means that this transaction has been recently tried on another provider before being sent to Adyen.\n\n> If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together."
          },
          "retry.orderAttemptNumber" : {
            "type" : "string",
            "description" : "The index of the attempt to bill a particular order, which is identified by the `merchantOrderReference` field. For example, if a recurring transaction fails and is retried one day later, then the order number for these attempts would be 1 and 2, respectively.\n\n> If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together."
          },
          "retry.skipRetry" : {
            "type" : "string",
            "description" : "The Boolean value indicating whether Adyen should skip or retry this transaction, if possible.\n\n> If you submit `retry.chainAttemptNumber`, `retry.orderAttemptNumber`, and `retry.skipRetry` values, we also recommend you provide the `merchantOrderReference` to facilitate linking payment attempts together."
          }
        }
      },
      "AdditionalDataRisk" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "riskdata.[customFieldName]" : {
            "type" : "string",
            "description" : "The data for your custom risk field. For more information, refer to [Create custom risk fields](https://docs.adyen.com/risk-management/configure-custom-risk-rules#step-1-create-custom-risk-fields)."
          },
          "riskdata.basket.item[itemNr].amountPerItem" : {
            "type" : "string",
            "description" : "The price of item in the basket, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes)."
          },
          "riskdata.basket.item[itemNr].brand" : {
            "type" : "string",
            "description" : "Brand of the item."
          },
          "riskdata.basket.item[itemNr].category" : {
            "type" : "string",
            "description" : "Category of the item."
          },
          "riskdata.basket.item[itemNr].color" : {
            "type" : "string",
            "description" : "Color of the item."
          },
          "riskdata.basket.item[itemNr].currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217)."
          },
          "riskdata.basket.item[itemNr].itemID" : {
            "type" : "string",
            "description" : "ID of the item."
          },
          "riskdata.basket.item[itemNr].manufacturer" : {
            "type" : "string",
            "description" : "Manufacturer of the item."
          },
          "riskdata.basket.item[itemNr].productTitle" : {
            "type" : "string",
            "description" : "A text description of the product the invoice line refers to."
          },
          "riskdata.basket.item[itemNr].quantity" : {
            "type" : "string",
            "description" : "Quantity of the item purchased."
          },
          "riskdata.basket.item[itemNr].receiverEmail" : {
            "type" : "string",
            "description" : "Email associated with the given product in the basket (usually in electronic gift cards)."
          },
          "riskdata.basket.item[itemNr].size" : {
            "type" : "string",
            "description" : "Size of the item."
          },
          "riskdata.basket.item[itemNr].sku" : {
            "type" : "string",
            "description" : "[Stock keeping unit](https://en.wikipedia.org/wiki/Stock_keeping_unit)."
          },
          "riskdata.basket.item[itemNr].upc" : {
            "type" : "string",
            "description" : "[Universal Product Code](https://en.wikipedia.org/wiki/Universal_Product_Code)."
          },
          "riskdata.promotions.promotion[itemNr].promotionCode" : {
            "type" : "string",
            "description" : "Code of the promotion."
          },
          "riskdata.promotions.promotion[itemNr].promotionDiscountAmount" : {
            "type" : "string",
            "description" : "The discount amount of the promotion, represented in [minor units](https://docs.adyen.com/development-resources/currency-codes)."
          },
          "riskdata.promotions.promotion[itemNr].promotionDiscountCurrency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217)."
          },
          "riskdata.promotions.promotion[itemNr].promotionDiscountPercentage" : {
            "type" : "string",
            "description" : "Promotion's percentage discount. It is represented in percentage value and there is no need to include the '%' sign.\n\ne.g. for a promotion discount of 30%, the value of the field should be 30."
          },
          "riskdata.promotions.promotion[itemNr].promotionName" : {
            "type" : "string",
            "description" : "Name of the promotion."
          },
          "riskdata.riskProfileReference" : {
            "type" : "string",
            "description" : "Reference number of the risk profile that you want to apply to the payment. If not provided or left blank, the merchant-level account's default risk profile will be applied to the payment. For more information, see [dynamically assign a risk profile to a payment](https://docs.adyen.com/risk-management/create-and-use-risk-profiles#dynamically-assign-a-risk-profile-to-a-payment)."
          },
          "riskdata.skipRisk" : {
            "type" : "string",
            "description" : "If this parameter is provided with the value **true**, risk checks for the payment request are skipped and the transaction will not get a risk score."
          }
        }
      },
      "AdditionalDataRiskStandalone" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "PayPal.CountryCode" : {
            "type" : "string",
            "description" : "Shopper's country of residence in the form of ISO standard 3166 2-character country codes."
          },
          "PayPal.EmailId" : {
            "type" : "string",
            "description" : "Shopper's email."
          },
          "PayPal.FirstName" : {
            "type" : "string",
            "description" : "Shopper's first name."
          },
          "PayPal.LastName" : {
            "type" : "string",
            "description" : "Shopper's last name."
          },
          "PayPal.PayerId" : {
            "type" : "string",
            "description" : "Unique PayPal Customer Account identification number. Character length and limitations: 13 single-byte alphanumeric characters."
          },
          "PayPal.Phone" : {
            "type" : "string",
            "description" : "Shopper's phone number."
          },
          "PayPal.ProtectionEligibility" : {
            "type" : "string",
            "description" : "Allowed values:\n* **Eligible** — Merchant is protected by PayPal's Seller Protection Policy for Unauthorized Payments and Item Not Received.\n\n* **PartiallyEligible** — Merchant is protected by PayPal's Seller Protection Policy for Item Not Received.\n\n* **Ineligible** — Merchant is not protected under the Seller Protection Policy."
          },
          "PayPal.TransactionId" : {
            "type" : "string",
            "description" : "Unique transaction ID of the payment."
          },
          "avsResultRaw" : {
            "type" : "string",
            "description" : "Raw AVS result received from the acquirer, where available. Example: D"
          },
          "bin" : {
            "type" : "string",
            "description" : "The Bank Identification Number of a credit card, which is the first six digits of a card number. Required for [tokenized card request](https://docs.adyen.com/online-payments/tokenization)."
          },
          "cvcResultRaw" : {
            "type" : "string",
            "description" : "Raw CVC result received from the acquirer, where available. Example: 1"
          },
          "riskToken" : {
            "type" : "string",
            "description" : "Unique identifier or token for the shopper's card details."
          },
          "threeDAuthenticated" : {
            "type" : "string",
            "description" : "A Boolean value indicating whether 3DS authentication was completed on this payment. Example: true"
          },
          "threeDOffered" : {
            "type" : "string",
            "description" : "A Boolean value indicating whether 3DS was offered for this payment. Example: true"
          },
          "tokenDataType" : {
            "type" : "string",
            "description" : "Required for PayPal payments only. The only supported value is: **paypal**."
          }
        }
      },
      "AdditionalDataSubMerchant" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "subMerchant.numberOfSubSellers" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. Indicates the number of sub-merchants contained in the request. For example, **3**."
          },
          "subMerchant.subSeller[subSellerNr].city" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The city of the sub-merchant's address.\n* Format: Alphanumeric\n* Maximum length: 13 characters"
          },
          "subMerchant.subSeller[subSellerNr].country" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The three-letter country code of the sub-merchant's address. For example, **BRA** for Brazil. \n* Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)\n* Fixed length: 3 characters"
          },
          "subMerchant.subSeller[subSellerNr].email" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The email address of the sub-merchant.\n* Format: Alphanumeric\n* Maximum length: 40 characters"
          },
          "subMerchant.subSeller[subSellerNr].id" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant. \n* Format: Alphanumeric\n* Maximum length: 15 characters"
          },
          "subMerchant.subSeller[subSellerNr].mcc" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The sub-merchant's 4-digit Merchant Category Code (MCC). \n* Format: Numeric\n* Fixed length: 4 digits"
          },
          "subMerchant.subSeller[subSellerNr].name" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement.\nException: for acquirers in Brazil, this value does not overwrite the shopper statement.\n* Format: Alphanumeric\n* Maximum length: 22 characters"
          },
          "subMerchant.subSeller[subSellerNr].phoneNumber" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The phone number of the sub-merchant.* Format: Alphanumeric\n* Maximum length: 20 characters"
          },
          "subMerchant.subSeller[subSellerNr].postalCode" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant's address, without dashes.\n* Format: Numeric\n* Fixed length: 8 digits"
          },
          "subMerchant.subSeller[subSellerNr].state" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The state code of the sub-merchant's address, if applicable to the country.\n* Format: Alphanumeric\n* Maximum length: 2 characters"
          },
          "subMerchant.subSeller[subSellerNr].street" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The street name and house number of the sub-merchant's address.\n* Format: Alphanumeric\n* Maximum length: 60 characters"
          },
          "subMerchant.subSeller[subSellerNr].taxId" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant.\n* Format: Numeric\n* Fixed length: 11 digits for the CPF or 14 digits for the CNPJ"
          }
        }
      },
      "AdditionalDataTemporaryServices" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "enhancedSchemeData.customerReference" : {
            "type" : "string",
            "description" : "The customer code, if supplied by a customer.\n* Encoding: ASCII\n* maxLength: 25"
          },
          "enhancedSchemeData.employeeName" : {
            "type" : "string",
            "description" : "The name or ID of the person working in a temporary capacity.\n* maxLength: 40.  \n* Must not be all spaces. \n*Must not be all zeros."
          },
          "enhancedSchemeData.jobDescription" : {
            "type" : "string",
            "description" : "The job description of the person working in a temporary capacity.\n* maxLength: 40 \n* Must not be all spaces. \n*Must not be all zeros."
          },
          "enhancedSchemeData.regularHoursRate" : {
            "type" : "string",
            "description" : "The amount paid for regular hours worked, [minor units](https://docs.adyen.com/development-resources/currency-codes).\n* maxLength: 7\n* Must not be empty\n* Can be all zeros"
          },
          "enhancedSchemeData.regularHoursWorked" : {
            "type" : "string",
            "description" : "The hours worked.\n* maxLength: 7\n* Must not be empty\n* Can be all zeros"
          },
          "enhancedSchemeData.requestName" : {
            "type" : "string",
            "description" : "The name of the person requesting temporary services.\n* maxLength: 40\n* Must not be all zeros\n* Must not be all spaces"
          },
          "enhancedSchemeData.tempStartDate" : {
            "type" : "string",
            "description" : "The billing period start date.\n* Format: ddMMyy\n* maxLength: 6"
          },
          "enhancedSchemeData.tempWeekEnding" : {
            "type" : "string",
            "description" : "The billing period end date.\n* Format: ddMMyy\n* maxLength: 6"
          },
          "enhancedSchemeData.totalTaxAmount" : {
            "type" : "string",
            "description" : "The total tax amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes). For example, 2000 means USD 20.00\n* maxLength: 12"
          }
        }
      },
      "AdditionalDataWallets" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "androidpay.token" : {
            "type" : "string",
            "description" : "The Android Pay token retrieved from the SDK."
          },
          "masterpass.transactionId" : {
            "type" : "string",
            "description" : "The Mastercard Masterpass Transaction ID retrieved from the SDK."
          },
          "payment.token" : {
            "type" : "string",
            "description" : "The Apple Pay token retrieved from the SDK."
          },
          "paywithgoogle.token" : {
            "type" : "string",
            "description" : "The Google Pay token retrieved from the SDK."
          },
          "samsungpay.token" : {
            "type" : "string",
            "description" : "The Samsung Pay token retrieved from the SDK."
          },
          "visacheckout.callId" : {
            "type" : "string",
            "description" : "The Visa Checkout Call ID retrieved from the SDK."
          }
        }
      },
      "Address" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "city" : {
            "type" : "string",
            "description" : "The name of the city. Maximum length: 3000 characters.",
            "maxLength" : 3000
          },
          "country" : {
            "type" : "string",
            "description" : "The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n> If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`."
          },
          "houseNumberOrName" : {
            "type" : "string",
            "description" : "The number or name of the house. Maximum length: 3000 characters.",
            "maxLength" : 3000
          },
          "postalCode" : {
            "type" : "string",
            "description" : "A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries."
          },
          "stateOrProvince" : {
            "type" : "string",
            "description" : "The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada."
          },
          "street" : {
            "type" : "string",
            "description" : "The name of the street. Maximum length: 3000 characters.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.",
            "maxLength" : 3000
          }
        },
        "required" : [ "city", "country", "houseNumberOrName", "postalCode", "street" ]
      },
      "AffirmDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "type" : {
            "type" : "string",
            "default" : "affirm",
            "description" : "**affirm**",
            "enum" : [ "affirm" ]
          }
        },
        "title" : "Affirm"
      },
      "AfterpayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "billingAddress" : {
            "type" : "string",
            "description" : "The address where to send the invoice."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "deliveryAddress" : {
            "type" : "string",
            "description" : "The address where the goods should be delivered."
          },
          "personalDetails" : {
            "type" : "string",
            "description" : "Shopper name, date of birth, phone number, and email address."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "afterpay_default",
            "description" : "**afterpay_default**",
            "enum" : [ "afterpay_default", "afterpaytouch", "afterpay_b2b", "clearpay" ]
          }
        },
        "required" : [ "type" ],
        "title" : "Afterpay"
      },
      "AmazonPayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amazonPayToken" : {
            "type" : "string",
            "description" : "This is the `amazonPayToken` that you obtained from the [Get Checkout Session](https://amazon-pay-acquirer-guide.s3-eu-west-1.amazonaws.com/v1/amazon-pay-api-v2/checkout-session.html#get-checkout-session) response. This token is used for API only integration specifically."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "checkoutSessionId" : {
            "type" : "string",
            "description" : "The `checkoutSessionId` is used to identify the checkout session at the Amazon Pay side. This field is required only for drop-in and components integration, where it replaces the amazonPayToken."
          },
          "type" : {
            "type" : "string",
            "default" : "amazonpay",
            "description" : "**amazonpay**",
            "enum" : [ "amazonpay" ]
          }
        },
        "title" : "Amazon Pay"
      },
      "Amount" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes#currency-codes).",
            "maxLength" : 3,
            "minLength" : 3
          },
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes#minor-units)."
          }
        },
        "required" : [ "currency", "value" ]
      },
      "Amounts" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes/)."
          },
          "values" : {
            "type" : "array",
            "description" : "The amounts of the donation (in [minor units](https://docs.adyen.com/development-resources/currency-codes/)).",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "currency", "values" ]
      },
      "AncvDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "beneficiaryId" : {
            "type" : "string",
            "description" : "ANCV account identification (email or account number)"
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "description" : "**ancv**",
            "enum" : [ "ancv" ]
          }
        },
        "title" : "ANCV"
      },
      "AndroidPayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "type" : {
            "type" : "string",
            "default" : "androidpay",
            "description" : "**androidpay**",
            "enum" : [ "androidpay" ]
          }
        },
        "title" : "Android Pay"
      },
      "ApplePayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "applePayToken" : {
            "type" : "string",
            "description" : "The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.",
            "maxLength" : 10000
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "applepay",
            "description" : "**applepay**",
            "enum" : [ "applepay" ]
          }
        },
        "required" : [ "applePayToken" ],
        "title" : "Apple Pay"
      },
      "ApplePayDonations" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "applePayToken" : {
            "type" : "string",
            "description" : "The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.",
            "maxLength" : 10000
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "applepay",
            "description" : "**applepay**",
            "enum" : [ "applepay" ]
          }
        },
        "required" : [ "applePayToken" ],
        "title" : "Apple Pay"
      },
      "ApplePaySessionRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "displayName" : {
            "type" : "string",
            "description" : "This is the name that your shoppers will see in the Apple Pay interface.\n\nThe value returned as `configuration.merchantName` field from the [`/paymentMethods`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.",
            "maxLength" : 64
          },
          "domainName" : {
            "type" : "string",
            "description" : "The domain name you provided when you added Apple Pay in your Customer Area.\n\nThis must match the `window.location.hostname` of the web shop."
          },
          "merchantIdentifier" : {
            "type" : "string",
            "description" : "Your merchant identifier registered with Apple Pay.\n\nUse the value of the `configuration.merchantId` field from the [`/paymentMethods`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response."
          }
        },
        "required" : [ "displayName", "domainName", "merchantIdentifier" ]
      },
      "ApplePaySessionResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "data" : {
            "type" : "string",
            "description" : "Base64 encoded data you need to [complete the Apple Pay merchant validation](https://docs.adyen.com/payment-methods/apple-pay/api-only?tab=adyen-certificate-validation_1#complete-apple-pay-session-validation)."
          }
        },
        "required" : [ "data" ]
      },
      "ApplicationInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "adyenLibrary" : {
            "$ref" : "#/components/schemas/CommonField",
            "description" : "Adyen-developed software, such as libraries and plugins, used to interact with the Adyen API. For example, Magento plugin, Java API library, etc."
          },
          "adyenPaymentSource" : {
            "$ref" : "#/components/schemas/CommonField",
            "description" : "Adyen-developed software to get payment details. For example, Checkout SDK, Secured Fields SDK, etc."
          },
          "externalPlatform" : {
            "$ref" : "#/components/schemas/ExternalPlatform",
            "description" : "Third-party developed platform used to initiate payment requests. For example, Magento, Zuora, etc."
          },
          "merchantApplication" : {
            "$ref" : "#/components/schemas/CommonField",
            "description" : "Merchant developed software, such as cashier application, used to interact with the Adyen API."
          },
          "merchantDevice" : {
            "$ref" : "#/components/schemas/MerchantDevice",
            "description" : "Merchant device information."
          },
          "shopperInteractionDevice" : {
            "$ref" : "#/components/schemas/ShopperInteractionDevice",
            "description" : "Shopper interaction device, such as terminal, mobile device or web browser, to initiate payment requests."
          }
        }
      },
      "BacsDirectDebitDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "bankAccountNumber" : {
            "type" : "string",
            "description" : "The bank account number (without separators).",
            "x-addedInVersion" : "65"
          },
          "bankLocationId" : {
            "type" : "string",
            "description" : "The bank routing number of the account.",
            "x-addedInVersion" : "65"
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "holderName" : {
            "type" : "string",
            "description" : "The name of the bank account holder.",
            "x-addedInVersion" : "65"
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "transferInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of your user's verified transfer instrument, which you can use to top up their balance accounts."
          },
          "type" : {
            "type" : "string",
            "default" : "directdebit_GB",
            "description" : "**directdebit_GB**",
            "enum" : [ "directdebit_GB" ]
          }
        },
        "title" : "BACS Direct Debit"
      },
      "BalanceCheckRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountInfo" : {
            "$ref" : "#/components/schemas/AccountInfo",
            "description" : "Shopper account information for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.",
            "x-addedInVersion" : "40"
          },
          "additionalAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. "
          },
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/AdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataAirline"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCarRental"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLevel23"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLodging"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpenInvoice"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRatepay"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRetry"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRisk"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRiskStandalone"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataSubMerchant"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataTemporaryServices"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataWallets"
            } ]
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero)."
          },
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).",
            "x-addedInVersion" : "40"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/Address",
            "description" : "The address where to send the invoice.\n> The `billingAddress` object is required in the following scenarios. Include all of the fields within this object.\n>* For 3D Secure 2 transactions in all browser-based and mobile implementations.\n>* For cross-border payouts to and from Canada.",
            "x-addedInVersion" : "4"
          },
          "browserInfo" : {
            "$ref" : "#/components/schemas/BrowserInfo",
            "description" : "The shopper's browser information.\n> For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 2 redirect."
          },
          "captureDelayHours" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The delay between the authorisation and scheduled auto-capture, specified in hours.",
            "x-addedInVersion" : "2"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD",
            "x-addedInVersion" : "7"
          },
          "dccQuote" : {
            "$ref" : "#/components/schemas/ForexQuote",
            "description" : "The forex quote as returned in the response of the forex service."
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/Address",
            "description" : "The address where the purchased goods should be delivered."
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the purchased goods should be delivered.\n\nFormat [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\nExample: 2017-07-17T13:42:40.428+01:00",
            "x-addedInVersion" : "8"
          },
          "deviceFingerprint" : {
            "type" : "string",
            "description" : "A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).",
            "maxLength" : 5000,
            "x-addedInVersion" : "2"
          },
          "fraudOffset" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "An integer value that is added to the normal fraud score. The value can be either positive or negative."
          },
          "installments" : {
            "$ref" : "#/components/schemas/Installments",
            "description" : "Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).",
            "x-addedInVersion" : "4"
          },
          "localizedShopperStatement" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The `localizedShopperStatement` field lets you use dynamic values for your shopper statement in a local character set.\nIf not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.\n\nAdyen currently supports the ja-Kana and ja-Hani character set for Visa, Mastercard and JCB payments in Japan using Japanese cards. This character set supports:\n\n* UTF-8 based Katakana, Kanji, capital letters, numbers and special characters. \n* Half-width or full-width characters.",
            "x-addedInVersion" : "68"
          },
          "mcc" : {
            "type" : "string",
            "description" : "The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.",
            "x-addedInVersion" : "12"
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the transaction."
          },
          "merchantOrderReference" : {
            "type" : "string",
            "description" : "This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.",
            "x-addedInVersion" : "9"
          },
          "merchantRiskIndicator" : {
            "$ref" : "#/components/schemas/MerchantRiskIndicator",
            "description" : "Additional risk fields for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.",
            "x-addedInVersion" : "40"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\".\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. ",
            "x-addedInVersion" : "17"
          },
          "orderReference" : {
            "type" : "string",
            "description" : "When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead."
          },
          "paymentMethod" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The collection that contains the type of the payment method and its specific information."
          },
          "recurring" : {
            "$ref" : "#/components/schemas/Recurring",
            "description" : "The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/classic-integration/recurring-payments)."
          },
          "recurringProcessingModel" : {
            "type" : "string",
            "description" : "Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
            "enum" : [ "CardOnFile", "Subscription", "UnscheduledCardOnFile" ],
            "x-addedInVersion" : "30"
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens (\"-\").\nMaximum length: 80 characters."
          },
          "selectedBrand" : {
            "type" : "string",
            "description" : "Some payment methods require defining a value for this field to specify how to process the transaction.\n\nFor the Bancontact payment method, it can be set to:\n* `maestro` (default), to be processed like a Maestro card, or\n* `bcmc`, to be processed like a Bancontact card."
          },
          "selectedRecurringDetailReference" : {
            "type" : "string",
            "description" : "The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail."
          },
          "sessionId" : {
            "type" : "string",
            "description" : "A session ID used to identify a payment session."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > Required for Visa and JCB transactions that require 3D Secure 2 authentication if you did not include the `telephoneNumber`."
          },
          "shopperIP" : {
            "type" : "string",
            "description" : "The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication for all web and mobile integrations, if you did not include the `shopperEmail`. For native mobile integrations, the field is required to support cases where authentication is routed to the redirect flow. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new)."
          },
          "shopperInteraction" : {
            "type" : "string",
            "description" : "Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.",
            "enum" : [ "Ecommerce", "ContAuth", "Moto", "POS" ]
          },
          "shopperLocale" : {
            "type" : "string",
            "description" : "The combination of a language code and a country code to specify the language to be used in the payment.",
            "x-addedInVersion" : "7"
          },
          "shopperName" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "The shopper's full name.",
            "x-addedInVersion" : "7"
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters.\n> Your reference must not include personally identifiable information (PII) such as name or email address."
          },
          "shopperStatement" : {
            "type" : "string",
            "description" : "The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**."
          },
          "socialSecurityNumber" : {
            "type" : "string",
            "description" : "The shopper's social security number.",
            "x-addedInVersion" : "4"
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how the payment should be split when using either Adyen for Platforms for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/split-payments), or standalone [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            },
            "x-addedInVersion" : "37"
          },
          "store" : {
            "type" : "string",
            "description" : "Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.",
            "maxLength" : 16,
            "minLength" : 1,
            "x-addedInVersion" : "23"
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The shopper's telephone number.\n The phone number must include a plus sign (+) and a country code (1-3 digits), followed by the number (4-15 digits). If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`.",
            "x-addedInVersion" : "7"
          },
          "threeDS2RequestData" : {
            "$ref" : "#/components/schemas/ThreeDS2RequestData",
            "description" : "Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.",
            "x-addedInVersion" : "40"
          },
          "threeDSAuthenticationOnly" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Required to trigger the [authentication-only flow](https://docs.adyen.com/online-payments/3d-secure/authentication-only/). If set to **true**, you will only perform the 3D Secure 2 authentication, and will not proceed to the payment authorization.Default: **false**.",
            "x-addedInVersion" : "50"
          },
          "totalsGroup" : {
            "type" : "string",
            "description" : "The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).",
            "maxLength" : 16,
            "minLength" : 1,
            "x-addedInVersion" : "23"
          },
          "trustedShopper" : {
            "type" : "boolean",
            "description" : "Set to true if the payment should be routed to a trusted MID.",
            "x-addedInVersion" : "37"
          }
        },
        "required" : [ "amount", "merchantAccount", "paymentMethod" ]
      },
      "BalanceCheckResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/ResponseAdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataBillingAddress"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataCard"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataDomesticError"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataInstallments"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataNetworkTokens"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataSepa"
            } ]
          },
          "balance" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The balance for the payment method."
          },
          "fraudResult" : {
            "$ref" : "#/components/schemas/FraudResult",
            "description" : "The fraud result properties of the payment."
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request."
          },
          "refusalReason" : {
            "type" : "string",
            "description" : "If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n\nFor more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons)."
          },
          "resultCode" : {
            "type" : "string",
            "description" : "The result of the cancellation request.\n\nPossible values:\n\n* **Success** – Indicates that the balance check was successful.\n* **NotEnoughBalance** – Commonly indicates that the card did not have enough balance to pay the amount in the request, or that the currency of the balance on the card did not match the currency of the requested amount.\n* **Failed** – Indicates that the balance check failed.",
            "enum" : [ "Success", "NotEnoughBalance", "Failed" ]
          },
          "transactionLimit" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The maximum spendable balance for a single transaction. Applicable to some gift cards.",
            "x-addedInVersion" : "65"
          }
        },
        "required" : [ "balance", "resultCode" ]
      },
      "BillDeskDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "issuer" : {
            "type" : "string",
            "description" : "The issuer id of the shopper's selected bank."
          },
          "type" : {
            "type" : "string",
            "description" : "**billdesk**",
            "enum" : [ "billdesk_online", "billdesk_wallet" ]
          }
        },
        "required" : [ "issuer", "type" ],
        "title" : "BillDesk"
      },
      "BillingAddress" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "city" : {
            "type" : "string",
            "description" : "The name of the city. Maximum length: 3000 characters.",
            "maxLength" : 3000
          },
          "country" : {
            "type" : "string",
            "description" : "The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n> If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`."
          },
          "houseNumberOrName" : {
            "type" : "string",
            "description" : "The number or name of the house. Maximum length: 3000 characters.",
            "maxLength" : 3000
          },
          "postalCode" : {
            "type" : "string",
            "description" : "A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries."
          },
          "stateOrProvince" : {
            "type" : "string",
            "description" : "The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.",
            "maxLength" : 1000
          },
          "street" : {
            "type" : "string",
            "description" : "The name of the street. Maximum length: 3000 characters.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.",
            "maxLength" : 3000
          }
        },
        "required" : [ "city", "country", "houseNumberOrName", "postalCode", "street" ]
      },
      "BlikDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "blikCode" : {
            "type" : "string",
            "description" : "BLIK code consisting of 6 digits."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "description" : "**blik**",
            "enum" : [ "blik" ]
          }
        },
        "title" : "BLIK"
      },
      "BrowserInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "acceptHeader" : {
            "type" : "string",
            "description" : "The accept header value of the shopper's browser."
          },
          "colorDepth" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The color depth of the shopper's browser in bits per pixel. This should be obtained by using the browser's `screen.colorDepth` property. Accepted values: 1, 4, 8, 15, 16, 24, 30, 32 or 48 bit color depth.",
            "x-addedInVersion" : "40"
          },
          "javaEnabled" : {
            "type" : "boolean",
            "description" : "Boolean value indicating if the shopper's browser is able to execute Java.",
            "x-addedInVersion" : "40"
          },
          "javaScriptEnabled" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Boolean value indicating if the shopper's browser is able to execute JavaScript. A default 'true' value is assumed if the field is not present.",
            "x-addedInVersion" : "40"
          },
          "language" : {
            "type" : "string",
            "description" : "The `navigator.language` value of the shopper's browser (as defined in IETF BCP 47).",
            "x-addedInVersion" : "40"
          },
          "screenHeight" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total height of the shopper's device screen in pixels.",
            "x-addedInVersion" : "40"
          },
          "screenWidth" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total width of the shopper's device screen in pixels.",
            "x-addedInVersion" : "40"
          },
          "timeZoneOffset" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Time difference between UTC time and the shopper's browser local time, in minutes.",
            "x-addedInVersion" : "40"
          },
          "userAgent" : {
            "type" : "string",
            "description" : "The user agent value of the shopper's browser."
          }
        },
        "required" : [ "acceptHeader", "colorDepth", "javaEnabled", "language", "screenHeight", "screenWidth", "timeZoneOffset", "userAgent" ]
      },
      "CancelOrderRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier that orderData belongs to."
          },
          "order" : {
            "$ref" : "#/components/schemas/EncryptedOrderData",
            "description" : "The order request object that contains a pspReference that represents the order and the matching encrypted order data."
          }
        },
        "required" : [ "merchantAccount", "order" ]
      },
      "CancelOrderResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "pspReference" : {
            "type" : "string",
            "description" : "A unique reference of the cancellation request."
          },
          "resultCode" : {
            "type" : "string",
            "description" : "The result of the cancellation request.\n\nPossible values:\n\n* **Received** – Indicates the cancellation has successfully been received by Adyen, and will be processed.",
            "enum" : [ "Received" ]
          }
        },
        "required" : [ "pspReference", "resultCode" ]
      },
      "CardBrandDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "supported" : {
            "type" : "boolean",
            "description" : "Indicates if you support the card brand."
          },
          "type" : {
            "type" : "string",
            "description" : "The name of the card brand."
          }
        }
      },
      "CardDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "brand" : {
            "type" : "string",
            "description" : "Secondary brand of the card. For example: **plastix**, **hmclub**."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "cupsecureplus.smscode" : {
            "type" : "string",
            "deprecated" : true
          },
          "cvc" : {
            "type" : "string",
            "description" : "The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "encryptedCard" : {
            "type" : "string",
            "description" : "Only include this for JSON Web Encryption (JWE) implementations. The JWE-encrypted card details.",
            "maxLength" : 40000
          },
          "encryptedCardNumber" : {
            "type" : "string",
            "description" : "The encrypted card number.",
            "maxLength" : 15000
          },
          "encryptedExpiryMonth" : {
            "type" : "string",
            "description" : "The encrypted card expiry month.",
            "maxLength" : 15000
          },
          "encryptedExpiryYear" : {
            "type" : "string",
            "description" : "The encrypted card expiry year.",
            "maxLength" : 15000
          },
          "encryptedSecurityCode" : {
            "type" : "string",
            "description" : "The encrypted card verification code.",
            "maxLength" : 15000
          },
          "expiryMonth" : {
            "type" : "string",
            "description" : "The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "expiryYear" : {
            "type" : "string",
            "description" : "The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "fastlaneData" : {
            "type" : "string",
            "description" : "The encoded fastlane data blob"
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "holderName" : {
            "type" : "string",
            "description" : "The name of the card holder.",
            "maxLength" : 15000
          },
          "networkPaymentReference" : {
            "type" : "string",
            "description" : "The transaction identifier from card schemes. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment."
          },
          "number" : {
            "type" : "string",
            "description" : "The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "shopperNotificationReference" : {
            "type" : "string",
            "description" : "The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India."
          },
          "srcCorrelationId" : {
            "type" : "string",
            "description" : "An identifier used for the Click to Pay transaction."
          },
          "srcDigitalCardId" : {
            "type" : "string",
            "description" : "The SRC reference for the Click to Pay token."
          },
          "srcScheme" : {
            "type" : "string",
            "description" : "The scheme that is being used for Click to Pay."
          },
          "srcTokenReference" : {
            "type" : "string",
            "description" : "The reference for the Click to Pay token."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "threeDS2SdkVersion" : {
            "type" : "string",
            "description" : "Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.",
            "maxLength" : 12
          },
          "type" : {
            "type" : "string",
            "default" : "scheme",
            "description" : "Default payment method details. Common for scheme payment methods, and for simple payment method details.",
            "enum" : [ "bcmc", "scheme", "networkToken", "giftcard", "card", "clicktopay" ]
          }
        },
        "title" : "Card"
      },
      "CardDetailsRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "cardNumber" : {
            "type" : "string",
            "description" : "A minimum of the first eight digits of the card number. The full card number gives the best result. \n\nYou must be [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide) to collect raw card data. Alternatively, you can use the `encryptedCardNumber` field."
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The shopper country.\n\nFormat: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\nExample: NL or DE"
          },
          "encryptedCardNumber" : {
            "type" : "string",
            "description" : "The encrypted card number.",
            "maxLength" : 15000
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the transaction."
          },
          "supportedBrands" : {
            "type" : "array",
            "description" : "The card brands you support. This is the [`brands`](https://docs.adyen.com/api-explorer/Checkout/latest/post/paymentMethods#responses-200-paymentMethods-brands) array from your [`/paymentMethods`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response. \n\nIf not included, our API uses the ones configured for your merchant account and, if provided, the country code.",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "cardNumber", "merchantAccount" ]
      },
      "CardDetailsResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "brands" : {
            "type" : "array",
            "description" : "The list of brands identified for the card.",
            "items" : {
              "$ref" : "#/components/schemas/CardBrandDetails"
            }
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source of the card, for example **DEBIT**, **CREDIT**, or **PREPAID**."
          },
          "isCardCommercial" : {
            "type" : "boolean",
            "description" : "Indicates if this is a commercial card or a consumer card. If **true**, it is a commercial card. If **false**, it is a consumer card."
          },
          "issuingCountryCode" : {
            "type" : "string",
            "description" : "The two-letter country code  of the country where the card was issued."
          }
        }
      },
      "CardDonations" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "brand" : {
            "type" : "string",
            "description" : "Secondary brand of the card. For example: **plastix**, **hmclub**."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "cupsecureplus.smscode" : {
            "type" : "string",
            "deprecated" : true
          },
          "cvc" : {
            "type" : "string",
            "description" : "The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "encryptedCard" : {
            "type" : "string",
            "description" : "Only include this for JSON Web Encryption (JWE) implementations. The JWE-encrypted card details.",
            "maxLength" : 40000
          },
          "encryptedCardNumber" : {
            "type" : "string",
            "description" : "The encrypted card number.",
            "maxLength" : 15000
          },
          "encryptedExpiryMonth" : {
            "type" : "string",
            "description" : "The encrypted card expiry month.",
            "maxLength" : 15000
          },
          "encryptedExpiryYear" : {
            "type" : "string",
            "description" : "The encrypted card expiry year.",
            "maxLength" : 15000
          },
          "encryptedSecurityCode" : {
            "type" : "string",
            "description" : "The encrypted card verification code.",
            "maxLength" : 15000
          },
          "expiryMonth" : {
            "type" : "string",
            "description" : "The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "expiryYear" : {
            "type" : "string",
            "description" : "The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "fastlaneData" : {
            "type" : "string",
            "description" : "The encoded fastlane data blob"
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "holderName" : {
            "type" : "string",
            "description" : "The name of the card holder.",
            "maxLength" : 15000
          },
          "networkPaymentReference" : {
            "type" : "string",
            "description" : "The transaction identifier from card schemes. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment."
          },
          "number" : {
            "type" : "string",
            "description" : "The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "shopperNotificationReference" : {
            "type" : "string",
            "description" : "The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India."
          },
          "srcCorrelationId" : {
            "type" : "string",
            "description" : "An identifier used for the Click to Pay transaction."
          },
          "srcDigitalCardId" : {
            "type" : "string",
            "description" : "The SRC reference for the Click to Pay token."
          },
          "srcScheme" : {
            "type" : "string",
            "description" : "The scheme that is being used for Click to Pay."
          },
          "srcTokenReference" : {
            "type" : "string",
            "description" : "The reference for the Click to Pay token."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "threeDS2SdkVersion" : {
            "type" : "string",
            "description" : "Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.",
            "maxLength" : 12
          },
          "type" : {
            "type" : "string",
            "default" : "scheme",
            "description" : "Default payment method details. Common for scheme payment methods, and for simple payment method details.",
            "enum" : [ "bcmc", "scheme", "networkToken", "giftcard", "card", "clicktopay" ]
          }
        },
        "title" : "Card"
      },
      "CashAppDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "cashtag" : {
            "type" : "string",
            "description" : "Cash App issued cashtag for recurring payment"
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "customerId" : {
            "type" : "string",
            "description" : "Cash App issued customerId for recurring payment"
          },
          "grantId" : {
            "type" : "string",
            "description" : "Cash App issued grantId for one time payment"
          },
          "onFileGrantId" : {
            "type" : "string",
            "description" : "Cash App issued onFileGrantId for recurring payment"
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "requestId" : {
            "type" : "string",
            "description" : "Cash App request id"
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "subtype" : {
            "type" : "string",
            "description" : "The payment method subtype."
          },
          "type" : {
            "type" : "string",
            "default" : "cashapp",
            "description" : "cashapp",
            "enum" : [ "cashapp" ]
          }
        },
        "title" : "Stored Payment Method"
      },
      "CellulantDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "issuer" : {
            "type" : "string",
            "description" : "The Cellulant issuer."
          },
          "type" : {
            "type" : "string",
            "default" : "cellulant",
            "description" : "**Cellulant**",
            "enum" : [ "cellulant" ]
          }
        },
        "title" : "Cellulant"
      },
      "CheckoutAwaitAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "paymentData" : {
            "type" : "string",
            "description" : "Encoded payment data."
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "Specifies the payment method."
          },
          "type" : {
            "type" : "string",
            "description" : "**await**",
            "enum" : [ "await" ]
          },
          "url" : {
            "type" : "string",
            "description" : "Specifies the URL to redirect to."
          }
        },
        "required" : [ "type" ]
      },
      "CheckoutBankAccount" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountType" : {
            "type" : "string",
            "description" : "The type of the bank account.",
            "enum" : [ "balance", "checking", "deposit", "general", "other", "payment", "savings" ]
          },
          "bankAccountNumber" : {
            "type" : "string",
            "description" : "The bank account number (without separators)."
          },
          "bankCity" : {
            "type" : "string",
            "description" : "The bank city."
          },
          "bankLocationId" : {
            "type" : "string",
            "description" : "The location id of the bank. The field value is `nil` in most cases."
          },
          "bankName" : {
            "type" : "string",
            "description" : "The name of the bank."
          },
          "bic" : {
            "type" : "string",
            "description" : "The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases."
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code where the bank is located.\n\nA valid value is an ISO two-character country code (e.g. 'NL')."
          },
          "iban" : {
            "type" : "string",
            "description" : "The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN)."
          },
          "ownerName" : {
            "type" : "string",
            "description" : "The name of the bank account holder.\nIf you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:\n* χ12 is converted to ch12.\n* üA is converted to euA.\n* Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\nAfter replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:\n* John17 - allowed.\n* J17 - allowed.\n* 171 - not allowed.\n* John-7 - allowed.\n> If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'."
          },
          "taxId" : {
            "type" : "string",
            "description" : "The bank account holder's tax ID."
          }
        }
      },
      "CheckoutBankTransferAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The account number of the bank transfer."
          },
          "beneficiary" : {
            "type" : "string",
            "description" : "The name of the account holder."
          },
          "bic" : {
            "type" : "string",
            "description" : "The BIC of the IBAN."
          },
          "downloadUrl" : {
            "type" : "string",
            "description" : "The url to download payment details with."
          },
          "iban" : {
            "type" : "string",
            "description" : "The IBAN of the bank transfer."
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "Specifies the payment method."
          },
          "reference" : {
            "type" : "string",
            "description" : "The transfer reference."
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "The routing number of the bank transfer."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The e-mail of the shopper, included if an e-mail was sent to the shopper."
          },
          "sortCode" : {
            "type" : "string",
            "description" : "The sort code of the bank transfer."
          },
          "totalAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount of the bank transfer."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the action.",
            "enum" : [ "bankTransfer" ]
          },
          "url" : {
            "type" : "string",
            "description" : "Specifies the URL to redirect to."
          }
        },
        "required" : [ "type" ]
      },
      "CheckoutNativeRedirectAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "data" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "When the redirect URL must be accessed via POST, use this data to post to the redirect URL."
          },
          "method" : {
            "type" : "string",
            "description" : "Specifies the HTTP method, for example GET or POST."
          },
          "nativeRedirectData" : {
            "type" : "string",
            "description" : "Native SDK's redirect data containing the direct issuer link and state data that must be submitted to the /v1/nativeRedirect/redirectResult."
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "Specifies the payment method."
          },
          "type" : {
            "type" : "string",
            "description" : "**nativeRedirect**",
            "enum" : [ "nativeRedirect" ]
          },
          "url" : {
            "type" : "string",
            "description" : "Specifies the URL to redirect to."
          }
        },
        "required" : [ "type" ]
      },
      "CheckoutOrderResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The initial amount of the order."
          },
          "expiresAt" : {
            "type" : "string",
            "description" : "The expiry date for the order."
          },
          "orderData" : {
            "type" : "string",
            "description" : "The encrypted order data."
          },
          "pspReference" : {
            "type" : "string",
            "description" : "The `pspReference` that belongs to the order."
          },
          "reference" : {
            "type" : "string",
            "description" : "The merchant reference for the order."
          },
          "remainingAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The updated remaining amount."
          }
        },
        "required" : [ "pspReference" ]
      },
      "CheckoutQrCodeAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "expiresAt" : {
            "type" : "string",
            "description" : "Expiry time of the QR code."
          },
          "paymentData" : {
            "type" : "string",
            "description" : "Encoded payment data."
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "Specifies the payment method."
          },
          "qrCodeData" : {
            "type" : "string",
            "description" : "The contents of the QR code as a UTF8 string."
          },
          "type" : {
            "type" : "string",
            "description" : "**qrCode**",
            "enum" : [ "qrCode" ]
          },
          "url" : {
            "type" : "string",
            "description" : "Specifies the URL to redirect to."
          }
        },
        "required" : [ "type" ]
      },
      "CheckoutRedirectAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "data" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "When the redirect URL must be accessed via POST, use this data to post to the redirect URL."
          },
          "method" : {
            "type" : "string",
            "description" : "Specifies the HTTP method, for example GET or POST."
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "Specifies the payment method."
          },
          "type" : {
            "type" : "string",
            "description" : "**redirect**",
            "enum" : [ "redirect" ]
          },
          "url" : {
            "type" : "string",
            "description" : "Specifies the URL to redirect to."
          }
        },
        "required" : [ "type" ]
      },
      "CheckoutSDKAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "paymentData" : {
            "type" : "string",
            "description" : "Encoded payment data."
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "Specifies the payment method."
          },
          "sdkData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The data to pass to the SDK."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the action.",
            "enum" : [ "sdk", "wechatpaySDK" ]
          },
          "url" : {
            "type" : "string",
            "description" : "Specifies the URL to redirect to."
          }
        },
        "required" : [ "type" ]
      },
      "CheckoutSessionInstallmentOption" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "plans" : {
            "type" : "array",
            "description" : "Defines the type of installment plan. If not set, defaults to **regular**.\n\nPossible values:\n* **regular**\n* **revolving*** **bonus**\n* **with_interest**\n* **buynow_paylater**\n* **nointerest_bonus**\n* **interest_bonus**\n* **refund_prctg**\n* **nointeres_refund_prctg**\n* **interes_refund_prctg**",
            "items" : {
              "type" : "string",
              "enum" : [ "bonus", "buynow_paylater", "interes_refund_prctg", "interest_bonus", "nointeres_refund_prctg", "nointerest_bonus", "refund_prctg", "regular", "revolving", "with_interest" ]
            }
          },
          "preselectedValue" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Preselected number of installments offered for this payment method."
          },
          "values" : {
            "type" : "array",
            "description" : "An array of the number of installments that the shopper can choose from. For example, **[2,3,5]**. This cannot be specified simultaneously with `maxValue`.",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        }
      },
      "CheckoutSessionThreeDS2RequestData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "homePhone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The home phone number provided by the cardholder. The phone number must consist of a country code, followed by the number. If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`, and did not send the shopper's phone number in `telephoneNumber`."
          },
          "mobilePhone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The mobile phone number provided by the cardholder. The phone number must consist of a country code, followed by the number. If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`, and did not send the shopper's phone number in `telephoneNumber`."
          },
          "threeDSRequestorChallengeInd" : {
            "type" : "string",
            "description" : "Indicates whether a challenge is requested for this transaction. Possible values:\n* **01** — No preference\n* **02** — No challenge requested\n* **03** — Challenge requested (3DS Requestor preference)\n* **04** — Challenge requested (Mandate)\n* **05** — No challenge (transactional risk analysis is already performed)\n* **06** — Data Only",
            "enum" : [ "01", "02", "03", "04", "05", "06" ]
          },
          "workPhone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The work phone number provided by the cardholder. The phone number must consist of a country code, followed by the number. If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`, and did not send the shopper's phone number in `telephoneNumber`."
          }
        }
      },
      "CheckoutThreeDS2Action" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "authorisationToken" : {
            "type" : "string",
            "description" : "A token needed to authorise a payment."
          },
          "paymentData" : {
            "type" : "string",
            "description" : "Encoded payment data."
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "Specifies the payment method."
          },
          "subtype" : {
            "type" : "string",
            "description" : "A subtype of the token."
          },
          "token" : {
            "type" : "string",
            "description" : "A token to pass to the 3DS2 Component to get the fingerprint."
          },
          "type" : {
            "type" : "string",
            "description" : "**threeDS2**",
            "enum" : [ "threeDS2" ]
          },
          "url" : {
            "type" : "string",
            "description" : "Specifies the URL to redirect to."
          }
        },
        "required" : [ "type" ]
      },
      "CheckoutVoucherAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "alternativeReference" : {
            "type" : "string",
            "description" : "The voucher alternative reference code."
          },
          "collectionInstitutionNumber" : {
            "type" : "string",
            "description" : "A collection institution number (store number) for Econtext Pay-Easy ATM."
          },
          "downloadUrl" : {
            "type" : "string",
            "description" : "The URL to download the voucher."
          },
          "entity" : {
            "type" : "string",
            "description" : "An entity number of Multibanco."
          },
          "expiresAt" : {
            "type" : "string",
            "description" : "The date time of the voucher expiry."
          },
          "initialAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The initial amount."
          },
          "instructionsUrl" : {
            "type" : "string",
            "description" : "The URL to the detailed instructions to make payment using the voucher."
          },
          "issuer" : {
            "type" : "string",
            "description" : "The issuer of the voucher."
          },
          "maskedTelephoneNumber" : {
            "type" : "string",
            "description" : "The shopper telephone number (partially masked)."
          },
          "merchantName" : {
            "type" : "string",
            "description" : "The merchant name."
          },
          "merchantReference" : {
            "type" : "string",
            "description" : "The merchant reference."
          },
          "passCreationToken" : {
            "type" : "string",
            "description" : "A Base64-encoded token containing all properties of the voucher. For iOS, you can use this to pass a voucher to Apple Wallet.",
            "x-addedInVersion" : "68"
          },
          "paymentData" : {
            "type" : "string",
            "description" : "Encoded payment data."
          },
          "paymentMethodType" : {
            "type" : "string",
            "description" : "Specifies the payment method."
          },
          "reference" : {
            "type" : "string",
            "description" : "The voucher reference code."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper email."
          },
          "shopperName" : {
            "type" : "string",
            "description" : "The shopper name."
          },
          "surcharge" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The surcharge amount."
          },
          "totalAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The total amount (initial plus surcharge amount)."
          },
          "type" : {
            "type" : "string",
            "description" : "**voucher**",
            "enum" : [ "voucher" ]
          },
          "url" : {
            "type" : "string",
            "description" : "Specifies the URL to redirect to."
          }
        },
        "required" : [ "type" ]
      },
      "CommonField" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the field. For example, Name of External Platform."
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the field. For example, Version of External Platform."
          }
        }
      },
      "Company" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "homepage" : {
            "type" : "string",
            "description" : "The company website's home page."
          },
          "name" : {
            "type" : "string",
            "description" : "The company name."
          },
          "registrationNumber" : {
            "type" : "string",
            "description" : "Registration number of the company."
          },
          "registryLocation" : {
            "type" : "string",
            "description" : "Registry location of the company."
          },
          "taxId" : {
            "type" : "string",
            "description" : "Tax ID of the company."
          },
          "type" : {
            "type" : "string",
            "description" : "The company type."
          }
        }
      },
      "CreateCheckoutSessionRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountInfo" : {
            "$ref" : "#/components/schemas/AccountInfo",
            "description" : "Shopper account information for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow."
          },
          "additionalAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. "
          },
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/AdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataAirline"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCarRental"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLevel23"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLodging"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpenInvoice"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRatepay"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRetry"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRisk"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRiskStandalone"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataSubMerchant"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataTemporaryServices"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataWallets"
            } ]
          },
          "allowedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"allowedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            }
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount of the payment."
          },
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions)."
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/BillingAddress",
            "description" : "The address where to send the invoice."
          },
          "blockedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"blockedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            }
          },
          "captureDelayHours" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The delay between the authorisation and scheduled auto-capture, specified in hours."
          },
          "channel" : {
            "type" : "string",
            "description" : "The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.\n\nPossible values:\n* **iOS**\n* **Android**\n* **Web**",
            "enum" : [ "iOS", "Android", "Web" ]
          },
          "company" : {
            "$ref" : "#/components/schemas/Company",
            "description" : "Information regarding the company."
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The shopper's two-letter country code."
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD"
          },
          "deliverAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time when the purchased goods should be delivered.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**."
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/DeliveryAddress",
            "description" : "The address where the purchased goods should be delivered."
          },
          "enableOneClick" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future [one-click payments](https://docs.adyen.com/get-started-with-adyen/payment-glossary/#one-click-payments-definition)."
          },
          "enablePayOut" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be tokenized for payouts."
          },
          "enableRecurring" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be stored for [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types) where the shopper is not present, such as subscription or automatic top-up payments."
          },
          "expiresAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation."
          },
          "fundOrigin" : {
            "$ref" : "#/components/schemas/FundOrigin",
            "description" : "The person or entity funding the money."
          },
          "fundRecipient" : {
            "$ref" : "#/components/schemas/FundRecipient",
            "description" : "the person or entity receiving the money"
          },
          "installmentOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CheckoutSessionInstallmentOption"
            },
            "description" : "A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options."
          },
          "lineItems" : {
            "type" : "array",
            "description" : "Price and product information about the purchased items, to be included on the invoice sent to the shopper.\n> This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip.",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            }
          },
          "mandate" : {
            "$ref" : "#/components/schemas/Mandate",
            "description" : "The mandate details to initiate recurring transaction."
          },
          "mcc" : {
            "type" : "string",
            "description" : "The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the transaction."
          },
          "merchantOrderReference" : {
            "type" : "string",
            "description" : "This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`."
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request.\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. "
          },
          "mpiData" : {
            "$ref" : "#/components/schemas/ThreeDSecureData",
            "description" : "Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires)."
          },
          "recurringExpiry" : {
            "type" : "string",
            "description" : "Date after which no further authorisations shall be performed. Only for 3D Secure 2."
          },
          "recurringFrequency" : {
            "type" : "string",
            "description" : "Minimum number of days between authorisations. Only for 3D Secure 2."
          },
          "recurringProcessingModel" : {
            "type" : "string",
            "description" : "Defines a recurring payment type. Required when creating a token to store payment details.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
            "enum" : [ "CardOnFile", "Subscription", "UnscheduledCardOnFile" ]
          },
          "redirectFromIssuerMethod" : {
            "type" : "string",
            "description" : "Specifies the redirect method (GET or POST) when redirecting back from the issuer."
          },
          "redirectToIssuerMethod" : {
            "type" : "string",
            "description" : "Specifies the redirect method (GET or POST) when redirecting to the issuer."
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference to uniquely identify a payment."
          },
          "returnUrl" : {
            "type" : "string",
            "description" : "The URL to return to in case of a redirection.\nThe format depends on the channel. \n* For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number.\nExample: `https://your-company.example.com/checkout?shopperOrder=12xy`\n* For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app).\nExample: `my-app://`\n* For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters).\nExample: `my-app://your.package.name`\n\nIf the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value.\n\nWe strongly recommend that you use a maximum of 1024 characters.\n\n> The URL must not include personally identifiable information (PII), for example name or email address.",
            "maxLength" : 8000
          },
          "riskData" : {
            "$ref" : "#/components/schemas/RiskData",
            "description" : "Any risk-related settings to apply to the payment."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email address."
          },
          "shopperIP" : {
            "type" : "string",
            "description" : "The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication for all web and mobile integrations, if you did not include the `shopperEmail`. For native mobile integrations, the field is required to support cases where authentication is routed to the redirect flow. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new)."
          },
          "shopperInteraction" : {
            "type" : "string",
            "description" : "Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.",
            "enum" : [ "Ecommerce", "ContAuth", "Moto", "POS" ]
          },
          "shopperLocale" : {
            "type" : "string",
            "description" : "The combination of a language code and a country code to specify the language to be used in the payment."
          },
          "shopperName" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program."
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters.\n> Your reference must not include personally identifiable information (PII) such as name or email address.",
            "maxLength" : 256,
            "minLength" : 3
          },
          "shopperStatement" : {
            "type" : "string",
            "description" : "The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**."
          },
          "showInstallmentAmount" : {
            "type" : "boolean",
            "description" : "Set to true to show the payment amount per installment."
          },
          "showRemovePaymentMethodButton" : {
            "type" : "boolean",
            "description" : "Set to **true** to show a button that lets the shopper remove a stored payment method."
          },
          "socialSecurityNumber" : {
            "type" : "string",
            "description" : "The shopper's social security number."
          },
          "splitCardFundingSources" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Boolean value indicating whether the card payment method should be split into separate debit and credit options."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            }
          },
          "store" : {
            "type" : "string",
            "description" : "Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment."
          },
          "storeFiltrationMode" : {
            "type" : "string",
            "description" : "Specifies how payment methods should be filtered based on the 'store' parameter:\n  - 'exclusive': Only payment methods belonging to the specified 'store' are returned.\n  - 'inclusive': Payment methods from the 'store' and those not associated with any other store are returned.",
            "enum" : [ "exclusive", "inclusive", "skipFilter" ]
          },
          "storePaymentMethod" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be stored for future [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types)."
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The shopper's telephone number.\n The phone number must include a plus sign (+) and a country code (1-3 digits), followed by the number (4-15 digits). If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`."
          },
          "threeDS2RequestData" : {
            "$ref" : "#/components/schemas/CheckoutSessionThreeDS2RequestData",
            "description" : "Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments)."
          },
          "threeDSAuthenticationOnly" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Required to trigger the [authentication-only flow](https://docs.adyen.com/online-payments/3d-secure/authentication-only/). If set to **true**, you will only perform the 3D Secure 2 authentication, and will not proceed to the payment authorization.Default: **false**."
          },
          "trustedShopper" : {
            "type" : "boolean",
            "description" : "Set to true if the payment should be routed to a trusted MID."
          }
        },
        "required" : [ "amount", "merchantAccount", "reference", "returnUrl" ]
      },
      "CreateCheckoutSessionResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountInfo" : {
            "$ref" : "#/components/schemas/AccountInfo",
            "description" : "Shopper account information for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow."
          },
          "additionalAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. "
          },
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/AdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataAirline"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCarRental"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLevel23"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLodging"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpenInvoice"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRatepay"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRetry"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRisk"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRiskStandalone"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataSubMerchant"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataTemporaryServices"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataWallets"
            } ]
          },
          "allowedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"allowedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            }
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount of the payment."
          },
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions)."
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/BillingAddress",
            "description" : "The address where to send the invoice."
          },
          "blockedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"blockedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            }
          },
          "captureDelayHours" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The delay between the authorisation and scheduled auto-capture, specified in hours."
          },
          "channel" : {
            "type" : "string",
            "description" : "The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.\n\nPossible values:\n* **iOS**\n* **Android**\n* **Web**",
            "enum" : [ "iOS", "Android", "Web" ]
          },
          "company" : {
            "$ref" : "#/components/schemas/Company",
            "description" : "Information regarding the company."
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The shopper's two-letter country code."
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The shopper's date of birth in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format."
          },
          "deliverAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time when the purchased goods should be delivered.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**."
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/DeliveryAddress",
            "description" : "The address where the purchased goods should be delivered."
          },
          "enableOneClick" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future [one-click payments](https://docs.adyen.com/get-started-with-adyen/payment-glossary/#one-click-payments-definition)."
          },
          "enablePayOut" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be tokenized for payouts."
          },
          "enableRecurring" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be stored for [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types) where the shopper is not present, such as subscription or automatic top-up payments."
          },
          "expiresAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation."
          },
          "fundOrigin" : {
            "$ref" : "#/components/schemas/FundOrigin",
            "description" : "The person or entity funding the money."
          },
          "fundRecipient" : {
            "$ref" : "#/components/schemas/FundRecipient",
            "description" : "the person or entity receiving the money"
          },
          "id" : {
            "type" : "string",
            "description" : "A unique identifier of the session.",
            "readOnly" : true
          },
          "installmentOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CheckoutSessionInstallmentOption"
            },
            "description" : "A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options."
          },
          "lineItems" : {
            "type" : "array",
            "description" : "Price and product information about the purchased items, to be included on the invoice sent to the shopper.\n> This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip.",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            }
          },
          "mandate" : {
            "$ref" : "#/components/schemas/Mandate",
            "description" : "The mandate details to initiate recurring transaction."
          },
          "mcc" : {
            "type" : "string",
            "description" : "The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the transaction."
          },
          "merchantOrderReference" : {
            "type" : "string",
            "description" : "This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`."
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request.\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. "
          },
          "mpiData" : {
            "$ref" : "#/components/schemas/ThreeDSecureData",
            "description" : "Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires)."
          },
          "recurringExpiry" : {
            "type" : "string",
            "description" : "Date after which no further authorisations shall be performed. Only for 3D Secure 2."
          },
          "recurringFrequency" : {
            "type" : "string",
            "description" : "Minimum number of days between authorisations. Only for 3D Secure 2."
          },
          "recurringProcessingModel" : {
            "type" : "string",
            "description" : "Defines a recurring payment type. Required when creating a token to store payment details.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
            "enum" : [ "CardOnFile", "Subscription", "UnscheduledCardOnFile" ]
          },
          "redirectFromIssuerMethod" : {
            "type" : "string",
            "description" : "Specifies the redirect method (GET or POST) when redirecting back from the issuer."
          },
          "redirectToIssuerMethod" : {
            "type" : "string",
            "description" : "Specifies the redirect method (GET or POST) when redirecting to the issuer."
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference to uniquely identify a payment."
          },
          "returnUrl" : {
            "type" : "string",
            "description" : "The URL to return to in case of a redirection.\nThe format depends on the channel. \n* For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number.\nExample: `https://your-company.example.com/checkout?shopperOrder=12xy`\n* For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app).\nExample: `my-app://`\n* For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters).\nExample: `my-app://your.package.name`\n\nIf the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value.\n\nWe strongly recommend that you use a maximum of 1024 characters.\n\n> The URL must not include personally identifiable information (PII), for example name or email address.",
            "maxLength" : 8000
          },
          "riskData" : {
            "$ref" : "#/components/schemas/RiskData",
            "description" : "Any risk-related settings to apply to the payment."
          },
          "sessionData" : {
            "type" : "string",
            "description" : "The payment session data you need to pass to your front end."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email address."
          },
          "shopperIP" : {
            "type" : "string",
            "description" : "The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication for all web and mobile integrations, if you did not include the `shopperEmail`. For native mobile integrations, the field is required to support cases where authentication is routed to the redirect flow. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new)."
          },
          "shopperInteraction" : {
            "type" : "string",
            "description" : "Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.",
            "enum" : [ "Ecommerce", "ContAuth", "Moto", "POS" ]
          },
          "shopperLocale" : {
            "type" : "string",
            "description" : "The combination of a language code and a country code to specify the language to be used in the payment."
          },
          "shopperName" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program."
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters.\n> Your reference must not include personally identifiable information (PII) such as name or email address.",
            "maxLength" : 256,
            "minLength" : 3
          },
          "shopperStatement" : {
            "type" : "string",
            "description" : "The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**."
          },
          "showInstallmentAmount" : {
            "type" : "boolean",
            "description" : "Set to true to show the payment amount per installment."
          },
          "showRemovePaymentMethodButton" : {
            "type" : "boolean",
            "description" : "Set to **true** to show a button that lets the shopper remove a stored payment method."
          },
          "socialSecurityNumber" : {
            "type" : "string",
            "description" : "The shopper's social security number."
          },
          "splitCardFundingSources" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Boolean value indicating whether the card payment method should be split into separate debit and credit options."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            }
          },
          "store" : {
            "type" : "string",
            "description" : "Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment."
          },
          "storeFiltrationMode" : {
            "type" : "string",
            "description" : "Specifies how payment methods should be filtered based on the 'store' parameter:\n  - 'exclusive': Only payment methods belonging to the specified 'store' are returned.\n  - 'inclusive': Payment methods from the 'store' and those not associated with any other store are returned.",
            "enum" : [ "exclusive", "inclusive", "skipFilter" ]
          },
          "storePaymentMethod" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be stored for future [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types)."
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The shopper's telephone number.\n The phone number must include a plus sign (+) and a country code (1-3 digits), followed by the number (4-15 digits). If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`."
          },
          "threeDS2RequestData" : {
            "$ref" : "#/components/schemas/CheckoutSessionThreeDS2RequestData",
            "description" : "Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments)."
          },
          "threeDSAuthenticationOnly" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Required to trigger the [authentication-only flow](https://docs.adyen.com/online-payments/3d-secure/authentication-only/). If set to **true**, you will only perform the 3D Secure 2 authentication, and will not proceed to the payment authorization.Default: **false**."
          },
          "trustedShopper" : {
            "type" : "boolean",
            "description" : "Set to true if the payment should be routed to a trusted MID."
          }
        },
        "required" : [ "amount", "expiresAt", "id", "merchantAccount", "reference", "returnUrl" ]
      },
      "CreateOrderRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The total amount of the order."
          },
          "expiresAt" : {
            "type" : "string",
            "description" : "The date when the order should expire. If not provided, the default expiry duration is 1 day.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the order."
          },
          "reference" : {
            "type" : "string",
            "description" : "A custom reference identifying the order."
          }
        },
        "required" : [ "amount", "merchantAccount", "reference" ]
      },
      "CreateOrderResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/ResponseAdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataBillingAddress"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataCard"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataDomesticError"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataInstallments"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataNetworkTokens"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataSepa"
            } ]
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The initial amount of the order.",
            "x-addedInVersion" : "68"
          },
          "expiresAt" : {
            "type" : "string",
            "description" : "The date that the order will expire."
          },
          "fraudResult" : {
            "$ref" : "#/components/schemas/FraudResult",
            "description" : "The fraud result properties of the payment."
          },
          "orderData" : {
            "type" : "string",
            "description" : "The encrypted data that will be used by merchant for adding payments to the order."
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request."
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference provided by merchant for creating the order."
          },
          "refusalReason" : {
            "type" : "string",
            "description" : "If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n\nFor more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons)."
          },
          "remainingAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The remaining amount in the order."
          },
          "resultCode" : {
            "type" : "string",
            "description" : "The result of the order creation request.\n The value is always **Success**.",
            "enum" : [ "Success" ]
          }
        },
        "required" : [ "amount", "expiresAt", "orderData", "remainingAmount", "resultCode" ]
      },
      "DeliveryAddress" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "city" : {
            "type" : "string",
            "description" : "The name of the city. Maximum length: 3000 characters.",
            "maxLength" : 3000
          },
          "country" : {
            "type" : "string",
            "description" : "The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n> If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`."
          },
          "firstName" : {
            "type" : "string"
          },
          "houseNumberOrName" : {
            "type" : "string",
            "description" : "The number or name of the house. Maximum length: 3000 characters.",
            "maxLength" : 3000
          },
          "lastName" : {
            "type" : "string"
          },
          "postalCode" : {
            "type" : "string",
            "description" : "A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries."
          },
          "stateOrProvince" : {
            "type" : "string",
            "description" : "The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.",
            "maxLength" : 1000
          },
          "street" : {
            "type" : "string",
            "description" : "The name of the street. Maximum length: 3000 characters.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.",
            "maxLength" : 3000
          }
        },
        "required" : [ "city", "country", "houseNumberOrName", "postalCode", "street" ]
      },
      "DeliveryMethod" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The cost of this delivery method."
          },
          "description" : {
            "type" : "string",
            "description" : "The name of the delivery method as shown to the shopper."
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference of the delivery method."
          },
          "selected" : {
            "type" : "boolean",
            "description" : "If you display the PayPal lightbox with delivery methods, set to **true** for the delivery method that is selected. Only one delivery method can be selected at a time."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the delivery method.",
            "enum" : [ "Shipping" ]
          }
        }
      },
      "DeviceRenderOptions" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "sdkInterface" : {
            "type" : "string",
            "default" : "both",
            "description" : "Supported SDK interface types.\nAllowed values:\n* native\n* html\n* both",
            "enum" : [ "native", "html", "both" ]
          },
          "sdkUiType" : {
            "type" : "array",
            "description" : "UI types supported for displaying specific challenges.\nAllowed values:\n* text\n* singleSelect\n* outOfBand\n* otherHtml\n* multiSelect",
            "items" : {
              "type" : "string",
              "enum" : [ "multiSelect", "otherHtml", "outOfBand", "singleSelect", "text" ]
            }
          }
        }
      },
      "DokuDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "firstName" : {
            "type" : "string",
            "description" : "The shopper's first name."
          },
          "lastName" : {
            "type" : "string",
            "description" : "The shopper's last name."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email."
          },
          "type" : {
            "type" : "string",
            "description" : "**doku**",
            "enum" : [ "doku_mandiri_va", "doku_cimb_va", "doku_danamon_va", "doku_bni_va", "doku_permata_lite_atm", "doku_bri_va", "doku_bca_va", "doku_alfamart", "doku_indomaret", "doku_wallet", "doku_ovo" ]
          }
        },
        "required" : [ "firstName", "lastName", "shopperEmail", "type" ],
        "title" : "Doku"
      },
      "Donation" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes/)."
          },
          "donationType" : {
            "type" : "string",
            "description" : "The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).\n\nPossible values:\n* **roundup**: a donation where the original transaction amount is rounded up as a donation.\n* **fixedAmounts**: a donation where you show fixed donations amounts that the shopper can select from."
          },
          "maxRoundupAmount" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The maximum amount a transaction can be rounded up to make a donation. This field is only present when `donationType` is **roundup**."
          },
          "type" : {
            "type" : "string",
            "description" : "The [type of donation](https://docs.adyen.com/online-payments/donations/#donation-types).\n\nPossible values:\n* **roundup**: a donation where the original transaction amount is rounded up as a donation.\n* **fixedAmounts**: a donation where you show fixed donation amounts that the shopper can select from."
          },
          "values" : {
            "type" : "array",
            "description" : "The fixed donation amounts in [minor units](https://docs.adyen.com/development-resources/currency-codes//#minor-units). This field is only present when `donationType` is **fixedAmounts**.",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "currency", "donationType", "type" ]
      },
      "DonationCampaign" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amounts" : {
            "$ref" : "#/components/schemas/Amounts",
            "description" : "The object that contains the fixed donation amounts that the shopper can select from."
          },
          "bannerUrl" : {
            "type" : "string",
            "description" : "The URL for the banner of the nonprofit or campaign."
          },
          "campaignName" : {
            "type" : "string",
            "description" : "The name of the donation campaign.."
          },
          "causeName" : {
            "type" : "string",
            "description" : "The cause of the nonprofit."
          },
          "donation" : {
            "$ref" : "#/components/schemas/Donation",
            "description" : "The object that contains the details of the donation."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique campaign ID of the donation campaign."
          },
          "logoUrl" : {
            "type" : "string",
            "description" : "The URL for the logo of the nonprofit."
          },
          "nonprofitDescription" : {
            "type" : "string",
            "description" : "The description of the nonprofit."
          },
          "nonprofitName" : {
            "type" : "string",
            "description" : "The name of the nonprofit organization that receives the donation."
          },
          "nonprofitUrl" : {
            "type" : "string",
            "description" : "The website URL of the nonprofit."
          },
          "termsAndConditionsUrl" : {
            "type" : "string",
            "description" : "The URL of the terms and conditions page of the nonprofit and the campaign."
          }
        }
      },
      "DonationCampaignsRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes/)."
          },
          "locale" : {
            "type" : "string",
            "description" : "Locale on the shopper interaction device."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "Your merchant account identifier."
          }
        },
        "required" : [ "currency", "merchantAccount" ]
      },
      "DonationCampaignsResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "donationCampaigns" : {
            "type" : "array",
            "description" : "List of active donation campaigns for your merchant account.",
            "items" : {
              "$ref" : "#/components/schemas/DonationCampaign"
            }
          }
        }
      },
      "DonationPaymentRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountInfo" : {
            "$ref" : "#/components/schemas/AccountInfo",
            "description" : "Shopper account information for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.",
            "x-addedInVersion" : "40"
          },
          "additionalAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. "
          },
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/AdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataAirline"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCarRental"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLevel23"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLodging"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpenInvoice"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRatepay"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRetry"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRisk"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRiskStandalone"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataSubMerchant"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataTemporaryServices"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataWallets"
            } ]
          },
          "allowedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"allowedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            },
            "x-addedInVersion" : "37"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero)."
          },
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).",
            "x-addedInVersion" : "40"
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/BillingAddress",
            "description" : "The address where to send the invoice.\n> The `billingAddress` object is required in the following scenarios. Include all of the fields within this object.\n>* For 3D Secure 2 transactions in all browser-based and mobile implementations.\n>* For cross-border payouts to and from Canada."
          },
          "blockedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"blockedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            },
            "x-addedInVersion" : "37"
          },
          "browserInfo" : {
            "$ref" : "#/components/schemas/BrowserInfo",
            "description" : "The shopper's browser information.\n> For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 2 redirect."
          },
          "captureDelayHours" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The delay between the authorization and scheduled auto-capture, specified in hours."
          },
          "channel" : {
            "type" : "string",
            "description" : "The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.\n\nPossible values:\n* iOS\n* Android\n* Web",
            "enum" : [ "iOS", "Android", "Web" ]
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey."
          },
          "company" : {
            "$ref" : "#/components/schemas/Company",
            "description" : "Information regarding the company.",
            "x-addedInVersion" : "32"
          },
          "conversionId" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.",
            "x-addedInVersion" : "49",
            "x-deprecatedInVersion" : "68",
            "x-deprecatedMessage" : "Use `checkoutAttemptId` instead"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The shopper country.\n\nFormat: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\nExample: NL or DE",
            "maxLength" : 100
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD"
          },
          "dccQuote" : {
            "$ref" : "#/components/schemas/ForexQuote",
            "description" : "The forex quote as returned in the response of the forex service."
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/DeliveryAddress",
            "description" : "The address where the purchased goods should be delivered."
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the purchased goods should be delivered.\n\nFormat [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\nExample: 2017-07-17T13:42:40.428+01:00"
          },
          "deviceFingerprint" : {
            "type" : "string",
            "description" : "A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).",
            "maxLength" : 5000
          },
          "donationAccount" : {
            "type" : "string",
            "description" : "Donation account to which the transaction is credited."
          },
          "donationCampaignId" : {
            "type" : "string",
            "description" : "The donation campaign ID received in the `/donationCampaigns` call.",
            "x-addedInVersion" : "67"
          },
          "donationOriginalPspReference" : {
            "type" : "string",
            "description" : "PSP reference of the transaction from which the donation token is generated. Required when `donationToken` is provided."
          },
          "donationToken" : {
            "type" : "string",
            "description" : "Donation token received in the `/payments` call."
          },
          "enableOneClick" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.",
            "x-addedInVersion" : "32"
          },
          "enablePayOut" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be tokenized for payouts.",
            "x-addedInVersion" : "32"
          },
          "enableRecurring" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.",
            "x-addedInVersion" : "32"
          },
          "entityType" : {
            "type" : "string",
            "description" : "The type of the entity the payment is processed for.",
            "enum" : [ "NaturalPerson", "CompanyName" ]
          },
          "fraudOffset" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "An integer value that is added to the normal fraud score. The value can be either positive or negative."
          },
          "fundOrigin" : {
            "$ref" : "#/components/schemas/FundOrigin",
            "description" : "The person or entity funding the money."
          },
          "fundRecipient" : {
            "$ref" : "#/components/schemas/FundRecipient",
            "description" : "the person or entity receiving the money"
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "debit" ],
            "x-addedInVersion" : "52"
          },
          "installments" : {
            "$ref" : "#/components/schemas/Installments",
            "description" : "Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments)."
          },
          "lineItems" : {
            "type" : "array",
            "description" : "Price and product information about the purchased items, to be included on the invoice sent to the shopper.\n> This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip.",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            },
            "x-addedInVersion" : "32"
          },
          "localizedShopperStatement" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The `localizedShopperStatement` field lets you use dynamic values for your shopper statement in a local character set.\nIf not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.\n\nAdyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using Japanese cards. This character set supports:\n\n* UTF-8 based Katakana, capital letters, numbers and special characters. \n* Half-width or full-width characters.",
            "x-addedInVersion" : "68"
          },
          "mandate" : {
            "$ref" : "#/components/schemas/Mandate",
            "description" : "The mandate details to initiate recurring transaction."
          },
          "mcc" : {
            "type" : "string",
            "description" : "The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the transaction."
          },
          "merchantOrderReference" : {
            "type" : "string",
            "description" : "This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorizations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorization retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.",
            "maxLength" : 1000
          },
          "merchantRiskIndicator" : {
            "$ref" : "#/components/schemas/MerchantRiskIndicator",
            "description" : "Additional risk fields for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.",
            "x-addedInVersion" : "40"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\".\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. "
          },
          "mpiData" : {
            "$ref" : "#/components/schemas/ThreeDSecureData",
            "description" : "Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires)."
          },
          "order" : {
            "$ref" : "#/components/schemas/EncryptedOrderData",
            "description" : "The order information required for partial payments."
          },
          "orderReference" : {
            "type" : "string",
            "description" : "When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead."
          },
          "origin" : {
            "type" : "string",
            "description" : "> Required for browser-based (`channel` **Web**) 3D Secure 2 transactions.Set this to the origin URL of the page where you are rendering the Drop-in/Component. Do not include subdirectories and a trailing slash.",
            "maxLength" : 80,
            "x-addedInVersion" : "40"
          },
          "paymentMethod" : {
            "description" : "The type and required details of a payment method to use.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/ApplePayDonations"
            }, {
              "$ref" : "#/components/schemas/CardDonations"
            }, {
              "$ref" : "#/components/schemas/GooglePayDonations"
            }, {
              "$ref" : "#/components/schemas/IdealDonations"
            }, {
              "$ref" : "#/components/schemas/PayWithGoogleDonations"
            } ]
          },
          "platformChargebackLogic" : {
            "$ref" : "#/components/schemas/PlatformChargebackLogic",
            "description" : "Defines how to book chargebacks when using [Adyen for Platforms](https://docs.adyen.com/adyen-for-platforms-model).",
            "x-addedInVersion" : "68"
          },
          "recurringExpiry" : {
            "type" : "string",
            "description" : "Date after which no further authorizations shall be performed. Only for 3D Secure 2."
          },
          "recurringFrequency" : {
            "type" : "string",
            "description" : "Minimum number of days between authorizations. Only for 3D Secure 2."
          },
          "recurringProcessingModel" : {
            "type" : "string",
            "description" : "Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
            "enum" : [ "CardOnFile", "Subscription", "UnscheduledCardOnFile" ],
            "x-addedInVersion" : "32"
          },
          "redirectFromIssuerMethod" : {
            "type" : "string",
            "description" : "Specifies the redirect method (GET or POST) when redirecting back from the issuer.",
            "x-addedInVersion" : "32"
          },
          "redirectToIssuerMethod" : {
            "type" : "string",
            "description" : "Specifies the redirect method (GET or POST) when redirecting to the issuer.",
            "x-addedInVersion" : "32"
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens (\"-\").\nMaximum length: 80 characters."
          },
          "returnUrl" : {
            "type" : "string",
            "description" : "The URL to return to in case of a redirection.\nThe format depends on the channel. \n* For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number.\nExample: `https://your-company.example.com/checkout?shopperOrder=12xy`\n* For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app).\nExample: `my-app://`\n* For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters).\nExample: `my-app://your.package.name`\n\nIf the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value.\n\nWe strongly recommend that you use a maximum of 1024 characters.\n\n> The URL must not include personally identifiable information (PII), for example name or email address.",
            "maxLength" : 8000
          },
          "riskData" : {
            "$ref" : "#/components/schemas/RiskData",
            "description" : "Contains risk data, such as client-side data, used to identify risk for a transaction."
          },
          "selectedRecurringDetailReference" : {
            "type" : "string",
            "description" : "The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail."
          },
          "sessionValidity" : {
            "type" : "string",
            "description" : "The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.\n\nFor example: 2020-07-18T15:42:40.428+01:00"
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > Required for Visa and JCB transactions that require 3D Secure 2 authentication if you did not include the `telephoneNumber`."
          },
          "shopperIP" : {
            "type" : "string",
            "description" : "The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication for all web and mobile integrations, if you did not include the `shopperEmail`. For native mobile integrations, the field is required to support cases where authentication is routed to the redirect flow. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).",
            "maxLength" : 1000
          },
          "shopperInteraction" : {
            "type" : "string",
            "description" : "Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorization rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorization (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.",
            "enum" : [ "Ecommerce", "ContAuth", "Moto", "POS" ]
          },
          "shopperLocale" : {
            "type" : "string",
            "description" : "The combination of a language code and a country code to specify the language to be used in the payment."
          },
          "shopperName" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "The shopper's full name."
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.",
            "maxLength" : 256,
            "minLength" : 3
          },
          "shopperStatement" : {
            "type" : "string",
            "description" : "The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.",
            "maxLength" : 10000
          },
          "socialSecurityNumber" : {
            "type" : "string",
            "description" : "The shopper's social security number."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            },
            "x-addedInVersion" : "37"
          },
          "store" : {
            "type" : "string",
            "description" : "Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.",
            "maxLength" : 16,
            "minLength" : 1
          },
          "storePaymentMethod" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be stored.",
            "x-addedInVersion" : "49"
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The shopper's telephone number.\n The phone number must include a plus sign (+) and a country code (1-3 digits), followed by the number (4-15 digits). If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`."
          },
          "threeDS2RequestData" : {
            "$ref" : "#/components/schemas/ThreeDS2RequestFields",
            "description" : "Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.",
            "x-addedInVersion" : "40"
          },
          "threeDSAuthenticationOnly" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Required to trigger the [authentication-only flow](https://docs.adyen.com/online-payments/3d-secure/authentication-only/). If set to **true**, you will only perform the 3D Secure 2 authentication, and will not proceed to the payment authorization.Default: **false**.",
            "x-addedInVersion" : "50"
          },
          "trustedShopper" : {
            "type" : "boolean",
            "description" : "Set to true if the payment should be routed to a trusted MID.",
            "x-addedInVersion" : "37"
          }
        },
        "required" : [ "amount", "merchantAccount", "paymentMethod", "reference", "returnUrl" ]
      },
      "DonationPaymentResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "Authorised amount in the transaction."
          },
          "donationAccount" : {
            "type" : "string",
            "description" : "The Adyen account name of your charity. We will provide you with this account name once your chosen charity has been [onboarded](https://docs.adyen.com/online-payments/donations#onboarding)."
          },
          "id" : {
            "type" : "string",
            "description" : "Your unique resource identifier."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the transaction."
          },
          "payment" : {
            "$ref" : "#/components/schemas/PaymentResponse",
            "description" : "Action to be taken for completing the payment."
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the donation transaction.\n\nPossible values:\n* **completed**\n* **pending**\n* **refused**",
            "enum" : [ "completed", "pending", "refused" ]
          }
        }
      },
      "DragonpayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "issuer" : {
            "type" : "string",
            "description" : "The Dragonpay issuer value of the shopper's selected bank. Set this to an **id** of a Dragonpay issuer to preselect it."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper’s email address."
          },
          "type" : {
            "type" : "string",
            "description" : "**dragonpay**",
            "enum" : [ "dragonpay_ebanking", "dragonpay_otc_banking", "dragonpay_otc_non_banking", "dragonpay_otc_philippines" ]
          }
        },
        "required" : [ "issuer", "type" ],
        "title" : "Dragonpay"
      },
      "EBankingFinlandDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "issuer" : {
            "type" : "string",
            "description" : "The Ebanking Finland issuer value of the shopper's selected bank."
          },
          "type" : {
            "type" : "string",
            "default" : "ebanking_FI",
            "description" : "**ebanking_FI**",
            "enum" : [ "ebanking_FI" ]
          }
        },
        "required" : [ "type" ],
        "title" : "E-Banking Finland"
      },
      "EcontextVoucherDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "firstName" : {
            "type" : "string",
            "description" : "The shopper's first name."
          },
          "lastName" : {
            "type" : "string",
            "description" : "The shopper's last name."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email."
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The shopper's contact number. It must have an international number format, for example **+31 20 779 1846**. Formats like **+31 (0)20 779 1846** or **0031 20 779 1846** are not accepted."
          },
          "type" : {
            "type" : "string",
            "description" : "**econtextvoucher**",
            "enum" : [ "econtext_seven_eleven", "econtext_online", "econtext", "econtext_stores", "econtext_atm" ]
          }
        },
        "required" : [ "firstName", "lastName", "shopperEmail", "telephoneNumber", "type" ],
        "title" : "Voucher"
      },
      "EftDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "bankAccountNumber" : {
            "type" : "string",
            "description" : "The bank account number (without separators)."
          },
          "bankCode" : {
            "type" : "string",
            "description" : "The financial institution code."
          },
          "bankLocationId" : {
            "type" : "string",
            "description" : "The bank routing number of the account."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "ownerName" : {
            "type" : "string",
            "description" : "The name of the bank account holder.\nIf you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:\n* χ12 is converted to ch12.\n* üA is converted to euA.\n* Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\nAfter replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:\n* John17 - allowed.\n* J17 - allowed.\n* 171 - not allowed.\n* John-7 - allowed.\n> If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "eft_directdebit_CA",
            "description" : "**eft**",
            "enum" : [ "eft_directdebit_CA" ]
          }
        },
        "title" : "EFT Direct Debit"
      },
      "EncryptedOrderData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "orderData" : {
            "type" : "string",
            "description" : "The encrypted order data.",
            "maxLength" : 5000
          },
          "pspReference" : {
            "type" : "string",
            "description" : "The `pspReference` that belongs to the order."
          }
        },
        "required" : [ "orderData", "pspReference" ]
      },
      "ExternalPlatform" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "integrator" : {
            "type" : "string",
            "description" : "External platform integrator."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the field. For example, Name of External Platform."
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the field. For example, Version of External Platform."
          }
        }
      },
      "FastlaneDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "fastlaneData" : {
            "type" : "string",
            "description" : "The encoded fastlane data blob"
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "fastlane",
            "description" : "**fastlane**",
            "enum" : [ "fastlane" ]
          }
        },
        "required" : [ "fastlaneData", "type" ],
        "title" : "Fastlane"
      },
      "ForexQuote" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "account" : {
            "type" : "string",
            "description" : "The account name."
          },
          "accountType" : {
            "type" : "string",
            "description" : "The account type."
          },
          "baseAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The base amount."
          },
          "basePoints" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The base points."
          },
          "buy" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The buy rate."
          },
          "interbank" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The interbank amount."
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference assigned to the forex quote request."
          },
          "sell" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The sell rate."
          },
          "signature" : {
            "type" : "string",
            "description" : "The signature to validate the integrity."
          },
          "source" : {
            "type" : "string",
            "description" : "The source of the forex quote."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of forex."
          },
          "validTill" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date until which the forex quote is valid."
          }
        },
        "required" : [ "basePoints", "validTill" ]
      },
      "FraudCheckResult" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountScore" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The fraud score generated by the risk check."
          },
          "checkId" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The ID of the risk check."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the risk check."
          }
        },
        "required" : [ "accountScore", "checkId", "name" ]
      },
      "FraudCheckResultWrapper" : {
        "properties" : {
          "FraudCheckResult" : {
            "$ref" : "#/components/schemas/FraudCheckResult"
          }
        }
      },
      "FraudResult" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountScore" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total fraud score generated by the risk checks."
          },
          "results" : {
            "type" : "array",
            "description" : "The result of the individual risk checks.",
            "items" : {
              "$ref" : "#/components/schemas/FraudCheckResultWrapper"
            }
          }
        },
        "required" : [ "accountScore" ]
      },
      "FundOrigin" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "billingAddress" : {
            "$ref" : "#/components/schemas/Address",
            "description" : "The address where to send the invoice."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The email address of the person funding the money."
          },
          "shopperName" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "The name of the person funding the money."
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The phone number of the person funding the money."
          },
          "walletIdentifier" : {
            "type" : "string",
            "description" : "The unique identifier of the wallet where the funds are coming from."
          }
        }
      },
      "FundRecipient" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "IBAN" : {
            "type" : "string",
            "description" : "The IBAN of the bank account where the funds are being transferred to."
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/Address",
            "description" : "The address where to send the invoice."
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/CardDetails",
            "description" : "The payment method used by the shopper."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The email address of the shopper."
          },
          "shopperName" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "The name of the shopper."
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters.\n> Your reference must not include personally identifiable information (PII) such as name or email address.",
            "maxLength" : 256,
            "minLength" : 3
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64
          },
          "subMerchant" : {
            "$ref" : "#/components/schemas/SubMerchant",
            "description" : "Required for back-to-back/purchase-driven-load transactions, where the funds are taken from the shopper's stored card when the wallet balance is insufficient.\nThe final merchant who will receive the money, also known as a [sub-merchant](https://docs.adyen.com/get-started-with-adyen/payment-glossary/#submerchant)."
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The telephone number of the shopper."
          },
          "walletIdentifier" : {
            "type" : "string",
            "description" : "The unique identifier for the wallet the funds are being transferred to. You can use the shopper reference or any other identifier."
          },
          "walletOwnerTaxId" : {
            "type" : "string",
            "description" : "The tax identifier of the person receiving the funds."
          },
          "walletPurpose" : {
            "type" : "string",
            "description" : "The purpose of a digital wallet transaction.",
            "enum" : [ "identifiedBoleto", "transferDifferentWallet", "transferOwnWallet", "transferSameWallet", "unidentifiedBoleto" ]
          }
        }
      },
      "GenericIssuerPaymentMethodDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "issuer" : {
            "type" : "string",
            "description" : "The issuer id of the shopper's selected bank."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "description" : "**genericissuer**",
            "enum" : [ "onlineBanking_PL", "eps", "onlineBanking_SK", "onlineBanking_CZ" ]
          }
        },
        "required" : [ "issuer", "type" ],
        "title" : "Stored Payment Method"
      },
      "GooglePayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "googlePayCardNetwork" : {
            "type" : "string",
            "description" : "The selected payment card network. "
          },
          "googlePayToken" : {
            "type" : "string",
            "description" : "The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.",
            "maxLength" : 10000
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "threeDS2SdkVersion" : {
            "type" : "string",
            "description" : "Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.",
            "maxLength" : 12
          },
          "type" : {
            "type" : "string",
            "default" : "googlepay",
            "description" : "**googlepay**, **paywithgoogle**",
            "enum" : [ "googlepay" ]
          }
        },
        "required" : [ "googlePayToken" ],
        "title" : "Google Pay"
      },
      "GooglePayDonations" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "googlePayCardNetwork" : {
            "type" : "string",
            "description" : "The selected payment card network. "
          },
          "googlePayToken" : {
            "type" : "string",
            "description" : "The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.",
            "maxLength" : 10000
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "threeDS2SdkVersion" : {
            "type" : "string",
            "description" : "Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.",
            "maxLength" : 12
          },
          "type" : {
            "type" : "string",
            "default" : "googlepay",
            "description" : "**googlepay**, **paywithgoogle**",
            "enum" : [ "googlepay" ]
          }
        },
        "required" : [ "googlePayToken" ],
        "title" : "Google Pay"
      },
      "IdealDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "issuer" : {
            "type" : "string",
            "description" : "The iDEAL issuer value of the shopper's selected bank. Set this to an **id** of an iDEAL issuer to preselect it."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "ideal",
            "description" : "**ideal**",
            "enum" : [ "ideal" ]
          }
        },
        "title" : "iDEAL"
      },
      "IdealDonations" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "issuer" : {
            "type" : "string",
            "description" : "The iDEAL issuer value of the shopper's selected bank. Set this to an **id** of an iDEAL issuer to preselect it."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "ideal",
            "description" : "**ideal**",
            "enum" : [ "ideal" ]
          }
        },
        "title" : "iDEAL"
      },
      "InputDetail" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "configuration" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Configuration parameters for the required input."
          },
          "details" : {
            "type" : "array",
            "description" : "Input details can also be provided recursively.",
            "items" : {
              "$ref" : "#/components/schemas/SubInputDetail"
            }
          },
          "inputDetails" : {
            "type" : "array",
            "deprecated" : true,
            "description" : "Input details can also be provided recursively (deprecated).",
            "items" : {
              "$ref" : "#/components/schemas/SubInputDetail"
            }
          },
          "itemSearchUrl" : {
            "type" : "string",
            "description" : "In case of a select, the URL from which to query the items."
          },
          "items" : {
            "type" : "array",
            "description" : "In case of a select, the items to choose from.",
            "items" : {
              "$ref" : "#/components/schemas/Item"
            }
          },
          "key" : {
            "type" : "string",
            "description" : "The value to provide in the result."
          },
          "optional" : {
            "type" : "boolean",
            "description" : "True if this input value is optional."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the required input."
          },
          "value" : {
            "type" : "string",
            "description" : "The value can be pre-filled, if available."
          }
        }
      },
      "InstallmentOption" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "maxValue" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The maximum number of installments offered for this payment method."
          },
          "plans" : {
            "type" : "array",
            "description" : "Defines the type of installment plan. If not set, defaults to **regular**.\n\nPossible values:\n* **regular**\n* **revolving**",
            "items" : {
              "type" : "string",
              "enum" : [ "bonus", "buynow_paylater", "interes_refund_prctg", "interest_bonus", "nointeres_refund_prctg", "nointerest_bonus", "refund_prctg", "regular", "revolving", "with_interest" ]
            },
            "x-addedInVersion" : "64"
          },
          "preselectedValue" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Preselected number of installments offered for this payment method.",
            "x-addedInVersion" : "64"
          },
          "values" : {
            "type" : "array",
            "description" : "An array of the number of installments that the shopper can choose from. For example, **[2,3,5]**. This cannot be specified simultaneously with `maxValue`.",
            "items" : {
              "type" : "integer",
              "format" : "int32"
            },
            "x-addedInVersion" : "64"
          }
        }
      },
      "Installments" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "extra" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Defines the bonus percentage, refund percentage or if the transaction is Buy now Pay later.\nUsed for [card installments in Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico)\n",
            "x-addedInVersion" : "68"
          },
          "plan" : {
            "type" : "string",
            "description" : "The installment plan, used for [card installments in Japan](https://docs.adyen.com/payment-methods/cards/credit-card-installments#make-a-payment-japan).\nand [Mexico](https://docs.adyen.com/payment-methods/cards/credit-card-installments/#getting-paid-mexico).\nBy default, this is set to **regular**.\n",
            "enum" : [ "bonus", "buynow_paylater", "interes_refund_prctg", "interest_bonus", "nointeres_refund_prctg", "nointerest_bonus", "refund_prctg", "regular", "revolving", "with_interest" ],
            "x-addedInVersion" : "64"
          },
          "value" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Defines the number of installments.\nUsually, the maximum allowed number of installments is capped. For example, it may not be possible to split a payment in more than 24 installments. The acquirer sets this upper limit, so its value may vary.\nThis value can be zero for Installments processed in Mexico."
          }
        },
        "required" : [ "value" ]
      },
      "Item" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The value to provide in the result."
          },
          "name" : {
            "type" : "string",
            "description" : "The display name."
          }
        }
      },
      "KlarnaDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "billingAddress" : {
            "type" : "string",
            "description" : "The address where to send the invoice."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "deliveryAddress" : {
            "type" : "string",
            "description" : "The address where the goods should be delivered."
          },
          "personalDetails" : {
            "type" : "string",
            "description" : "Shopper name, date of birth, phone number, and email address."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "subtype" : {
            "type" : "string",
            "description" : "The type of flow to initiate."
          },
          "type" : {
            "type" : "string",
            "default" : "klarna",
            "description" : "**klarna**",
            "enum" : [ "klarna", "klarnapayments", "klarnapayments_account", "klarnapayments_b2b", "klarna_paynow", "klarna_account", "klarna_b2b" ]
          }
        },
        "required" : [ "type" ],
        "title" : "Klarna"
      },
      "LineItem" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amountExcludingTax" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Item amount excluding the tax, in minor units."
          },
          "amountIncludingTax" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Item amount including the tax, in minor units."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the line item.",
            "maxLength" : 10000
          },
          "id" : {
            "type" : "string",
            "description" : "ID of the line item."
          },
          "imageUrl" : {
            "type" : "string",
            "description" : "Link to the picture of the purchased item."
          },
          "itemCategory" : {
            "type" : "string",
            "description" : "Item category, used by the payment methods PayPal and Ratepay."
          },
          "productUrl" : {
            "type" : "string",
            "description" : "Link to the purchased item."
          },
          "quantity" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of items."
          },
          "taxAmount" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Tax amount, in minor units."
          },
          "taxPercentage" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Tax percentage, in minor units."
          }
        }
      },
      "Mandate" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "type" : "string",
            "description" : "The billing amount (in minor units) of the recurring transactions."
          },
          "amountRule" : {
            "type" : "string",
            "description" : "The limitation rule of the billing amount.\n\nPossible values:\n * **max**: The transaction amount can not exceed the `amount`.\n\n * **exact**: The transaction amount should be the same as the `amount`.\n\n",
            "enum" : [ "max", "exact" ]
          },
          "billingAttemptsRule" : {
            "type" : "string",
            "description" : "The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.\n\nPossible values:\n\n * **on**: On a specific date.\n\n * **before**:  Before and on a specific date.\n\n * **after**: On and after a specific date.\n\n",
            "enum" : [ "on", "before", "after" ]
          },
          "billingDay" : {
            "type" : "string",
            "description" : "The number of the day, on which the recurring debit can happen. Should be within the same calendar month as the mandate recurring date.\n\nPossible values: 1-31 based on the `frequency`."
          },
          "count" : {
            "type" : "string",
            "description" : "The number of transactions that can be performed within the given frequency."
          },
          "endsAt" : {
            "type" : "string",
            "description" : "End date of the billing plan, in YYYY-MM-DD format."
          },
          "frequency" : {
            "type" : "string",
            "description" : "The frequency with which a shopper should be charged.\n\nPossible values: **adhoc**, **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.",
            "enum" : [ "adhoc", "daily", "weekly", "biWeekly", "monthly", "quarterly", "halfYearly", "yearly" ]
          },
          "remarks" : {
            "type" : "string",
            "description" : "The message shown by UPI to the shopper on the approval screen."
          },
          "startsAt" : {
            "type" : "string",
            "description" : "Start date of the billing plan, in YYYY-MM-DD format. By default, the transaction date."
          }
        },
        "required" : [ "amount", "endsAt", "frequency" ]
      },
      "MasterpassDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "masterpassTransactionId" : {
            "type" : "string",
            "description" : "The Masterpass transaction ID."
          },
          "type" : {
            "type" : "string",
            "default" : "masterpass",
            "description" : "**masterpass**",
            "enum" : [ "masterpass" ]
          }
        },
        "required" : [ "masterpassTransactionId" ],
        "title" : "Masterpass"
      },
      "MbwayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : ""
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : ""
          },
          "type" : {
            "type" : "string",
            "default" : "mbway",
            "description" : "**mbway**",
            "enum" : [ "mbway" ]
          }
        },
        "required" : [ "shopperEmail", "telephoneNumber" ],
        "title" : "MBWay"
      },
      "MerchantDevice" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "os" : {
            "type" : "string",
            "description" : "Operating system running on the merchant device."
          },
          "osVersion" : {
            "type" : "string",
            "description" : "Version of the operating system on the merchant device."
          },
          "reference" : {
            "type" : "string",
            "description" : "Merchant device reference."
          }
        }
      },
      "MerchantRiskIndicator" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "addressMatch" : {
            "type" : "boolean",
            "description" : "Whether the chosen delivery address is identical to the billing address."
          },
          "deliveryAddressIndicator" : {
            "type" : "string",
            "description" : "Indicator regarding the delivery address.\nAllowed values:\n* `shipToBillingAddress`\n* `shipToVerifiedAddress`\n* `shipToNewAddress`\n* `shipToStore`\n* `digitalGoods`\n* `goodsNotShipped`\n* `other`",
            "enum" : [ "shipToBillingAddress", "shipToVerifiedAddress", "shipToNewAddress", "shipToStore", "digitalGoods", "goodsNotShipped", "other" ]
          },
          "deliveryEmail" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "The delivery email address (for digital goods).",
            "x-deprecatedInVersion" : "68",
            "x-deprecatedMessage" : "Use `deliveryEmailAddress` instead."
          },
          "deliveryEmailAddress" : {
            "type" : "string",
            "description" : "For Electronic delivery, the email address to which the merchandise was delivered. Maximum length: 254 characters.",
            "maxLength" : 254,
            "x-addedInVersion" : "68"
          },
          "deliveryTimeframe" : {
            "type" : "string",
            "description" : "The estimated delivery time for the shopper to receive the goods.\nAllowed values:\n* `electronicDelivery`\n* `sameDayShipping`\n* `overnightShipping`\n* `twoOrMoreDaysShipping`",
            "enum" : [ "electronicDelivery", "sameDayShipping", "overnightShipping", "twoOrMoreDaysShipping" ]
          },
          "giftCardAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "For prepaid or gift card purchase, the purchase amount total of prepaid or gift card(s)."
          },
          "giftCardCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased."
          },
          "giftCardCurr" : {
            "type" : "string",
            "description" : "For prepaid or gift card purchase, [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) three-digit currency code of the gift card, other than those listed in Table A.5 of the EMVCo 3D Secure Protocol and Core Functions Specification.",
            "x-addedInVersion" : "68"
          },
          "preOrderDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "For pre-order purchases, the expected date this product will be available to the shopper."
          },
          "preOrderPurchase" : {
            "type" : "boolean",
            "description" : "Indicator for whether this transaction is for pre-ordering a product."
          },
          "preOrderPurchaseInd" : {
            "type" : "string",
            "description" : "Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.",
            "x-addedInVersion" : "68"
          },
          "reorderItems" : {
            "type" : "boolean",
            "description" : "Indicator for whether the shopper has already purchased the same items in the past."
          },
          "reorderItemsInd" : {
            "type" : "string",
            "description" : "Indicates whether the cardholder is reordering previously purchased merchandise.",
            "x-addedInVersion" : "68"
          },
          "shipIndicator" : {
            "type" : "string",
            "description" : "Indicates shipping method chosen for the transaction.",
            "x-addedInVersion" : "68"
          }
        }
      },
      "MobilePayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "type" : {
            "type" : "string",
            "default" : "mobilepay",
            "description" : "**mobilepay**",
            "enum" : [ "mobilepay" ]
          }
        },
        "title" : "MobilePay"
      },
      "MolPayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "issuer" : {
            "type" : "string",
            "description" : "The shopper's bank. Specify this with the issuer value that corresponds to this bank."
          },
          "type" : {
            "type" : "string",
            "description" : "**molpay**",
            "enum" : [ "molpay_ebanking_fpx_MY", "molpay_ebanking_TH" ]
          }
        },
        "required" : [ "issuer", "type" ],
        "title" : "MOLPay"
      },
      "Name" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "firstName" : {
            "type" : "string",
            "description" : "The first name.",
            "maxLength" : 80
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name.",
            "maxLength" : 80
          }
        },
        "required" : [ "firstName", "lastName" ]
      },
      "OpenInvoiceDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "billingAddress" : {
            "type" : "string",
            "description" : "The address where to send the invoice."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "deliveryAddress" : {
            "type" : "string",
            "description" : "The address where the goods should be delivered."
          },
          "personalDetails" : {
            "type" : "string",
            "description" : "Shopper name, date of birth, phone number, and email address."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "openinvoice",
            "description" : "**openinvoice**",
            "enum" : [ "openinvoice", "afterpay_directdebit", "atome_pos" ]
          }
        },
        "title" : "Open Invoice"
      },
      "PayByBankAISDirectDebitDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "paybybank_AIS_DD",
            "description" : "**paybybank_AIS_DD**",
            "enum" : [ "paybybank_AIS_DD" ]
          }
        },
        "required" : [ "type" ],
        "title" : "Pay By Bank AIS Direct Debit"
      },
      "PayByBankDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "issuer" : {
            "type" : "string",
            "description" : "The PayByBank issuer value of the shopper's selected bank."
          },
          "type" : {
            "type" : "string",
            "default" : "paybybank",
            "description" : "**paybybank**",
            "enum" : [ "paybybank" ]
          }
        },
        "required" : [ "type" ],
        "title" : "PayByBank"
      },
      "PayPalDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "orderID" : {
            "type" : "string",
            "description" : "The unique ID associated with the order."
          },
          "payeePreferred" : {
            "type" : "string",
            "description" : "IMMEDIATE_PAYMENT_REQUIRED or UNRESTRICTED"
          },
          "payerID" : {
            "type" : "string",
            "description" : "The unique ID associated with the payer."
          },
          "payerSelected" : {
            "type" : "string",
            "description" : "PAYPAL or PAYPAL_CREDIT"
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "subtype" : {
            "type" : "string",
            "description" : "The type of flow to initiate.",
            "enum" : [ "express", "redirect", "sdk" ]
          },
          "type" : {
            "type" : "string",
            "default" : "paypal",
            "description" : "**paypal**",
            "enum" : [ "paypal" ]
          }
        },
        "required" : [ "type" ],
        "title" : "PayPal"
      },
      "PayPayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "paypay",
            "description" : "**paypay**",
            "enum" : [ "paypay" ]
          }
        },
        "title" : "PayPay"
      },
      "PayToDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "shopperAccountIdentifier" : {
            "type" : "string",
            "description" : "The shopper's banking details or payId reference, used to complete payment."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "payto",
            "description" : "**payto**",
            "enum" : [ "payto" ]
          }
        },
        "title" : "PayTo"
      },
      "PayUUpiDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "shopperNotificationReference" : {
            "type" : "string",
            "description" : "The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "payu_IN_upi",
            "description" : "**payu_IN_upi**",
            "enum" : [ "payu_IN_upi" ]
          },
          "virtualPaymentAddress" : {
            "type" : "string",
            "description" : "The virtual payment address for UPI."
          }
        },
        "required" : [ "type" ],
        "title" : "PayU"
      },
      "PayWithGoogleDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "googlePayToken" : {
            "type" : "string",
            "description" : "The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.",
            "maxLength" : 5000
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "threeDS2SdkVersion" : {
            "type" : "string",
            "description" : "Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.",
            "maxLength" : 12
          },
          "type" : {
            "type" : "string",
            "default" : "paywithgoogle",
            "description" : "**paywithgoogle**",
            "enum" : [ "paywithgoogle" ]
          }
        },
        "required" : [ "googlePayToken" ],
        "title" : "Google Pay"
      },
      "PayWithGoogleDonations" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "googlePayToken" : {
            "type" : "string",
            "description" : "The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.",
            "maxLength" : 5000
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "threeDS2SdkVersion" : {
            "type" : "string",
            "description" : "Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.",
            "maxLength" : 12
          },
          "type" : {
            "type" : "string",
            "default" : "paywithgoogle",
            "description" : "**paywithgoogle**",
            "enum" : [ "paywithgoogle" ]
          }
        },
        "required" : [ "googlePayToken" ],
        "title" : "Google Pay"
      },
      "Payment" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "Authorised amount in the transaction."
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/ResponsePaymentMethod",
            "description" : "Only returned for `resultCode`: **Authorised**. \nDetails about the payment method used in the transaction."
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character reference associated with the transaction/request. This value is globally unique. Use this reference when you communicate with us about this request."
          },
          "resultCode" : {
            "type" : "string",
            "description" : "The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).\n\nPossible values:\n\n* **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.\n",
            "enum" : [ "Authorised" ]
          }
        }
      },
      "PaymentAmountUpdateRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The updated amount. The `currency` must match the currency used in authorisation."
          },
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions)."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the amount update. Possible values: \n* **delayedCharge** \n* **noShow**",
            "enum" : [ "delayedCharge", "noShow" ]
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the amount update request. Maximum length: 80 characters."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/process-payments) or [platforms](https://docs.adyen.com/platforms/process-payments).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            }
          }
        },
        "required" : [ "amount", "merchantAccount" ]
      },
      "PaymentAmountUpdateResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The updated amount."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "paymentPspReference" : {
            "type" : "string",
            "description" : "The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the payment to update. "
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character reference associated with the amount update request."
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for the amount update. Possible values: \n* **DelayedCharge** \n* **NoShow**",
            "enum" : [ "delayedCharge", "noShow" ]
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the amount update request. Maximum length: 80 characters."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/process-payments) or [platforms](https://docs.adyen.com/platforms/process-payments).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "The status of your request. This will always have the value **received**.",
            "enum" : [ "received" ]
          }
        },
        "required" : [ "amount", "merchantAccount", "paymentPspReference", "pspReference", "reference", "status" ]
      },
      "PaymentCancelRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions)."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the cancel request. Maximum length: 80 characters."
          }
        },
        "required" : [ "merchantAccount" ]
      },
      "PaymentCancelResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "paymentPspReference" : {
            "type" : "string",
            "description" : "The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the payment to cancel. "
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character reference associated with the cancel request."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the cancel request."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of your request. This will always have the value **received**.",
            "enum" : [ "received" ]
          }
        },
        "required" : [ "merchantAccount", "paymentPspReference", "pspReference", "status" ]
      },
      "PaymentCaptureRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount that you want to capture. The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount."
          },
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions)."
          },
          "lineItems" : {
            "type" : "array",
            "description" : "Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            }
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the capture request. Maximum length: 80 characters."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/online-payments/split-payments/).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            }
          }
        },
        "required" : [ "amount", "merchantAccount" ]
      },
      "PaymentCaptureResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The captured amount."
          },
          "lineItems" : {
            "type" : "array",
            "description" : "Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            }
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "paymentPspReference" : {
            "type" : "string",
            "description" : "The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the payment to capture. "
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character reference associated with the capture request."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the capture request."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/online-payments/split-payments/).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "The status of your request. This will always have the value **received**.",
            "enum" : [ "received" ]
          }
        },
        "required" : [ "amount", "merchantAccount", "paymentPspReference", "pspReference", "status" ]
      },
      "PaymentCompletionDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "MD" : {
            "type" : "string",
            "description" : "A payment session identifier returned by the card issuer.",
            "maxLength" : 20000
          },
          "PaReq" : {
            "type" : "string",
            "description" : "(3D) Payment Authentication Request data for the card issuer.",
            "maxLength" : 20000
          },
          "PaRes" : {
            "type" : "string",
            "description" : "(3D) Payment Authentication Response data by the card issuer.",
            "maxLength" : 20000
          },
          "authorization_token" : {
            "type" : "string"
          },
          "billingToken" : {
            "type" : "string",
            "description" : "PayPal-generated token for recurring payments."
          },
          "cupsecureplus.smscode" : {
            "type" : "string",
            "description" : "The SMS verification code collected from the shopper."
          },
          "facilitatorAccessToken" : {
            "type" : "string",
            "description" : "PayPal-generated third party access token."
          },
          "oneTimePasscode" : {
            "type" : "string",
            "description" : "A random number sent to the mobile phone number of the shopper to verify the payment."
          },
          "orderID" : {
            "type" : "string",
            "description" : "PayPal-assigned ID for the order."
          },
          "payerID" : {
            "type" : "string",
            "description" : "PayPal-assigned ID for the payer (shopper)."
          },
          "payload" : {
            "type" : "string",
            "description" : "Payload appended to the `returnURL` as a result of the redirect.",
            "maxLength" : 20000
          },
          "paymentID" : {
            "type" : "string",
            "description" : "PayPal-generated ID for the payment."
          },
          "paymentStatus" : {
            "type" : "string",
            "description" : "Value passed from the WeChat MiniProgram `wx.requestPayment` **complete** callback. Possible values: any value starting with `requestPayment:`."
          },
          "redirectResult" : {
            "type" : "string",
            "description" : "The result of the redirect as appended to the `returnURL`.",
            "maxLength" : 20000
          },
          "resultCode" : {
            "type" : "string",
            "description" : "Value you received from the WeChat Pay SDK."
          },
          "returnUrlQueryString" : {
            "type" : "string",
            "description" : "The query string as appended to the `returnURL` when using direct issuer links .",
            "maxLength" : 20000
          },
          "threeDSResult" : {
            "type" : "string",
            "description" : "Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: `transStatus`, `authorisationToken`.",
            "maxLength" : 50000
          },
          "threeds2.challengeResult" : {
            "type" : "string",
            "description" : "Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `transStatus`.",
            "maxLength" : 50000
          },
          "threeds2.fingerprint" : {
            "type" : "string",
            "description" : "Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `threeDSCompInd`.",
            "maxLength" : 100000
          },
          "vaultToken" : {
            "type" : "string",
            "description" : "PayPalv2-generated token for recurring payments."
          }
        }
      },
      "PaymentDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "type" : {
            "type" : "string",
            "description" : "The payment method type.",
            "enum" : [ "alipay", "multibanco", "bankTransfer_IBAN", "paybright", "paynow", "affirm_pos", "trustly", "trustlyvector", "oney", "facilypay", "facilypay_3x", "facilypay_4x", "facilypay_6x", "facilypay_10x", "facilypay_12x", "unionpay", "kcp_banktransfer", "kcp_payco", "kcp_creditcard", "wechatpaySDK", "wechatpayQR", "wechatpayWeb", "molpay_boost", "wallet_IN", "payu_IN_cashcard", "payu_IN_nb", "upi_qr", "paytm", "molpay_ebanking_VN", "molpay_ebanking_MY", "molpay_ebanking_direct_MY", "swish", "bizum", "walley", "walley_b2b", "alma", "paypo", "scalapay", "scalapay_3x", "scalapay_4x", "molpay_fpx", "payme", "payme_pos", "konbini", "directEbanking", "boletobancario", "neteller", "cashticket", "ikano", "karenmillen", "oasis", "warehouse", "primeiropay_boleto", "mada", "benefit", "knet", "omannet", "gopay_wallet", "kcp_naverpay", "onlinebanking_IN", "fawry", "atome", "moneybookers", "naps", "nordea", "boletobancario_bradesco", "boletobancario_itau", "boletobancario_santander", "boletobancario_bancodobrasil", "boletobancario_hsbc", "molpay_maybank2u", "molpay_cimb", "molpay_rhb", "molpay_amb", "molpay_hlb", "molpay_affin_epg", "molpay_bankislam", "molpay_publicbank", "fpx_agrobank", "touchngo", "maybank2u_mae", "duitnow", "promptpay", "twint_pos", "alipay_hk", "alipay_hk_web", "alipay_hk_wap", "alipay_wap", "balanceplatform" ]
          }
        },
        "title" : "Payment Details"
      },
      "PaymentDetailsRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "details" : {
            "$ref" : "#/components/schemas/PaymentCompletionDetails",
            "description" : "Use this collection to submit the details that were returned as a result of the `/payments` call."
          },
          "paymentData" : {
            "type" : "string",
            "description" : "Encoded payment data. For [authorizing a payment after using 3D Secure 2 Authentication-only](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only/#authorise-the-payment-with-adyen):\n\nIf you received `resultCode`: **AuthenticationNotRequired** in the `/payments` response, use the `threeDSPaymentData` from the same response.\n\nIf you received `resultCode`: **AuthenticationFinished** in the `/payments` response, use the `action.paymentData` from the same response.",
            "maxLength" : 200000
          },
          "threeDSAuthenticationOnly" : {
            "type" : "boolean",
            "description" : "Change the `authenticationOnly` indicator originally set in the `/payments` request. Only needs to be set if you want to modify the value set previously.",
            "x-addedInVersion" : "40"
          }
        },
        "required" : [ "details" ]
      },
      "PaymentDetailsResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "action" : {
            "description" : "Action to be taken for completing the payment. When returned, only the 3D Secure action is needed in most cases.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/CheckoutThreeDS2Action"
            } ],
            "x-addedInVersion" : "49"
          },
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/ResponseAdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataBillingAddress"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataCard"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataDomesticError"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataInstallments"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataNetworkTokens"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataSepa"
            } ]
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "Authorised amount in the transaction.",
            "x-addedInVersion" : "52"
          },
          "donationToken" : {
            "type" : "string",
            "description" : "Donation Token containing payment details for Adyen Giving.",
            "x-addedInVersion" : "66"
          },
          "fraudResult" : {
            "$ref" : "#/components/schemas/FraudResult",
            "description" : "The fraud result properties of the payment."
          },
          "merchantReference" : {
            "type" : "string",
            "description" : "The reference used during the /payments request.",
            "x-addedInVersion" : "49"
          },
          "order" : {
            "$ref" : "#/components/schemas/CheckoutOrderResponse",
            "description" : "Contains updated information regarding the order in case order information was provided in the request."
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request."
          },
          "refusalReason" : {
            "type" : "string",
            "description" : "If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n\nFor more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons)."
          },
          "refusalReasonCode" : {
            "type" : "string",
            "description" : "Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).",
            "x-addedInVersion" : "37"
          },
          "resultCode" : {
            "type" : "string",
            "description" : "The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).\n\nPossible values:\n\n* **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.\n* **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only).\n* **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.\n* **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.\n* **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.\n* **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **PartiallyAuthorised** – The payment has been authorised for a partial amount.\nThis happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds.\n* **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment.\n* **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment.\n* **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments.\n* **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation.\n* **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.",
            "enum" : [ "AuthenticationFinished", "AuthenticationNotRequired", "Authorised", "Cancelled", "ChallengeShopper", "Error", "IdentifyShopper", "PartiallyAuthorised", "Pending", "PresentToShopper", "Received", "RedirectShopper", "Refused", "Success" ]
          },
          "shopperLocale" : {
            "type" : "string",
            "description" : "The shopperLocale."
          },
          "threeDS2ResponseData" : {
            "$ref" : "#/components/schemas/ThreeDS2ResponseData",
            "description" : "Response of the 3D Secure 2 authentication.",
            "x-addedInVersion" : "67"
          },
          "threeDS2Result" : {
            "$ref" : "#/components/schemas/ThreeDS2Result",
            "description" : "Result of the 3D Secure 2 authentication.",
            "x-addedInVersion" : "41"
          },
          "threeDSPaymentData" : {
            "type" : "string",
            "description" : "When non-empty, contains a value that you must submit to the `/payments/details` endpoint as `paymentData`.",
            "x-addedInVersion" : "67"
          }
        }
      },
      "PaymentLinkRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "allowedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"allowedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            }
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The payment amount and currency."
          },
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions)."
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/Address",
            "description" : "The address where to send the invoice."
          },
          "blockedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"blockedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            }
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The shopper's two-letter country code.",
            "maxLength" : 100
          },
          "deliverAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time when the purchased goods should be delivered.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**."
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/Address",
            "description" : "The address where the purchased goods should be delivered."
          },
          "description" : {
            "type" : "string",
            "description" : "A short description visible on the payment page.\nMaximum length: 280 characters."
          },
          "expiresAt" : {
            "type" : "string",
            "description" : "The date when the payment link expires.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format with time zone designator **Z**: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30Z**.\n\nThe maximum expiry date is 70 days after the payment link is created.\n\nIf not provided, the payment link expires 24 hours after it was created."
          },
          "fundOrigin" : {
            "$ref" : "#/components/schemas/FundOrigin",
            "description" : "The person or entity funding the money."
          },
          "fundRecipient" : {
            "$ref" : "#/components/schemas/FundRecipient",
            "description" : "the person or entity receiving the money"
          },
          "installmentOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/InstallmentOption"
            },
            "description" : "A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options."
          },
          "lineItems" : {
            "type" : "array",
            "description" : "Price and product information about the purchased items, to be included on the invoice sent to the shopper.\nThis parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, Riverty, and Zip.",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            }
          },
          "manualCapture" : {
            "type" : "boolean",
            "description" : "Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture)."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier for which the payment link is created."
          },
          "merchantOrderReference" : {
            "type" : "string",
            "description" : "This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.",
            "maxLength" : 1000
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata consists of entries, each of which includes a key and a value.\nLimitations:\n* Maximum 20 key-value pairs per request. Otherwise, error \"177\" occurs: \"Metadata size exceeds limit\"\n* Maximum 20 characters per key. Otherwise, error \"178\" occurs: \"Metadata key size exceeds limit\"\n* A key cannot have the name `checkout.linkId`. Any value that you provide with this key is going to be replaced by the real payment link ID.",
            "maxLength" : 80
          },
          "platformChargebackLogic" : {
            "$ref" : "#/components/schemas/PlatformChargebackLogic",
            "description" : "Dictates the behavior of how a potential chargeback should be booked when using Adyen Platforms."
          },
          "recurringProcessingModel" : {
            "type" : "string",
            "description" : "Defines a recurring payment type. Required when `storePaymentMethodMode` is set to **askForConsent** or **enabled**.\nPossible values:\n* **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
            "enum" : [ "CardOnFile", "Subscription", "UnscheduledCardOnFile" ],
            "maxLength" : 50
          },
          "reference" : {
            "type" : "string",
            "description" : "A reference that is used to uniquely identify the payment in future communications about the payment status."
          },
          "requiredShopperFields" : {
            "type" : "array",
            "description" : "List of fields that the shopper has to provide on the payment page before completing the payment. For more information, refer to [Provide shopper information](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#shopper-information).\n\nPossible values:\n* **billingAddress** – The address where to send the invoice.\n* **deliveryAddress** – The address where the purchased goods should be delivered.\n* **shopperEmail** – The shopper's email address.\n* **shopperName** – The shopper's full name.\n* **telephoneNumber** – The shopper's phone number.\n",
            "items" : {
              "type" : "string",
              "enum" : [ "billingAddress", "deliveryAddress", "shopperEmail", "shopperName", "telephoneNumber" ]
            },
            "x-addedInVersion" : "67"
          },
          "returnUrl" : {
            "type" : "string",
            "description" : "Website URL used for redirection after payment is completed.\nIf provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.",
            "maxLength" : 8000
          },
          "reusable" : {
            "type" : "boolean",
            "description" : "Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only."
          },
          "riskData" : {
            "$ref" : "#/components/schemas/RiskData",
            "description" : "Any risk-related settings to apply to the payment.",
            "x-addedInVersion" : "65"
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email address.",
            "maxLength" : 500
          },
          "shopperLocale" : {
            "type" : "string",
            "description" : "The language to be used in the payment page, specified by a combination of a language and country code. For example, `en-US`.\n\nFor a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#language).",
            "maxLength" : 32
          },
          "shopperName" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program."
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters.\n> Your reference must not include personally identifiable information (PII) such as name or email address.",
            "maxLength" : 256,
            "minLength" : 3
          },
          "showRemovePaymentMethodButton" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Set to **false** to hide the button that lets the shopper remove a stored payment method."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            }
          },
          "store" : {
            "type" : "string",
            "description" : "The physical store, for which this payment is processed."
          },
          "storePaymentMethodMode" : {
            "type" : "string",
            "description" : "Indicates if the details of the payment method will be stored for the shopper. Possible values:\n* **disabled** – No details will be stored (default).\n* **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored.\n* **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent. \n When set to **askForConsent** or **enabled**, you must also include the `recurringProcessingModel` parameter.",
            "enum" : [ "askForConsent", "disabled", "enabled" ],
            "x-addedInVersion" : "68"
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The shopper's telephone number.\n The phone number must include a plus sign (+) and a country code (1-3 digits), followed by the number (4-15 digits). If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`.",
            "maxLength" : 32,
            "x-addedInVersion" : "68"
          },
          "themeId" : {
            "type" : "string",
            "description" : "A [theme](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#themes) to customize the appearance of the payment page. If not specified, the payment page is rendered according to the theme set as default in your Customer Area.",
            "x-addedInVersion" : "67"
          },
          "threeDS2RequestData" : {
            "$ref" : "#/components/schemas/CheckoutSessionThreeDS2RequestData",
            "description" : "The cardholder phone number need to be part of the authentication message for payment data. It is a requirement for Visa Secure Authentication Data Field Mandate effective August 2024."
          }
        },
        "required" : [ "amount", "merchantAccount", "reference" ]
      },
      "PaymentLinkResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "allowedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"allowedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            }
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The payment amount and currency."
          },
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions)."
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/Address",
            "description" : "The address where to send the invoice."
          },
          "blockedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"blockedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            }
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The shopper's two-letter country code.",
            "maxLength" : 100
          },
          "deliverAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time when the purchased goods should be delivered.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**."
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/Address",
            "description" : "The address where the purchased goods should be delivered."
          },
          "description" : {
            "type" : "string",
            "description" : "A short description visible on the payment page.\nMaximum length: 280 characters."
          },
          "expiresAt" : {
            "type" : "string",
            "description" : "The date when the payment link expires.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format with time zone designator **Z**: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30Z**.\n\nThe maximum expiry date is 70 days after the payment link is created.\n\nIf not provided, the payment link expires 24 hours after it was created."
          },
          "fundOrigin" : {
            "$ref" : "#/components/schemas/FundOrigin",
            "description" : "The person or entity funding the money."
          },
          "fundRecipient" : {
            "$ref" : "#/components/schemas/FundRecipient",
            "description" : "the person or entity receiving the money"
          },
          "id" : {
            "type" : "string",
            "description" : "A unique identifier of the payment link.",
            "readOnly" : true,
            "x-addedInVersion" : "51"
          },
          "installmentOptions" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/InstallmentOption"
            },
            "description" : "A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options."
          },
          "lineItems" : {
            "type" : "array",
            "description" : "Price and product information about the purchased items, to be included on the invoice sent to the shopper.\nThis parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, Riverty, and Zip.",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            }
          },
          "manualCapture" : {
            "type" : "boolean",
            "description" : "Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture)."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier for which the payment link is created."
          },
          "merchantOrderReference" : {
            "type" : "string",
            "description" : "This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.",
            "maxLength" : 1000
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata consists of entries, each of which includes a key and a value.\nLimitations:\n* Maximum 20 key-value pairs per request. Otherwise, error \"177\" occurs: \"Metadata size exceeds limit\"\n* Maximum 20 characters per key. Otherwise, error \"178\" occurs: \"Metadata key size exceeds limit\"\n* A key cannot have the name `checkout.linkId`. Any value that you provide with this key is going to be replaced by the real payment link ID.",
            "maxLength" : 80
          },
          "platformChargebackLogic" : {
            "$ref" : "#/components/schemas/PlatformChargebackLogic",
            "description" : "Dictates the behavior of how a potential chargeback should be booked when using Adyen Platforms."
          },
          "recurringProcessingModel" : {
            "type" : "string",
            "description" : "Defines a recurring payment type. Required when `storePaymentMethodMode` is set to **askForConsent** or **enabled**.\nPossible values:\n* **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
            "enum" : [ "CardOnFile", "Subscription", "UnscheduledCardOnFile" ],
            "maxLength" : 50
          },
          "reference" : {
            "type" : "string",
            "description" : "A reference that is used to uniquely identify the payment in future communications about the payment status."
          },
          "requiredShopperFields" : {
            "type" : "array",
            "description" : "List of fields that the shopper has to provide on the payment page before completing the payment. For more information, refer to [Provide shopper information](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#shopper-information).\n\nPossible values:\n* **billingAddress** – The address where to send the invoice.\n* **deliveryAddress** – The address where the purchased goods should be delivered.\n* **shopperEmail** – The shopper's email address.\n* **shopperName** – The shopper's full name.\n* **telephoneNumber** – The shopper's phone number.\n",
            "items" : {
              "type" : "string",
              "enum" : [ "billingAddress", "deliveryAddress", "shopperEmail", "shopperName", "telephoneNumber" ]
            },
            "x-addedInVersion" : "67"
          },
          "returnUrl" : {
            "type" : "string",
            "description" : "Website URL used for redirection after payment is completed.\nIf provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.",
            "maxLength" : 8000
          },
          "reusable" : {
            "type" : "boolean",
            "description" : "Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only."
          },
          "riskData" : {
            "$ref" : "#/components/schemas/RiskData",
            "description" : "Any risk-related settings to apply to the payment.",
            "x-addedInVersion" : "65"
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email address.",
            "maxLength" : 500
          },
          "shopperLocale" : {
            "type" : "string",
            "description" : "The language to be used in the payment page, specified by a combination of a language and country code. For example, `en-US`.\n\nFor a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#language).",
            "maxLength" : 32
          },
          "shopperName" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program."
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters.\n> Your reference must not include personally identifiable information (PII) such as name or email address.",
            "maxLength" : 256,
            "minLength" : 3
          },
          "showRemovePaymentMethodButton" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Set to **false** to hide the button that lets the shopper remove a stored payment method."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the payment link. Possible values:\n* **active**: The link can be used to make payments.\n* **expired**: The expiry date for the payment link has passed. Shoppers can no longer use the link to make payments.\n* **completed**: The shopper completed the payment.\n* **paymentPending**: The shopper is in the process of making the payment. Applies to payment methods with an asynchronous flow.",
            "enum" : [ "active", "completed", "expired", "paid", "paymentPending" ]
          },
          "store" : {
            "type" : "string",
            "description" : "The physical store, for which this payment is processed."
          },
          "storePaymentMethodMode" : {
            "type" : "string",
            "description" : "Indicates if the details of the payment method will be stored for the shopper. Possible values:\n* **disabled** – No details will be stored (default).\n* **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored.\n* **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent. \n When set to **askForConsent** or **enabled**, you must also include the `recurringProcessingModel` parameter.",
            "enum" : [ "askForConsent", "disabled", "enabled" ],
            "x-addedInVersion" : "68"
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The shopper's telephone number.\n The phone number must include a plus sign (+) and a country code (1-3 digits), followed by the number (4-15 digits). If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`.",
            "maxLength" : 32,
            "x-addedInVersion" : "68"
          },
          "themeId" : {
            "type" : "string",
            "description" : "A [theme](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#themes) to customize the appearance of the payment page. If not specified, the payment page is rendered according to the theme set as default in your Customer Area.",
            "x-addedInVersion" : "67"
          },
          "threeDS2RequestData" : {
            "$ref" : "#/components/schemas/CheckoutSessionThreeDS2RequestData",
            "description" : "The cardholder phone number need to be part of the authentication message for payment data. It is a requirement for Visa Secure Authentication Data Field Mandate effective August 2024."
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date when the payment link status was updated.\n\n[ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**."
          },
          "url" : {
            "type" : "string",
            "description" : "The URL at which the shopper can complete the payment.",
            "readOnly" : true
          }
        },
        "required" : [ "amount", "id", "merchantAccount", "reference", "status", "url" ]
      },
      "PaymentMethod" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "apps" : {
            "type" : "array",
            "description" : "A list of apps for this payment method.",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodUPIApps"
            }
          },
          "brand" : {
            "type" : "string",
            "description" : "Brand for the selected gift card. For example: plastix, hmclub.",
            "x-addedInVersion" : "65"
          },
          "brands" : {
            "type" : "array",
            "description" : "List of possible brands. For example: visa, mc.",
            "items" : {
              "type" : "string"
            },
            "x-addedInVersion" : "49"
          },
          "configuration" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The configuration of the payment method."
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source of the payment method.",
            "enum" : [ "credit", "debit" ],
            "x-addedInVersion" : "53"
          },
          "group" : {
            "$ref" : "#/components/schemas/PaymentMethodGroup",
            "description" : "The group where this payment method belongs to."
          },
          "inputDetails" : {
            "type" : "array",
            "deprecated" : true,
            "description" : "All input details to be provided to complete the payment with this payment method.",
            "items" : {
              "$ref" : "#/components/schemas/InputDetail"
            }
          },
          "issuers" : {
            "type" : "array",
            "description" : "A list of issuers for this payment method.",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethodIssuer"
            },
            "x-addedInVersion" : "68"
          },
          "name" : {
            "type" : "string",
            "description" : "The displayable name of this payment method."
          },
          "promoted" : {
            "type" : "boolean",
            "description" : "Indicates whether this payment method should be promoted or not."
          },
          "type" : {
            "type" : "string",
            "description" : "The unique payment method code."
          }
        }
      },
      "PaymentMethodGroup" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the group."
          },
          "paymentMethodData" : {
            "type" : "string",
            "description" : "Echo data to be used if the payment method is displayed as part of this group."
          },
          "type" : {
            "type" : "string",
            "description" : "The unique code of the group."
          }
        }
      },
      "PaymentMethodIssuer" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "disabled" : {
            "type" : "boolean",
            "default" : false,
            "description" : "A boolean value indicating whether this issuer is unavailable. Can be `true` whenever the issuer is offline."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of this issuer, to submit in requests to /payments."
          },
          "name" : {
            "type" : "string",
            "description" : "A localized name of the issuer."
          }
        },
        "required" : [ "id", "name" ]
      },
      "PaymentMethodToStore" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "brand" : {
            "type" : "string",
            "description" : "Secondary brand of the card. For example: **plastix**, **hmclub**."
          },
          "cvc" : {
            "type" : "string",
            "description" : "The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "encryptedCard" : {
            "type" : "string",
            "description" : "The encrypted card.",
            "maxLength" : 40000
          },
          "encryptedCardNumber" : {
            "type" : "string",
            "description" : "The encrypted card number.",
            "maxLength" : 15000
          },
          "encryptedExpiryMonth" : {
            "type" : "string",
            "description" : "The encrypted card expiry month.",
            "maxLength" : 15000
          },
          "encryptedExpiryYear" : {
            "type" : "string",
            "description" : "The encrypted card expiry year.",
            "maxLength" : 15000
          },
          "encryptedSecurityCode" : {
            "type" : "string",
            "description" : "The encrypted card verification code.",
            "maxLength" : 15000
          },
          "expiryMonth" : {
            "type" : "string",
            "description" : "The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "expiryYear" : {
            "type" : "string",
            "description" : "The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "holderName" : {
            "type" : "string",
            "description" : "The name of the card holder."
          },
          "number" : {
            "type" : "string",
            "description" : "The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide)."
          },
          "type" : {
            "type" : "string",
            "description" : "Set to **scheme**."
          }
        }
      },
      "PaymentMethodUPIApps" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of this app, to submit in requests to /payments."
          },
          "name" : {
            "type" : "string",
            "description" : "A localized name of the app."
          }
        },
        "required" : [ "id", "name" ]
      },
      "PaymentMethodsRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/AdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataAirline"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCarRental"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLevel23"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLodging"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpenInvoice"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRatepay"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRetry"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRisk"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRiskStandalone"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataSubMerchant"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataTemporaryServices"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataWallets"
            } ]
          },
          "allowedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"allowedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            },
            "x-addedInVersion" : "37"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero)."
          },
          "blockedPaymentMethods" : {
            "type" : "array",
            "description" : "List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).\n\nExample: `\"blockedPaymentMethods\":[\"ideal\",\"applepay\"]`",
            "items" : {
              "type" : "string"
            },
            "x-addedInVersion" : "37"
          },
          "browserInfo" : {
            "$ref" : "#/components/schemas/BrowserInfo",
            "description" : "The shopper's browser information.\n> For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 2 redirect."
          },
          "channel" : {
            "type" : "string",
            "description" : "The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values:\n* iOS\n* Android\n* Web",
            "enum" : [ "iOS", "Android", "Web" ]
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The shopper's country code."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the transaction."
          },
          "order" : {
            "$ref" : "#/components/schemas/EncryptedOrderData",
            "description" : "The order information required for partial payments.",
            "x-addedInVersion" : "64"
          },
          "shopperConversionId" : {
            "type" : "string",
            "description" : "A unique ID that can be used to associate `/paymentMethods` and `/payments` requests with the same shopper transaction, offering insights into conversion rates.",
            "maxLength" : 256
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > Required for Visa and JCB transactions that require 3D Secure 2 authentication if you did not include the `telephoneNumber`."
          },
          "shopperIP" : {
            "type" : "string",
            "description" : "The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication for all web and mobile integrations, if you did not include the `shopperEmail`. For native mobile integrations, the field is required to support cases where authentication is routed to the redirect flow. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new)."
          },
          "shopperLocale" : {
            "type" : "string",
            "description" : "The combination of a language code and a country code to specify the language to be used in the payment.",
            "x-addedInVersion" : "7"
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters.\n> Your reference must not include personally identifiable information (PII) such as name or email address."
          },
          "splitCardFundingSources" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Boolean value indicating whether the card payment method should be split into separate debit and credit options.",
            "x-addedInVersion" : "53"
          },
          "store" : {
            "type" : "string",
            "description" : "Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.",
            "maxLength" : 16,
            "minLength" : 1,
            "x-addedInVersion" : "23"
          },
          "storeFiltrationMode" : {
            "type" : "string",
            "description" : "Specifies how payment methods should be filtered based on the 'store' parameter:\n  - 'exclusive': Only payment methods belonging to the specified 'store' are returned.\n  - 'inclusive': Payment methods from the 'store' and those not associated with any other store are returned.",
            "enum" : [ "exclusive", "inclusive", "skipFilter" ]
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The shopper's telephone number.\n The phone number must include a plus sign (+) and a country code (1-3 digits), followed by the number (4-15 digits). If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`.",
            "x-addedInVersion" : "7"
          }
        },
        "required" : [ "merchantAccount" ]
      },
      "PaymentMethodsResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "paymentMethods" : {
            "type" : "array",
            "description" : "Detailed list of payment methods required to generate payment forms.",
            "items" : {
              "$ref" : "#/components/schemas/PaymentMethod"
            }
          },
          "storedPaymentMethods" : {
            "type" : "array",
            "description" : "List of all stored payment methods.",
            "items" : {
              "$ref" : "#/components/schemas/StoredPaymentMethod"
            },
            "x-addedInVersion" : "49"
          }
        }
      },
      "PaymentRefundRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount that you want to refund. The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount."
          },
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions)."
          },
          "capturePspReference" : {
            "type" : "string",
            "description" : "This is only available for PayPal refunds. The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the specific capture to refund."
          },
          "lineItems" : {
            "type" : "array",
            "description" : "Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            }
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "merchantRefundReason" : {
            "type" : "string",
            "description" : "The reason for the refund request.\n\nPossible values:\n\n* **FRAUD**\n\n* **CUSTOMER REQUEST**\n\n* **RETURN**\n\n* **DUPLICATE**\n\n* **OTHER**\n\n",
            "enum" : [ "FRAUD", "CUSTOMER REQUEST", "RETURN", "DUPLICATE", "OTHER" ],
            "nullable" : true
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the refund request. Maximum length: 80 characters."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/online-payments/split-payments/).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            }
          },
          "store" : {
            "type" : "string",
            "description" : "The online store or [physical store](https://docs.adyen.com/point-of-sale/design-your-integration/determine-account-structure/#create-stores) that is processing the refund. This must be the same as the store name configured in your Customer Area.  Otherwise, you get an error and the refund fails."
          }
        },
        "required" : [ "amount", "merchantAccount" ]
      },
      "PaymentRefundResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The refund amount."
          },
          "capturePspReference" : {
            "type" : "string",
            "description" : "This is only available for PayPal refunds. The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the specific capture to refund."
          },
          "lineItems" : {
            "type" : "array",
            "description" : "Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment).\n> This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            }
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "merchantRefundReason" : {
            "type" : "string",
            "description" : "Your reason for the refund request.",
            "enum" : [ "FRAUD", "CUSTOMER REQUEST", "RETURN", "DUPLICATE", "OTHER" ],
            "nullable" : true
          },
          "paymentPspReference" : {
            "type" : "string",
            "description" : "The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the payment to refund. "
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character reference associated with the refund request."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the refund request."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For more information, see how to process payments for [marketplaces](https://docs.adyen.com/marketplaces/split-payments) or [platforms](https://docs.adyen.com/platforms/online-payments/split-payments/).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "The status of your request. This will always have the value **received**.",
            "enum" : [ "received" ]
          },
          "store" : {
            "type" : "string",
            "description" : "The online store or [physical store](https://docs.adyen.com/point-of-sale/design-your-integration/determine-account-structure/#create-stores) that is processing the refund. This must be the same as the store name configured in your Customer Area.  Otherwise, you get an error and the refund fails."
          }
        },
        "required" : [ "amount", "merchantAccount", "paymentPspReference", "pspReference", "status" ]
      },
      "PaymentRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountInfo" : {
            "$ref" : "#/components/schemas/AccountInfo",
            "description" : "Shopper account information for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.",
            "x-addedInVersion" : "40"
          },
          "additionalAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification).\nRequired to be in the same currency as the `amount`. "
          },
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "This field contains additional data, which may be required for a particular payment request.\n\nThe `additionalData` object consists of entries, each of which includes the key and value.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/AdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataAirline"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCarRental"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLevel23"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataLodging"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpenInvoice"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRatepay"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRetry"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRisk"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataRiskStandalone"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataSubMerchant"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataTemporaryServices"
            }, {
              "$ref" : "#/components/schemas/AdditionalDataWallets"
            } ]
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero)."
          },
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).",
            "x-addedInVersion" : "40"
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/CheckoutBankAccount",
            "description" : "The details of the bank account, from which the payment should be made.\n> Either `bankAccount` or `card` field must be provided in a payment request."
          },
          "billingAddress" : {
            "$ref" : "#/components/schemas/BillingAddress",
            "description" : "The address where to send the invoice.\n> The `billingAddress` object is required in the following scenarios. Include all of the fields within this object.\n>* For 3D Secure 2 transactions in all browser-based and mobile implementations.\n>* For cross-border payouts to and from Canada."
          },
          "browserInfo" : {
            "$ref" : "#/components/schemas/BrowserInfo",
            "description" : "The shopper's browser information.\n> For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 2 redirect."
          },
          "captureDelayHours" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The delay between the authorisation and scheduled auto-capture, specified in hours."
          },
          "channel" : {
            "type" : "string",
            "description" : "The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.\n\nPossible values:\n* iOS\n* Android\n* Web",
            "enum" : [ "iOS", "Android", "Web" ]
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "Checkout attempt ID that corresponds to the Id generated by the client SDK for tracking user payment journey.",
            "maxLength" : 256
          },
          "company" : {
            "$ref" : "#/components/schemas/Company",
            "description" : "Information regarding the company.",
            "x-addedInVersion" : "32"
          },
          "conversionId" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.",
            "x-addedInVersion" : "49",
            "x-deprecatedInVersion" : "68",
            "x-deprecatedMessage" : "Use `checkoutAttemptId` instead"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The shopper country.\n\nFormat: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\nExample: NL or DE",
            "maxLength" : 100
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The shopper's date of birth.\n\nFormat [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD"
          },
          "dccQuote" : {
            "$ref" : "#/components/schemas/ForexQuote",
            "description" : "The forex quote as returned in the response of the forex service."
          },
          "deliveryAddress" : {
            "$ref" : "#/components/schemas/DeliveryAddress",
            "description" : "The address where the purchased goods should be delivered."
          },
          "deliveryDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the purchased goods should be delivered.\n\nFormat [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD\n\nExample: 2017-07-17T13:42:40.428+01:00"
          },
          "deviceFingerprint" : {
            "type" : "string",
            "description" : "A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).",
            "maxLength" : 5000
          },
          "enableOneClick" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future [one-click payments](https://docs.adyen.com/get-started-with-adyen/payment-glossary/#one-click-payments-definition).",
            "x-addedInVersion" : "32"
          },
          "enablePayOut" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be tokenized for payouts.",
            "x-addedInVersion" : "32"
          },
          "enableRecurring" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be stored for [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types) where the shopper is not present, such as subscription or automatic top-up payments.",
            "x-addedInVersion" : "32"
          },
          "entityType" : {
            "type" : "string",
            "description" : "The type of the entity the payment is processed for.",
            "enum" : [ "NaturalPerson", "CompanyName" ]
          },
          "fraudOffset" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "An integer value that is added to the normal fraud score. The value can be either positive or negative."
          },
          "fundOrigin" : {
            "$ref" : "#/components/schemas/FundOrigin",
            "description" : "The person or entity funding the money."
          },
          "fundRecipient" : {
            "$ref" : "#/components/schemas/FundRecipient",
            "description" : "the person or entity receiving the money"
          },
          "installments" : {
            "$ref" : "#/components/schemas/Installments",
            "description" : "Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments)."
          },
          "lineItems" : {
            "type" : "array",
            "description" : "Price and product information about the purchased items, to be included on the invoice sent to the shopper.\n> This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, Riverty, and Zip.",
            "items" : {
              "$ref" : "#/components/schemas/LineItem"
            },
            "x-addedInVersion" : "32"
          },
          "localizedShopperStatement" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The `localizedShopperStatement` field lets you use dynamic values for your shopper statement in a local character set.\nIf not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.\n\nAdyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using Japanese cards. This character set supports:\n\n* UTF-8 based Katakana, capital letters, numbers and special characters. \n* Half-width or full-width characters.",
            "x-addedInVersion" : "68"
          },
          "mandate" : {
            "$ref" : "#/components/schemas/Mandate",
            "description" : "The mandate details to initiate recurring transaction."
          },
          "mcc" : {
            "type" : "string",
            "description" : "The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the transaction."
          },
          "merchantOrderReference" : {
            "type" : "string",
            "description" : "This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle.\nThe same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations.\n> We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.",
            "maxLength" : 1000
          },
          "merchantRiskIndicator" : {
            "$ref" : "#/components/schemas/MerchantRiskIndicator",
            "description" : "Additional risk fields for 3D Secure 2.\n> For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.",
            "x-addedInVersion" : "40"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata consists of entries, each of which includes a key and a value.\nLimits:\n* Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\".\n* Maximum 20 characters per key.\n* Maximum 80 characters per value. "
          },
          "mpiData" : {
            "$ref" : "#/components/schemas/ThreeDSecureData",
            "description" : "Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires)."
          },
          "order" : {
            "$ref" : "#/components/schemas/EncryptedOrderData",
            "description" : "The order information required for partial payments."
          },
          "orderReference" : {
            "type" : "string",
            "description" : "When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead."
          },
          "origin" : {
            "type" : "string",
            "description" : "> Required for browser-based (`channel` **Web**) 3D Secure 2 transactions.Set this to the origin URL of the page where you are rendering the Drop-in/Component. Do not include subdirectories and a trailing slash.",
            "maxLength" : 80,
            "x-addedInVersion" : "40"
          },
          "paymentMethod" : {
            "description" : "The type and required details of a payment method to use.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/AchDetails"
            }, {
              "$ref" : "#/components/schemas/AffirmDetails"
            }, {
              "$ref" : "#/components/schemas/AfterpayDetails"
            }, {
              "$ref" : "#/components/schemas/AmazonPayDetails"
            }, {
              "$ref" : "#/components/schemas/AncvDetails"
            }, {
              "$ref" : "#/components/schemas/AndroidPayDetails"
            }, {
              "$ref" : "#/components/schemas/ApplePayDetails"
            }, {
              "$ref" : "#/components/schemas/BacsDirectDebitDetails"
            }, {
              "$ref" : "#/components/schemas/BillDeskDetails"
            }, {
              "$ref" : "#/components/schemas/BlikDetails"
            }, {
              "$ref" : "#/components/schemas/CardDetails"
            }, {
              "$ref" : "#/components/schemas/CashAppDetails"
            }, {
              "$ref" : "#/components/schemas/CellulantDetails"
            }, {
              "$ref" : "#/components/schemas/DokuDetails"
            }, {
              "$ref" : "#/components/schemas/DragonpayDetails"
            }, {
              "$ref" : "#/components/schemas/EBankingFinlandDetails"
            }, {
              "$ref" : "#/components/schemas/EcontextVoucherDetails"
            }, {
              "$ref" : "#/components/schemas/EftDetails"
            }, {
              "$ref" : "#/components/schemas/FastlaneDetails"
            }, {
              "$ref" : "#/components/schemas/GenericIssuerPaymentMethodDetails"
            }, {
              "$ref" : "#/components/schemas/GooglePayDetails"
            }, {
              "$ref" : "#/components/schemas/IdealDetails"
            }, {
              "$ref" : "#/components/schemas/KlarnaDetails"
            }, {
              "$ref" : "#/components/schemas/MasterpassDetails"
            }, {
              "$ref" : "#/components/schemas/MbwayDetails"
            }, {
              "$ref" : "#/components/schemas/MobilePayDetails"
            }, {
              "$ref" : "#/components/schemas/MolPayDetails"
            }, {
              "$ref" : "#/components/schemas/OpenInvoiceDetails"
            }, {
              "$ref" : "#/components/schemas/PayByBankAISDirectDebitDetails"
            }, {
              "$ref" : "#/components/schemas/PayByBankDetails"
            }, {
              "$ref" : "#/components/schemas/PayPalDetails"
            }, {
              "$ref" : "#/components/schemas/PayPayDetails"
            }, {
              "$ref" : "#/components/schemas/PayToDetails"
            }, {
              "$ref" : "#/components/schemas/PayUUpiDetails"
            }, {
              "$ref" : "#/components/schemas/PayWithGoogleDetails"
            }, {
              "$ref" : "#/components/schemas/PaymentDetails"
            }, {
              "$ref" : "#/components/schemas/PixDetails"
            }, {
              "$ref" : "#/components/schemas/PseDetails"
            }, {
              "$ref" : "#/components/schemas/RakutenPayDetails"
            }, {
              "$ref" : "#/components/schemas/RatepayDetails"
            }, {
              "$ref" : "#/components/schemas/RivertyDetails"
            }, {
              "$ref" : "#/components/schemas/SamsungPayDetails"
            }, {
              "$ref" : "#/components/schemas/SepaDirectDebitDetails"
            }, {
              "$ref" : "#/components/schemas/StoredPaymentMethodDetails"
            }, {
              "$ref" : "#/components/schemas/TwintDetails"
            }, {
              "$ref" : "#/components/schemas/UpiCollectDetails"
            }, {
              "$ref" : "#/components/schemas/UpiIntentDetails"
            }, {
              "$ref" : "#/components/schemas/VippsDetails"
            }, {
              "$ref" : "#/components/schemas/VisaCheckoutDetails"
            }, {
              "$ref" : "#/components/schemas/WeChatPayDetails"
            }, {
              "$ref" : "#/components/schemas/WeChatPayMiniProgramDetails"
            }, {
              "$ref" : "#/components/schemas/ZipDetails"
            } ]
          },
          "platformChargebackLogic" : {
            "$ref" : "#/components/schemas/PlatformChargebackLogic",
            "description" : "Defines how to book chargebacks when using [Adyen for Platforms](https://docs.adyen.com/adyen-for-platforms-model).",
            "x-addedInVersion" : "68"
          },
          "recurringExpiry" : {
            "type" : "string",
            "description" : "Date after which no further authorisations shall be performed. Only for 3D Secure 2."
          },
          "recurringFrequency" : {
            "type" : "string",
            "description" : "Minimum number of days between authorisations. Only for 3D Secure 2."
          },
          "recurringProcessingModel" : {
            "type" : "string",
            "description" : "Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details.\nAllowed values:\n* `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule.\n* `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.\n* `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.\n",
            "enum" : [ "CardOnFile", "Subscription", "UnscheduledCardOnFile" ],
            "x-addedInVersion" : "32"
          },
          "redirectFromIssuerMethod" : {
            "type" : "string",
            "description" : "Specifies the redirect method (GET or POST) when redirecting back from the issuer.",
            "x-addedInVersion" : "32"
          },
          "redirectToIssuerMethod" : {
            "type" : "string",
            "description" : "Specifies the redirect method (GET or POST) when redirecting to the issuer.",
            "x-addedInVersion" : "32"
          },
          "reference" : {
            "type" : "string",
            "description" : "The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens (\"-\").\nMaximum length: 80 characters."
          },
          "returnUrl" : {
            "type" : "string",
            "description" : "The URL to return to in case of a redirection.\nThe format depends on the channel. \n* For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number.\nExample: `https://your-company.example.com/checkout?shopperOrder=12xy`\n* For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app).\nExample: `my-app://`\n* For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters).\nExample: `my-app://your.package.name`\n\nIf the URL to return to includes non-ASCII characters, like spaces or special letters, URL encode the value.\n\nWe strongly recommend that you use a maximum of 1024 characters.\n\n> The URL must not include personally identifiable information (PII), for example name or email address.",
            "maxLength" : 8000
          },
          "riskData" : {
            "$ref" : "#/components/schemas/RiskData",
            "description" : "Contains risk data, such as client-side data, used to identify risk for a transaction."
          },
          "sessionValidity" : {
            "type" : "string",
            "description" : "The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.\n\nFor example: 2020-07-18T15:42:40.428+01:00"
          },
          "shopperConversionId" : {
            "type" : "string",
            "description" : "A unique ID that can be used to associate `/paymentMethods` and `/payments` requests with the same shopper transaction, offering insights into conversion rates.",
            "maxLength" : 256
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > Required for Visa and JCB transactions that require 3D Secure 2 authentication if you did not include the `telephoneNumber`."
          },
          "shopperIP" : {
            "type" : "string",
            "description" : "The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks).\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication for all web and mobile integrations, if you did not include the `shopperEmail`. For native mobile integrations, the field is required to support cases where authentication is routed to the redirect flow. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).",
            "maxLength" : 1000
          },
          "shopperInteraction" : {
            "type" : "string",
            "description" : "Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer.\nFor the web service API, Adyen assumes Ecommerce shopper interaction by default.\n\nThis field has the following possible values:\n* `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request.\n* `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment).\n* `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone.\n* `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.",
            "enum" : [ "Ecommerce", "ContAuth", "Moto", "POS" ]
          },
          "shopperLocale" : {
            "type" : "string",
            "description" : "The combination of a language code and a country code to specify the language to be used in the payment."
          },
          "shopperName" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "The shopper's full name."
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "Required for recurring payments. \nYour reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters.\n> Your reference must not include personally identifiable information (PII), for example name or email address.",
            "maxLength" : 256,
            "minLength" : 3
          },
          "shopperStatement" : {
            "type" : "string",
            "description" : "The text to be shown on the shopper's bank statement.\n We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.\n Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.",
            "maxLength" : 10000
          },
          "socialSecurityNumber" : {
            "type" : "string",
            "description" : "The shopper's social security number."
          },
          "splits" : {
            "type" : "array",
            "description" : "An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/platforms/process-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/classic-platforms/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).",
            "items" : {
              "$ref" : "#/components/schemas/Split"
            },
            "x-addedInVersion" : "37"
          },
          "store" : {
            "type" : "string",
            "description" : "Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.",
            "maxLength" : 64,
            "minLength" : 1
          },
          "storePaymentMethod" : {
            "type" : "boolean",
            "description" : "When true and `shopperReference` is provided, the payment details will be stored for future [recurring payments](https://docs.adyen.com/online-payments/tokenization/#recurring-payment-types).",
            "x-addedInVersion" : "49"
          },
          "subMerchants" : {
            "type" : "array",
            "description" : "This field contains additional information on the submerchant, who is onboarded to an acquirer through a payment facilitator or aggregator",
            "items" : {
              "$ref" : "#/components/schemas/SubMerchantInfoWrapper"
            }
          },
          "surcharge" : {
            "$ref" : "#/components/schemas/Surcharge",
            "description" : "The [surcharge](https://docs.adyen.com/online-payments/surcharge/) amount to apply to the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes). When you apply surcharge, include the surcharge in the `amount.value` field.\n\nReview our [Surcharge compliance guide](https://docs.adyen.com/development-resources/surcharge-compliance/) to learn about how to comply with regulatory requirements when applying surcharge."
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : "The shopper's telephone number.\n The phone number must include a plus sign (+) and a country code (1-3 digits), followed by the number (4-15 digits). If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`."
          },
          "threeDS2RequestData" : {
            "$ref" : "#/components/schemas/ThreeDS2RequestFields",
            "description" : "Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.",
            "x-addedInVersion" : "40"
          },
          "threeDSAuthenticationOnly" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Required to trigger the [authentication-only flow](https://docs.adyen.com/online-payments/3d-secure/authentication-only/). If set to **true**, you will only perform the 3D Secure 2 authentication, and will not proceed to the payment authorisation.Default: **false**.",
            "x-addedInVersion" : "50"
          },
          "trustedShopper" : {
            "type" : "boolean",
            "description" : "Set to true if the payment should be routed to a trusted MID.",
            "x-addedInVersion" : "37"
          }
        },
        "required" : [ "amount", "merchantAccount", "paymentMethod", "reference", "returnUrl" ]
      },
      "PaymentResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "action" : {
            "description" : "Action to be taken for completing the payment.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/CheckoutAwaitAction"
            }, {
              "$ref" : "#/components/schemas/CheckoutBankTransferAction"
            }, {
              "$ref" : "#/components/schemas/CheckoutNativeRedirectAction"
            }, {
              "$ref" : "#/components/schemas/CheckoutQrCodeAction"
            }, {
              "$ref" : "#/components/schemas/CheckoutRedirectAction"
            }, {
              "$ref" : "#/components/schemas/CheckoutSDKAction"
            }, {
              "$ref" : "#/components/schemas/CheckoutThreeDS2Action"
            }, {
              "$ref" : "#/components/schemas/CheckoutVoucherAction"
            } ],
            "x-addedInVersion" : "49"
          },
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Contains additional information about the payment. Some data fields are included only if you select them first: Go to **Customer Area** > **Developers** > **Additional data**.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/ResponseAdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataBillingAddress"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataCard"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataDomesticError"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataInstallments"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataNetworkTokens"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataSepa"
            } ]
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "Authorised amount in the transaction.",
            "x-addedInVersion" : "52"
          },
          "donationToken" : {
            "type" : "string",
            "description" : "Donation Token containing payment details for Adyen Giving.",
            "x-addedInVersion" : "66"
          },
          "fraudResult" : {
            "$ref" : "#/components/schemas/FraudResult",
            "description" : "The fraud result properties of the payment."
          },
          "merchantReference" : {
            "type" : "string",
            "description" : "The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement.\nIf you need to provide multiple references for a transaction, separate them with hyphens (\"-\").\nMaximum length: 80 characters.",
            "x-addedInVersion" : "49"
          },
          "order" : {
            "$ref" : "#/components/schemas/CheckoutOrderResponse",
            "description" : "Contains updated information regarding the order in case order information was provided in the request."
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.\n\n> For payment methods that require a redirect or additional action, you will get this value in the `/payments/details` response."
          },
          "refusalReason" : {
            "type" : "string",
            "description" : "If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.\n\nFor more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons)."
          },
          "refusalReasonCode" : {
            "type" : "string",
            "description" : "Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).",
            "x-addedInVersion" : "37"
          },
          "resultCode" : {
            "type" : "string",
            "description" : "The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).\n\nPossible values:\n\n* **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions.\n* **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only).\n* **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state.\n* **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state.\n* **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state.\n* **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions.\n* **PartiallyAuthorised** – The payment has been authorised for a partial amount.\nThis happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds.\n* **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment.\n* **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment.\n* **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments.\n* **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation.\n* **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.",
            "enum" : [ "AuthenticationFinished", "AuthenticationNotRequired", "Authorised", "Cancelled", "ChallengeShopper", "Error", "IdentifyShopper", "PartiallyAuthorised", "Pending", "PresentToShopper", "Received", "RedirectShopper", "Refused", "Success" ]
          },
          "threeDS2ResponseData" : {
            "$ref" : "#/components/schemas/ThreeDS2ResponseData",
            "description" : "Response of the 3D Secure 2 authentication.",
            "x-addedInVersion" : "67"
          },
          "threeDS2Result" : {
            "$ref" : "#/components/schemas/ThreeDS2Result",
            "description" : "Result of the 3D Secure 2 authentication.",
            "x-addedInVersion" : "41"
          },
          "threeDSPaymentData" : {
            "type" : "string",
            "description" : "When non-empty, contains a value that you must submit to the `/payments/details` endpoint as `paymentData`.",
            "x-addedInVersion" : "67"
          }
        }
      },
      "PaymentReversalRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions)."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the reversal request. Maximum length: 80 characters."
          }
        },
        "required" : [ "merchantAccount" ]
      },
      "PaymentReversalResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "paymentPspReference" : {
            "type" : "string",
            "description" : "The [`pspReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-pspReference) of the payment to reverse. "
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character reference associated with the reversal request."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the reversal request."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of your request. This will always have the value **received**.",
            "enum" : [ "received" ]
          }
        },
        "required" : [ "merchantAccount", "paymentPspReference", "pspReference", "status" ]
      },
      "PaypalUpdateOrderRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The updated final payment amount. This amount is the item total plus the shipping costs of the selected `deliveryMethod`."
          },
          "deliveryMethods" : {
            "type" : "array",
            "description" : "The list of new delivery methods and the cost of each.",
            "items" : {
              "$ref" : "#/components/schemas/DeliveryMethod"
            }
          },
          "paymentData" : {
            "type" : "string",
            "description" : "The `paymentData` from the client side. This value changes every time you make a `/paypal/updateOrder` request."
          },
          "pspReference" : {
            "type" : "string",
            "description" : "The original `pspReference` from the `/payments` response."
          },
          "sessionId" : {
            "type" : "string",
            "description" : "The original `sessionId` from the `/sessions` response."
          },
          "taxTotal" : {
            "$ref" : "#/components/schemas/TaxTotal",
            "description" : "Total tax amount from the order. "
          }
        }
      },
      "PaypalUpdateOrderResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "paymentData" : {
            "type" : "string",
            "description" : "The updated paymentData."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the request. This indicates whether the order was successfully updated with PayPal.",
            "enum" : [ "error", "success" ]
          }
        },
        "required" : [ "paymentData", "status" ]
      },
      "Phone" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "cc" : {
            "type" : "string",
            "description" : "Country code. Length: 1–3 digits.",
            "maxLength" : 3,
            "minLength" : 1
          },
          "subscriber" : {
            "type" : "string",
            "description" : "Subscriber number. Length: 4-15  digits.",
            "maxLength" : 15
          }
        }
      },
      "PixDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "pixRecurring" : {
            "$ref" : "#/components/schemas/PixRecurring"
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "description" : "The payment method type.",
            "enum" : [ "pix" ]
          }
        },
        "title" : "Stored Payment Method"
      },
      "PixRecurring" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "billingDate" : {
            "type" : "string",
            "description" : "The date on which the shopper's payment method will be charged, in YYYY-MM-DD format."
          },
          "businessDayOnly" : {
            "type" : "boolean",
            "description" : "Flag used to define whether liquidation can happen only on business days"
          },
          "endsAt" : {
            "type" : "string",
            "description" : "End date of the billing plan, in YYYY-MM-DD format. The end date must align with the frequency and the start date of the billing plan. If left blank, the subscription will continue indefinitely unless it is cancelled by the shopper."
          },
          "frequency" : {
            "type" : "string",
            "description" : "The frequency at which the shopper will be charged.",
            "enum" : [ "weekly", "monthly", "quarterly", "half-yearly", "yearly" ]
          },
          "minAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "For a billing plan where the payment amounts are variable, the minimum amount to charge the shopper for each recurring payment. When a shopper approves the billing plan, they can also specify a maximum amount in their banking app."
          },
          "originalPspReference" : {
            "type" : "string",
            "description" : "The pspReference for the failed recurring payment. Find this in AUTHORISATION webhook you received after the billing date."
          },
          "recurringAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "For a billing plan where the payment amount is fixed, the amount the shopper will be charged for each recurring payment."
          },
          "recurringStatement" : {
            "type" : "string",
            "description" : "The text that that will be shown on the shopper's bank statement for the recurring payments. We recommend to add a descriptive text about the subscription to let your shoppers recognize your recurring payments.\nMaximum length: 35 characters."
          },
          "retryPolicy" : {
            "type" : "boolean",
            "description" : "When set to true, you can retry for failed recurring payments. The default value is true."
          },
          "startsAt" : {
            "type" : "string",
            "description" : "Start date of the billing plan, in YYYY-MM-DD format. The default value is the transaction date."
          }
        },
        "title" : "pixRecurring"
      },
      "PlatformChargebackLogic" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "behavior" : {
            "type" : "string",
            "description" : "The method of handling the chargeback.\n\nPossible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.",
            "enum" : [ "deductAccordingToSplitRatio", "deductFromLiableAccount", "deductFromOneBalanceAccount" ]
          },
          "costAllocationAccount" : {
            "type" : "string",
            "description" : "The unique identifier of the balance account to which the chargeback fees are booked. By default, the chargeback fees are booked to your liable balance account."
          },
          "targetAccount" : {
            "type" : "string",
            "description" : "The unique identifier of the balance account against which the disputed amount is booked.\n\nRequired if `behavior` is **deductFromOneBalanceAccount**."
          }
        }
      },
      "PseDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "bank" : {
            "type" : "string",
            "description" : "The shopper's bank."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "clientType" : {
            "type" : "string",
            "description" : "The client type."
          },
          "identification" : {
            "type" : "string",
            "description" : "The identification code."
          },
          "identificationType" : {
            "type" : "string",
            "description" : "The identification type."
          },
          "type" : {
            "type" : "string",
            "description" : "The payment method type.",
            "enum" : [ "pse_payulatam" ]
          }
        },
        "required" : [ "bank", "clientType", "identification", "identificationType" ],
        "title" : "PSE Latam"
      },
      "RakutenPayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "rakutenpay",
            "description" : "**rakutenpay**",
            "enum" : [ "rakutenpay" ]
          }
        },
        "title" : "RakutenPay"
      },
      "RatepayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "billingAddress" : {
            "type" : "string",
            "description" : "The address where to send the invoice."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "deliveryAddress" : {
            "type" : "string",
            "description" : "The address where the goods should be delivered."
          },
          "personalDetails" : {
            "type" : "string",
            "description" : "Shopper name, date of birth, phone number, and email address."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "ratepay",
            "description" : "**ratepay**",
            "enum" : [ "ratepay", "ratepay_directdebit" ]
          }
        },
        "required" : [ "type" ],
        "title" : "Ratepay"
      },
      "Recurring" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "contract" : {
            "type" : "string",
            "description" : "The type of recurring contract to be used.\nPossible values:\n* `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).\n* `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).\n* `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.\n* `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).",
            "enum" : [ "ONECLICK", "RECURRING", "PAYOUT" ]
          },
          "recurringDetailName" : {
            "type" : "string",
            "description" : "A descriptive name for this detail."
          },
          "recurringExpiry" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date after which no further authorisations shall be performed. Only for 3D Secure 2.",
            "x-addedInVersion" : "40"
          },
          "recurringFrequency" : {
            "type" : "string",
            "description" : "Minimum number of days between authorisations. Only for 3D Secure 2.",
            "x-addedInVersion" : "40"
          },
          "tokenService" : {
            "type" : "string",
            "description" : "The name of the token service.",
            "enum" : [ "VISATOKENSERVICE", "MCTOKENSERVICE", "AMEXTOKENSERVICE", "TOKEN_SHARING" ],
            "x-addedInVersion" : "25"
          }
        }
      },
      "ResponseAdditionalData3DSecure" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "cardHolderInfo" : {
            "type" : "string",
            "description" : "Information provided by the issuer to the cardholder. If this field is present, you need to display this information to the cardholder. "
          },
          "cavv" : {
            "type" : "string",
            "description" : "The Cardholder Authentication Verification Value (CAVV) for the 3D Secure authentication session, as a Base64-encoded 20-byte array."
          },
          "cavvAlgorithm" : {
            "type" : "string",
            "description" : "The CAVV algorithm used."
          },
          "scaExemptionRequested" : {
            "type" : "string",
            "description" : "Shows the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that Adyen requested for the payment.\n\n Possible values:\n* **lowValue** \n* **secureCorporate** \n* **trustedBeneficiary** \n* **transactionRiskAnalysis** "
          },
          "threeds2.cardEnrolled" : {
            "type" : "boolean",
            "description" : "Indicates whether a card is enrolled for 3D Secure 2."
          }
        }
      },
      "ResponseAdditionalDataBillingAddress" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "billingAddress.city" : {
            "type" : "string",
            "description" : "The billing address city passed in the payment request."
          },
          "billingAddress.country" : {
            "type" : "string",
            "description" : "The billing address country passed in the payment request.\n\nExample: NL"
          },
          "billingAddress.houseNumberOrName" : {
            "type" : "string",
            "description" : "The billing address house number or name passed in the payment request."
          },
          "billingAddress.postalCode" : {
            "type" : "string",
            "description" : "The billing address postal code passed in the payment request.\n\nExample: 1011 DJ"
          },
          "billingAddress.stateOrProvince" : {
            "type" : "string",
            "description" : "The billing address state or province passed in the payment request.\n\nExample: NH"
          },
          "billingAddress.street" : {
            "type" : "string",
            "description" : "The billing address street passed in the payment request."
          }
        }
      },
      "ResponseAdditionalDataCard" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "cardBin" : {
            "type" : "string",
            "description" : "The first six digits of the card number.\n\nThis is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with a six-digit BIN.\n\nExample: 521234"
          },
          "cardHolderName" : {
            "type" : "string",
            "description" : "The cardholder name passed in the payment request."
          },
          "cardIssuingBank" : {
            "type" : "string",
            "description" : "The bank or the financial institution granting lines of credit through card association branded payment cards. This information can be included when available."
          },
          "cardIssuingCountry" : {
            "type" : "string",
            "description" : "The country where the card was issued.\n\nExample: US"
          },
          "cardIssuingCurrency" : {
            "type" : "string",
            "description" : "The currency in which the card is issued, if this information is available. Provided as the currency code or currency number from the ISO-4217 standard. \n\nExample: USD"
          },
          "cardPaymentMethod" : {
            "type" : "string",
            "description" : "The card payment method used for the transaction.\n\nExample: amex"
          },
          "cardProductId" : {
            "type" : "string",
            "description" : "The Card Product ID represents the type of card following card scheme product definitions and can be returned for Adyen Acquiring service level payments.\n\nPossible values Visa:\n* **A** - Visa Traditional\n* **B** - Visa Traditional Rewards\n* **C** - Visa Signature\n* **D** - Visa Signature Preferred\n* **F** - Visa Classic\n\nPossible values Mastercard:\n* **MCC** - Mastercard Card\n* **MCE** - Mastercard Electronic Card\n* **MCF** - Mastercard Corporate Fleet Card\n* **MCG** - Gold Mastercard Card\n* **MCH** - Mastercard Premium Charge\n* **MCI** - Mastercard Select Debit\n",
            "enum" : [ "A", "B", "C", "D", "F", "MCC", "MCE", "MCF", "MCG", "MCH", "MCI" ]
          },
          "cardSummary" : {
            "type" : "string",
            "description" : "The last four digits of a card number.\n\n> Returned only in case of a card payment."
          },
          "issuerBin" : {
            "type" : "string",
            "description" : "The first eight digits of the card number. Only returned if the card number is 16 digits or more.\n\nThis is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with an eight-digit BIN.\n\nExample: 52123423"
          }
        }
      },
      "ResponseAdditionalDataCommon" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "acquirerAccountCode" : {
            "type" : "string",
            "description" : "The name of the Adyen acquirer account.\n\nExample: PayPalSandbox_TestAcquirer\n\n> Only relevant for PayPal transactions."
          },
          "acquirerCode" : {
            "type" : "string",
            "description" : "The name of the acquirer processing the payment request.\n\nExample: TestPmmAcquirer"
          },
          "acquirerReference" : {
            "type" : "string",
            "description" : "The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.\n\nExample: 7C9N3FNBKT9"
          },
          "alias" : {
            "type" : "string",
            "description" : "The Adyen alias of the card.\n\nExample: H167852639363479"
          },
          "aliasType" : {
            "type" : "string",
            "description" : "The type of the card alias.\n\nExample: Default"
          },
          "authCode" : {
            "type" : "string",
            "description" : "Authorisation code:\n* When the payment is authorised successfully, this field holds the authorisation code for the payment.\n* When the payment is not authorised, this field is empty.\n\nExample: 58747"
          },
          "authorisationMid" : {
            "type" : "string",
            "description" : "Merchant ID known by the acquirer."
          },
          "authorisedAmountCurrency" : {
            "type" : "string",
            "description" : "The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)."
          },
          "authorisedAmountValue" : {
            "type" : "string",
            "description" : "Value of the amount authorised.\n\nThis amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes)."
          },
          "avsResult" : {
            "type" : "string",
            "description" : "The AVS result code of the payment, which provides information about the outcome of the AVS check.\n\nFor possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs)."
          },
          "avsResultRaw" : {
            "type" : "string",
            "description" : "Raw AVS result received from the acquirer, where available.\n\nExample: D"
          },
          "bic" : {
            "type" : "string",
            "description" : "BIC of a bank account.\n\nExample: TESTNL01\n\n> Only relevant for SEPA Direct Debit transactions."
          },
          "coBrandedWith" : {
            "type" : "string",
            "description" : "Includes the co-branded card information."
          },
          "cvcResult" : {
            "type" : "string",
            "description" : "The result of CVC verification.",
            "example" : "1 Matches"
          },
          "cvcResultRaw" : {
            "type" : "string",
            "description" : "The raw result of CVC verification.",
            "example" : "M"
          },
          "dsTransID" : {
            "type" : "string",
            "description" : "Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction."
          },
          "eci" : {
            "type" : "string",
            "description" : "The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.\n\nExample: 02"
          },
          "expiryDate" : {
            "type" : "string",
            "description" : "The expiry date on the card.\n\nExample: 6/2016\n\n> Returned only in case of a card payment."
          },
          "extraCostsCurrency" : {
            "type" : "string",
            "description" : "The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.\n\nExample: EUR"
          },
          "extraCostsValue" : {
            "type" : "string",
            "description" : "The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units."
          },
          "fraudCheck-[itemNr]-[FraudCheckname]" : {
            "type" : "string",
            "description" : "The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair."
          },
          "fraudManualReview" : {
            "type" : "string",
            "description" : "Indicates if the payment is sent to manual review."
          },
          "fraudResultType" : {
            "type" : "string",
            "description" : "The fraud result properties of the payment.",
            "enum" : [ "GREEN", "FRAUD" ]
          },
          "fraudRiskLevel" : {
            "type" : "string",
            "description" : "The risk level of the transaction as classified by the [machine learning](https://docs.adyen.com/risk-management/configure-your-risk-profile/machine-learning-rules/) fraud risk rule. The risk level indicates the likelihood that a transaction will result in a fraudulent dispute. The possible return values are:\n* veryLow\n* low\n* medium\n* high\n* veryHigh\n",
            "enum" : [ "veryLow", "low", "medium", "high", "veryHigh" ]
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "Information regarding the funding type of the card. The possible return values are:\n* CHARGE\n* CREDIT\n* DEBIT\n* PREPAID\n* PREPAID_RELOADABLE\n\n* PREPAID_NONRELOADABLE\n* DEFFERED_DEBIT\n\n> This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.\n\nFor receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**."
          },
          "fundsAvailability" : {
            "type" : "string",
            "description" : "Indicates availability of funds.\n\nVisa:\n* \"I\" (fast funds are supported)\n* \"N\" (otherwise)\n\nMastercard:\n* \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list)\n* \"N\" (otherwise)\n\n> Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \"Y\" or \"D\"."
          },
          "inferredRefusalReason" : {
            "type" : "string",
            "description" : "Provides the more granular indication of why a transaction was refused. When a transaction fails with either \"Refused\", \"Restricted Card\", \"Transaction Not Permitted\", \"Not supported\" or \"DeclinedNon Generic\" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to \"Not Supported\".\n\nPossible values:\n\n* 3D Secure Mandated\n* Closed Account\n* ContAuth Not Supported\n* CVC Mandated\n* Ecommerce Not Allowed\n* Crossborder Not Supported\n* Card Updated\n\n* Low Authrate Bin\n* Non-reloadable prepaid card"
          },
          "isCardCommercial" : {
            "type" : "string",
            "description" : "Indicates if the card is used for business purposes only."
          },
          "issuerCountry" : {
            "type" : "string",
            "description" : "The issuing country of the card based on the BIN list that Adyen maintains.\n\nExample: JP"
          },
          "liabilityShift" : {
            "type" : "string",
            "description" : "A Boolean value indicating whether a liability shift was offered for this payment."
          },
          "mcBankNetReferenceNumber" : {
            "type" : "string",
            "description" : "The `mcBankNetReferenceNumber`, is a minimum of six characters and a maximum of nine characters long.\n\n> Contact Support Team to enable this field."
          },
          "merchantAdviceCode" : {
            "type" : "string",
            "description" : "The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.\n\nFor more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes)."
          },
          "merchantReference" : {
            "type" : "string",
            "description" : "The reference provided for the transaction."
          },
          "networkTxReference" : {
            "type" : "string",
            "description" : "Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.\n\nThis contains either the Mastercard Trace ID or the Visa Transaction ID."
          },
          "ownerName" : {
            "type" : "string",
            "description" : "The owner name of a bank account.\n\nOnly relevant for SEPA Direct Debit transactions."
          },
          "paymentAccountReference" : {
            "type" : "string",
            "description" : "The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters."
          },
          "paymentMethod" : {
            "type" : "string",
            "description" : "The payment method used in the transaction."
          },
          "paymentMethodVariant" : {
            "type" : "string",
            "description" : "The Adyen sub-variant of the payment method used for the payment request.\n\nFor more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).\n\nExample: mcpro"
          },
          "payoutEligible" : {
            "type" : "string",
            "description" : "Indicates whether a payout is eligible or not for this card.\n\nVisa:\n* \"Y\"\n* \"N\"\n\nMastercard:\n* \"Y\" (domestic and cross-border)\n\n* \"D\" (only domestic)\n* \"N\" (no MoneySend)\n* \"U\" (unknown)"
          },
          "realtimeAccountUpdaterStatus" : {
            "type" : "string",
            "description" : "The response code from the Real Time Account Updater service.\n\nPossible return values are:\n* CardChanged\n* CardExpiryChanged\n* CloseAccount\n\n* ContactCardAccountHolder"
          },
          "receiptFreeText" : {
            "type" : "string",
            "description" : "Message to be displayed on the terminal."
          },
          "recurring.contractTypes" : {
            "type" : "string",
            "description" : "The recurring contract types applicable to the transaction.",
            "x-addedInVersion" : "40"
          },
          "recurring.firstPspReference" : {
            "type" : "string",
            "description" : "The `pspReference`, of the first recurring payment that created the recurring detail.\n\nThis functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team."
          },
          "recurring.recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "The reference that uniquely identifies the recurring transaction.",
            "x-deprecatedInVersion" : "68",
            "x-deprecatedMessage" : "Use tokenization.storedPaymentMethodId instead."
          },
          "recurring.shopperReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "The provided reference of the shopper for a recurring transaction.",
            "x-addedInVersion" : "40",
            "x-deprecatedInVersion" : "68",
            "x-deprecatedMessage" : "Use tokenization.shopperReference instead."
          },
          "recurringProcessingModel" : {
            "type" : "string",
            "description" : "The processing model used for the recurring transaction.",
            "enum" : [ "CardOnFile", "Subscription", "UnscheduledCardOnFile" ],
            "x-addedInVersion" : "40"
          },
          "referred" : {
            "type" : "string",
            "description" : "If the payment is referred, this field is set to true.\n\nThis field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.\n\nExample: true"
          },
          "refusalReasonRaw" : {
            "type" : "string",
            "description" : "Raw refusal reason received from the acquirer, where available.\n\nExample: AUTHORISED"
          },
          "requestAmount" : {
            "type" : "string",
            "description" : "The amount of the payment request."
          },
          "requestCurrencyCode" : {
            "type" : "string",
            "description" : "The currency of the payment request."
          },
          "shopperInteraction" : {
            "type" : "string",
            "description" : "The shopper interaction type of the payment request.\n\nExample: Ecommerce"
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "The shopperReference passed in the payment request.\n\nExample: AdyenTestShopperXX"
          },
          "terminalId" : {
            "type" : "string",
            "description" : "The terminal ID used in a point-of-sale payment.\n\nExample: 06022622"
          },
          "threeDAuthenticated" : {
            "type" : "string",
            "description" : "A Boolean value indicating whether 3DS authentication was completed on this payment.\n\nExample: true"
          },
          "threeDAuthenticatedResponse" : {
            "type" : "string",
            "description" : "The raw 3DS authentication result from the card issuer.\n\nExample: N"
          },
          "threeDOffered" : {
            "type" : "string",
            "description" : "A Boolean value indicating whether 3DS was offered for this payment.\n\nExample: true"
          },
          "threeDOfferedResponse" : {
            "type" : "string",
            "description" : "The raw enrollment result from the 3DS directory services of the card schemes.\n\nExample: Y"
          },
          "threeDSVersion" : {
            "type" : "string",
            "description" : "The 3D Secure 2 version."
          },
          "tokenization.shopperReference" : {
            "type" : "string",
            "description" : "The reference for the shopper that you sent when tokenizing the payment details."
          },
          "tokenization.store.operationType" : {
            "type" : "string",
            "description" : "The operation performed on the token. Possible values:\n\n* **created**: the token has been created.\n* **updated**: the existing token has been updated.\n* **alreadyExisting**: the details have already been stored.\n",
            "enum" : [ "created", "updated", "alreadyExisting" ]
          },
          "tokenization.storedPaymentMethodId" : {
            "type" : "string",
            "description" : "The reference that uniquely identifies tokenized payment details."
          },
          "visaTransactionId" : {
            "type" : "string",
            "description" : "The `visaTransactionId`, has a fixed length of 15 numeric characters.\n\n> Contact Support Team to enable this field."
          },
          "xid" : {
            "type" : "string",
            "description" : "The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse 'N' or 'Y'. \n\nExample: ODgxNDc2MDg2MDExODk5MAAAAAA="
          }
        }
      },
      "ResponseAdditionalDataDomesticError" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "domesticRefusalReasonRaw" : {
            "type" : "string",
            "description" : "The reason the transaction was declined, given by the local issuer. \nCurrently available for merchants in Japan."
          },
          "domesticShopperAdvice" : {
            "type" : "string",
            "description" : "The action the shopper should take, in a local language. \nCurrently available in Japanese, for merchants in Japan."
          }
        }
      },
      "ResponseAdditionalDataInstallments" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "installmentPaymentData.installmentType" : {
            "type" : "string",
            "description" : "Type of installment. The value of `installmentType` should be **IssuerFinanced**."
          },
          "installmentPaymentData.option[itemNr].annualPercentageRate" : {
            "type" : "string",
            "description" : "Annual interest rate."
          },
          "installmentPaymentData.option[itemNr].firstInstallmentAmount" : {
            "type" : "string",
            "description" : "First Installment Amount in minor units."
          },
          "installmentPaymentData.option[itemNr].installmentFee" : {
            "type" : "string",
            "description" : "Installment fee amount in minor units."
          },
          "installmentPaymentData.option[itemNr].interestRate" : {
            "type" : "string",
            "description" : "Interest rate for the installment period."
          },
          "installmentPaymentData.option[itemNr].maximumNumberOfInstallments" : {
            "type" : "string",
            "description" : "Maximum number of installments possible for this payment."
          },
          "installmentPaymentData.option[itemNr].minimumNumberOfInstallments" : {
            "type" : "string",
            "description" : "Minimum number of installments possible for this payment."
          },
          "installmentPaymentData.option[itemNr].numberOfInstallments" : {
            "type" : "string",
            "description" : "Total number of installments possible for this payment."
          },
          "installmentPaymentData.option[itemNr].subsequentInstallmentAmount" : {
            "type" : "string",
            "description" : "Subsequent Installment Amount in minor units."
          },
          "installmentPaymentData.option[itemNr].totalAmountDue" : {
            "type" : "string",
            "description" : "Total amount in minor units."
          },
          "installmentPaymentData.paymentOptions" : {
            "type" : "string",
            "description" : "Possible values:\n* PayInInstallmentsOnly\n* PayInFullOnly\n* PayInFullOrInstallments"
          },
          "installments.value" : {
            "type" : "string",
            "description" : "The number of installments that the payment amount should be charged with.\n\nExample: 5\n> Only relevant for card payments in countries that support installments."
          }
        }
      },
      "ResponseAdditionalDataNetworkTokens" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "networkToken.available" : {
            "type" : "string",
            "description" : "Indicates whether a network token is available for the specified card."
          },
          "networkToken.bin" : {
            "type" : "string",
            "description" : "The Bank Identification Number of a tokenized card, which is the first six digits of a card number."
          },
          "networkToken.tokenSummary" : {
            "type" : "string",
            "description" : "The last four digits of a network token."
          }
        }
      },
      "ResponseAdditionalDataOpi" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "opi.transToken" : {
            "type" : "string",
            "description" : "Returned in the response if you included `opi.includeTransToken: true` in an ecommerce payment request. This contains an Oracle Payment Interface token that you can store in your Oracle Opera database to identify tokenized ecommerce transactions. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce)."
          }
        }
      },
      "ResponseAdditionalDataSepa" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "sepadirectdebit.dateOfSignature" : {
            "type" : "string",
            "description" : "The transaction signature date.\n\nFormat: yyyy-MM-dd"
          },
          "sepadirectdebit.mandateId" : {
            "type" : "string",
            "description" : "Its value corresponds to the pspReference value of the transaction."
          },
          "sepadirectdebit.sequenceType" : {
            "type" : "string",
            "description" : "This field can take one of the following values:\n* OneOff: (OOFF) Direct debit instruction to initiate exactly one direct debit transaction.\n\n* First: (FRST) Initial/first collection in a series of direct debit instructions.\n* Recurring: (RCUR) Direct debit instruction to carry out regular direct debit transactions initiated by the creditor.\n* Final: (FNAL) Last/final collection in a series of direct debit instructions.\n\nExample: OOFF"
          }
        }
      },
      "ResponsePaymentMethod" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "brand" : {
            "type" : "string",
            "description" : "The card brand that the shopper used to pay. Only returned if `paymentMethod.type` is **scheme**."
          },
          "type" : {
            "type" : "string",
            "description" : "The `paymentMethod.type` value used in the request."
          }
        },
        "title" : "paymentResponse"
      },
      "RiskData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "clientData" : {
            "type" : "string",
            "description" : "Contains client-side data, like the device fingerprint, cookies, and specific browser settings.",
            "maxLength" : 5000
          },
          "customFields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Any custom fields used as part of the input to configured risk rules.",
            "x-addedInVersion" : "65"
          },
          "fraudOffset" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "An integer value that is added to the normal fraud score. The value can be either positive or negative.",
            "x-addedInVersion" : "65"
          },
          "profileReference" : {
            "type" : "string",
            "description" : "The risk profile to assign to this payment. When left empty, the merchant-level account's default risk profile will be applied.",
            "x-addedInVersion" : "65"
          }
        }
      },
      "RivertyDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "billingAddress" : {
            "type" : "string",
            "description" : "The address where to send the invoice."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "deliveryAddress" : {
            "type" : "string",
            "description" : "The address where the goods should be delivered."
          },
          "deviceFingerprint" : {
            "type" : "string",
            "description" : "A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).",
            "maxLength" : 5000
          },
          "iban" : {
            "type" : "string",
            "description" : "The iban number of the customer ",
            "maxLength" : 34
          },
          "personalDetails" : {
            "type" : "string",
            "description" : "Shopper name, date of birth, phone number, and email address."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "subtype" : {
            "type" : "string",
            "description" : "The payment method subtype."
          },
          "type" : {
            "type" : "string",
            "default" : "riverty",
            "description" : "**riverty**",
            "enum" : [ "riverty", "riverty_account", "riverty_installments", "sepadirectdebit_riverty" ]
          }
        },
        "required" : [ "type" ],
        "title" : "Riverty"
      },
      "SDKEphemPubKey" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "crv" : {
            "type" : "string",
            "description" : "The `crv` value as received from the 3D Secure 2 SDK."
          },
          "kty" : {
            "type" : "string",
            "description" : "The `kty` value as received from the 3D Secure 2 SDK."
          },
          "x" : {
            "type" : "string",
            "description" : "The `x` value as received from the 3D Secure 2 SDK."
          },
          "y" : {
            "type" : "string",
            "description" : "The `y` value as received from the 3D Secure 2 SDK."
          }
        }
      },
      "SamsungPayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "samsungPayToken" : {
            "type" : "string",
            "description" : "The payload you received from the Samsung Pay SDK response.",
            "maxLength" : 10000
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "samsungpay",
            "description" : "**samsungpay**",
            "enum" : [ "samsungpay" ]
          }
        },
        "required" : [ "samsungPayToken" ],
        "title" : "Samsung Pay"
      },
      "SepaDirectDebitDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "iban" : {
            "type" : "string",
            "description" : "The International Bank Account Number (IBAN)."
          },
          "ownerName" : {
            "type" : "string",
            "description" : "The name of the bank account holder."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "transferInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of your user's verified transfer instrument, which you can use to top up their balance accounts."
          },
          "type" : {
            "type" : "string",
            "default" : "sepadirectdebit",
            "description" : "**sepadirectdebit**",
            "enum" : [ "sepadirectdebit", "sepadirectdebit_amazonpay" ]
          }
        },
        "required" : [ "iban", "ownerName" ],
        "title" : "SEPA Direct Debit"
      },
      "ServiceError" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Contains additional information about the payment. Some data fields are included only if you select them first. Go to **Customer Area** > **Developers** > **Additional data**.",
            "x-addedInVersion" : "46"
          },
          "errorCode" : {
            "type" : "string",
            "description" : "The error code mapped to the error message."
          },
          "errorType" : {
            "type" : "string",
            "description" : "The category of the error."
          },
          "message" : {
            "type" : "string",
            "description" : "A short explanation of the issue."
          },
          "pspReference" : {
            "type" : "string",
            "description" : "The PSP reference of the payment."
          },
          "status" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The HTTP response status."
          }
        }
      },
      "SessionResultResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "additionalData" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Contains additional information about the payment. Some fields are included only if you enable them. To enable these fields in your Customer Area, go to **Developers** > **Additional data**.",
            "x-anyOf" : [ {
              "$ref" : "#/components/schemas/ResponseAdditionalData3DSecure"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataBillingAddress"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataCard"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataCommon"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataDomesticError"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataInstallments"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataNetworkTokens"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataOpi"
            }, {
              "$ref" : "#/components/schemas/ResponseAdditionalDataSepa"
            } ]
          },
          "id" : {
            "type" : "string",
            "description" : "A unique identifier of the session."
          },
          "payments" : {
            "type" : "array",
            "description" : "A list of all authorised payments done for this session.",
            "items" : {
              "$ref" : "#/components/schemas/Payment"
            }
          },
          "reference" : {
            "type" : "string",
            "description" : "The unique reference that you provided in the original `/sessions` request. This identifies the payment and is used in all communication with you about the payment status."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the session. The status included in the response doesn't get updated. Don't make the request again to check for payment status updates.\n\nPossible values:\n* **completed**: the shopper completed the payment, and the payment was authorized.\n* **paymentPending**: the shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow, like voucher payments where the shopper completes the payment in a physical shop.\n* **refused**: the session has been refused, because of too many refused payment attempts. The shopper can no longer complete the payment with this session.\n* **canceled**: the shopper canceled the payment.\n* **expired**: the session expired. The shopper can no longer complete the payment with this session. By default, the session expires one hour after it is created.",
            "enum" : [ "active", "canceled", "completed", "expired", "paymentPending", "refused" ]
          }
        }
      },
      "ShopperInteractionDevice" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "locale" : {
            "type" : "string",
            "description" : "Locale on the shopper interaction device."
          },
          "os" : {
            "type" : "string",
            "description" : "Operating system running on the shopper interaction device."
          },
          "osVersion" : {
            "type" : "string",
            "description" : "Version of the operating system on the shopper interaction device."
          }
        }
      },
      "Split" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "account" : {
            "type" : "string",
            "description" : "The unique identifier of the account to which the split amount is booked. Required if `type` is **MarketPlace** or **BalanceAccount**.\n\n* [Classic Platforms integration](https://docs.adyen.com/classic-platforms): The [`accountCode`](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccount#request-accountCode) of the account to which the split amount is booked.\n* [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model): The [`balanceAccountId`](https://docs.adyen.com/api-explorer/balanceplatform/latest/get/balanceAccounts/_id_#path-id) of the account to which the split amount is booked."
          },
          "amount" : {
            "$ref" : "#/components/schemas/SplitAmount",
            "description" : "The amount of the split item.\n\n* Required for all split types in the [Classic Platforms integration](https://docs.adyen.com/classic-platforms).\n* Required if `type` is **BalanceAccount**, **Commission**, **Default**, or **VAT** in your [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model) integration."
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the split item."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your unique reference for the part of the payment booked to the specified `account`.\n\nThis is required if `type` is **MarketPlace** ([Classic Platforms integration](https://docs.adyen.com/classic-platforms)) or **BalanceAccount** ([Balance Platform](https://docs.adyen.com/adyen-for-platforms-model)).\n\nFor the other types, we also recommend providing a **unique** reference so you can reconcile the split and the associated payment in the transaction overview and in the reports."
          },
          "type" : {
            "type" : "string",
            "description" : "The part of the payment you want to book to the specified `account`.\n\nPossible values for the [Balance Platform](https://docs.adyen.com/adyen-for-platforms-model):\n* **BalanceAccount**: books part of the payment (specified in `amount`) to the specified `account`.\n* Transaction fees types that you can book to the specified `account`:\n   * **AcquiringFees**: the aggregated amount of the interchange and scheme fees.\n   * **PaymentFee**: the aggregated amount of all transaction fees.\n   * **AdyenFees**: the aggregated amount of Adyen's commission and markup fees.\n   * **AdyenCommission**: the transaction fees due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/interchange-fees-explained).\n   * **AdyenMarkup**: the transaction fees due to Adyen under [Interchange ++ pricing](https://www.adyen.com/knowledge-hub/interchange-fees-explained).\n   * **Interchange**: the fees paid to the issuer for each payment made with the card network.\n   * **SchemeFee**: the fees paid to the card scheme for using their network. \n* **Commission**: your platform's commission on the payment (specified in `amount`), booked to your liable balance account.\n* **Remainder**: the amount left over after a currency conversion, booked to the specified `account`.\n* **TopUp**: allows you and your users to top up balance accounts using direct debit, card payments, or other payment methods.\n* **VAT**: the value-added tax charged on the payment, booked to your platforms liable balance account.\n* **Commission**: your platform's commission (specified in `amount`) on the payment, booked to your liable balance account.\n* **Default**: in very specific use cases, allows you to book the specified `amount` to the specified `account`. For more information, contact Adyen support.\n\nPossible values for the [Classic Platforms integration](https://docs.adyen.com/classic-platforms): **Commission**, **Default**, **MarketPlace**, **PaymentFee**, **VAT**.",
            "enum" : [ "AcquiringFees", "AdyenCommission", "AdyenFees", "AdyenMarkup", "BalanceAccount", "Commission", "Default", "Interchange", "MarketPlace", "PaymentFee", "Remainder", "SchemeFee", "Surcharge", "Tip", "TopUp", "VAT" ]
          }
        },
        "required" : [ "type" ]
      },
      "SplitAmount" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). By default, this is the original payment currency.",
            "maxLength" : 3,
            "minLength" : 3
          },
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The value of the split amount, in [minor units](https://docs.adyen.com/development-resources/currency-codes)."
          }
        },
        "required" : [ "value" ]
      },
      "StandalonePaymentCancelRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "applicationInfo" : {
            "$ref" : "#/components/schemas/ApplicationInfo",
            "description" : "Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions)."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "paymentReference" : {
            "type" : "string",
            "description" : "The [`reference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__reqParam_reference) of the payment that you want to cancel."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the cancel request. Maximum length: 80 characters."
          }
        },
        "required" : [ "merchantAccount", "paymentReference" ]
      },
      "StandalonePaymentCancelResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that is used to process the payment."
          },
          "paymentReference" : {
            "type" : "string",
            "description" : "The [`reference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__reqParam_reference) of the payment to cancel."
          },
          "pspReference" : {
            "type" : "string",
            "description" : "Adyen's 16-character reference associated with the cancel request."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the cancel request."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of your request. This will always have the value **received**.",
            "enum" : [ "received" ]
          }
        },
        "required" : [ "merchantAccount", "paymentReference", "pspReference", "status" ]
      },
      "StoredPaymentMethod" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "bankAccountNumber" : {
            "type" : "string",
            "description" : "The bank account number (without separators)."
          },
          "bankLocationId" : {
            "type" : "string",
            "description" : "The location id of the bank. The field value is `nil` in most cases."
          },
          "brand" : {
            "type" : "string",
            "description" : "The brand of the card."
          },
          "expiryMonth" : {
            "type" : "string",
            "description" : "The two-digit month when the card expires"
          },
          "expiryYear" : {
            "type" : "string",
            "description" : "The year the card expires, for example **2022**."
          },
          "holderName" : {
            "type" : "string",
            "description" : "The unique payment method code."
          },
          "iban" : {
            "type" : "string",
            "description" : "The IBAN of the bank account.",
            "x-addedInVersion" : "67"
          },
          "id" : {
            "type" : "string",
            "description" : "A unique identifier of this stored payment method."
          },
          "lastFour" : {
            "type" : "string",
            "description" : "The last four digits of the PAN."
          },
          "name" : {
            "type" : "string",
            "description" : "The display name of the stored payment method."
          },
          "networkTxReference" : {
            "type" : "string",
            "description" : "Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.\n\nThis contains either the Mastercard Trace ID or the Visa Transaction ID.",
            "x-addedInVersion" : "68"
          },
          "ownerName" : {
            "type" : "string",
            "description" : "The name of the bank account holder.",
            "x-addedInVersion" : "67"
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper’s email address."
          },
          "supportedShopperInteractions" : {
            "type" : "array",
            "description" : "The supported shopper interactions for this stored payment method.",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The type of payment method."
          }
        }
      },
      "StoredPaymentMethodDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "description" : "The payment method type.",
            "enum" : [ "bcmc_mobile", "bcmc_mobile_QR", "bcmc_mobile_app", "momo_wallet", "momo_wallet_app", "paymaya_wallet", "grabpay_SG", "grabpay_MY", "grabpay_TH", "grabpay_ID", "grabpay_VN", "grabpay_PH", "oxxo", "gcash", "dana", "kakaopay", "truemoney", "paysafecard" ]
          }
        },
        "title" : "Stored Payment Method"
      },
      "StoredPaymentMethodRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the transaction."
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/PaymentMethodToStore",
            "description" : "Contains the information required to store a payment method."
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks."
          },
          "shopperIP" : {
            "type" : "string",
            "description" : "The IP address of a shopper."
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "A unique identifier for the shopper (for example, user ID or account ID)."
          },
          "storingMethod" : {
            "$ref" : "#/components/schemas/PaymentMethodToStore",
            "description" : "Only for the Token Connect feature. Contains the information required to store a payment method."
          }
        },
        "required" : [ "merchantAccount", "paymentMethod", "shopperReference" ]
      },
      "StoredPaymentMethodResource" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "brand" : {
            "type" : "string",
            "description" : "The brand of the card."
          },
          "expiryMonth" : {
            "type" : "string",
            "description" : "The month the card expires."
          },
          "expiryYear" : {
            "type" : "string",
            "description" : "The year the card expires, for example **2022**."
          },
          "externalResponseCode" : {
            "type" : "string",
            "description" : "The response code returned by an external system (for example after a provisioning operation).",
            "x-addedInVersion" : "68"
          },
          "externalTokenReference" : {
            "type" : "string",
            "description" : "The token reference of a linked token in an external system (for example a network token reference).",
            "x-addedInVersion" : "68"
          },
          "holderName" : {
            "type" : "string",
            "description" : "The unique payment method code."
          },
          "iban" : {
            "type" : "string",
            "description" : "The IBAN of the bank account."
          },
          "id" : {
            "type" : "string",
            "description" : "A unique identifier of this stored payment method."
          },
          "issuerName" : {
            "type" : "string",
            "description" : "The name of the issuer of token or card.",
            "x-addedInVersion" : "68"
          },
          "lastFour" : {
            "type" : "string",
            "description" : "The last four digits of the PAN."
          },
          "name" : {
            "type" : "string",
            "description" : "The display name of the stored payment method."
          },
          "networkTxReference" : {
            "type" : "string",
            "description" : "Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.\n\nThis contains either the Mastercard Trace ID or the Visa Transaction ID."
          },
          "ownerName" : {
            "type" : "string",
            "description" : "The name of the bank account holder.",
            "x-addedInVersion" : "67"
          },
          "shopperEmail" : {
            "type" : "string",
            "description" : "The shopper’s email address."
          },
          "shopperReference" : {
            "type" : "string",
            "description" : "Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters.\n> Your reference must not include personally identifiable information (PII) such as name or email address.",
            "maxLength" : 256,
            "minLength" : 3
          },
          "supportedShopperInteractions" : {
            "type" : "array",
            "description" : "The supported shopper interactions for this stored payment method.",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The type of payment method."
          }
        }
      },
      "SubInputDetail" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "configuration" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Configuration parameters for the required input."
          },
          "items" : {
            "type" : "array",
            "description" : "In case of a select, the items to choose from.",
            "items" : {
              "$ref" : "#/components/schemas/Item"
            }
          },
          "key" : {
            "type" : "string",
            "description" : "The value to provide in the result."
          },
          "optional" : {
            "type" : "boolean",
            "description" : "True if this input is optional to provide."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the required input."
          },
          "value" : {
            "type" : "string",
            "description" : "The value can be pre-filled, if available."
          }
        }
      },
      "SubMerchant" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "city" : {
            "type" : "string",
            "description" : "The city of the sub-merchant's address.\n* Format: Alphanumeric\n* Maximum length: 13 characters"
          },
          "country" : {
            "type" : "string",
            "description" : "The three-letter country code of the sub-merchant's address. For example, **BRA** for Brazil. \n* Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)\n* Fixed length: 3 characters"
          },
          "mcc" : {
            "type" : "string",
            "description" : "The sub-merchant's 4-digit Merchant Category Code (MCC). \n* Format: Numeric\n* Fixed length: 4 digits"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement.\n* Format: Alphanumeric\n* Maximum length: 22 characters"
          },
          "taxId" : {
            "type" : "string",
            "description" : "The tax ID of the sub-merchant.\n* Format: Numeric\n* Fixed length: 11 digits for the CPF or 14 digits for the CNPJ"
          }
        }
      },
      "SubMerchantInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/BillingAddress",
            "description" : "Required for transactions performed by registered payment facilitators. The sub-merchant's address.\n"
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "Required for transactions performed by registered payment facilitators. The amount of the payment corresponding to each sub-merchant. This value will be different than the request amount if shopper is purchasing items at different sub-merchants' shops."
          },
          "email" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The email associated with the sub-merchant's account.",
            "maxLength" : 320
          },
          "id" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant. \n* Format: Alphanumeric\n* Maximum length: 15 characters"
          },
          "mcc" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The sub-merchant's 4-digit Merchant Category Code (MCC). \n* Format: Numeric\n* Fixed length: 4 digits"
          },
          "name" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement that will appear in the card statement.\nException: for acquirers in Brazil, this value does not overwrite the shopper statement.\n* Format: Alphanumeric\n* Maximum length: 22 characters"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The phone number associated with the sub-merchant's account.",
            "maxLength" : 20
          },
          "registeredSince" : {
            "type" : "string"
          },
          "taxId" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant.\n* Format: Numeric\n* Fixed length: 11 digits for the CPF or 14 digits for the CNPJ"
          },
          "url" : {
            "type" : "string",
            "description" : "Required for transactions performed by registered payment facilitators. The sub-merchant's URL on the platform, i.e. the sub-merchant's shop.",
            "maxLength" : 320
          }
        }
      },
      "SubMerchantInfoWrapper" : {
        "properties" : {
          "SubMerchant" : {
            "$ref" : "#/components/schemas/SubMerchantInfo"
          }
        }
      },
      "Surcharge" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The [surcharge](https://docs.adyen.com/online-payments/surcharge/) amount to apply to the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes). When you apply surcharge, include the surcharge in the `amount.value` field.\n\nReview our [Surcharge compliance guide](https://docs.adyen.com/development-resources/surcharge-compliance/) to learn about how to comply with regulatory requirements when applying surcharge."
          }
        },
        "required" : [ "value" ]
      },
      "TaxTotal" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount"
          }
        }
      },
      "ThreeDS2RequestData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "acctInfo" : {
            "$ref" : "#/components/schemas/AcctInfo",
            "description" : "Additional information about the cardholder’s account provided by the 3DS Requestor.",
            "x-addedInVersion" : "68"
          },
          "acctType" : {
            "type" : "string",
            "description" : "Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values:\n* **01** — Not applicable\n* **02** — Credit\n* **03** — Debit",
            "enum" : [ "01", "02", "03" ],
            "maxLength" : 2,
            "minLength" : 2,
            "x-addedInVersion" : "68"
          },
          "acquirerBIN" : {
            "type" : "string",
            "description" : "Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.",
            "x-addedInVersion" : "49"
          },
          "acquirerMerchantID" : {
            "type" : "string",
            "description" : "Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant's acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.",
            "x-addedInVersion" : "49"
          },
          "addrMatch" : {
            "type" : "string",
            "description" : "Indicates whether the cardholder shipping address and cardholder billing address are the same. Allowed values:\n* **Y** — Shipping address matches billing address.\n* **N** — Shipping address does not match billing address.",
            "enum" : [ "Y", "N" ],
            "maxLength" : 1,
            "minLength" : 1,
            "x-addedInVersion" : "68"
          },
          "authenticationOnly" : {
            "type" : "boolean",
            "default" : false,
            "deprecated" : true,
            "description" : "If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.",
            "x-deprecatedInVersion" : "50",
            "x-deprecatedMessage" : "Use `threeDSAuthenticationOnly` instead."
          },
          "challengeIndicator" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Possibility to specify a preference for receiving a challenge from the issuer.\nAllowed values:\n* `noPreference`\n* `requestNoChallenge`\n* `requestChallenge`\n* `requestChallengeAsMandate`\n",
            "enum" : [ "noPreference", "requestNoChallenge", "requestChallenge", "requestChallengeAsMandate" ],
            "x-deprecatedInVersion" : "68",
            "x-deprecatedMessage" : "Use `threeDSRequestorChallengeInd` instead."
          },
          "deviceChannel" : {
            "type" : "string",
            "description" : "The environment of the shopper.\nAllowed values:\n* `app`\n* `browser`"
          },
          "deviceRenderOptions" : {
            "$ref" : "#/components/schemas/DeviceRenderOptions",
            "description" : "Display options for the 3D Secure 2 SDK.\nOptional and only for `deviceChannel` **app**."
          },
          "homePhone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The home phone number provided by the cardholder. The phone number must consist of a country code, followed by the number. If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`, and did not send the shopper's phone number in `telephoneNumber`.",
            "x-addedInVersion" : "68"
          },
          "mcc" : {
            "type" : "string",
            "description" : "Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The `mcc` is a four-digit code with which the previously given `acquirerMerchantID` is registered at the scheme.",
            "x-addedInVersion" : "49"
          },
          "merchantName" : {
            "type" : "string",
            "description" : "Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters.\n> Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.",
            "x-addedInVersion" : "49"
          },
          "messageVersion" : {
            "type" : "string",
            "description" : "The `messageVersion` value indicating the 3D Secure 2 protocol version."
          },
          "mobilePhone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The mobile phone number provided by the cardholder. The phone number must consist of a country code, followed by the number. If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`, and did not send the shopper's phone number in `telephoneNumber`.",
            "x-addedInVersion" : "68"
          },
          "notificationURL" : {
            "type" : "string",
            "description" : "URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**."
          },
          "payTokenInd" : {
            "type" : "boolean",
            "description" : "Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS.",
            "x-addedInVersion" : "68"
          },
          "paymentAuthenticationUseCase" : {
            "type" : "string",
            "description" : "Indicates the type of payment for which an authentication is requested (message extension)",
            "x-addedInVersion" : "68"
          },
          "purchaseInstalData" : {
            "type" : "string",
            "description" : "Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters.",
            "maxLength" : 3,
            "minLength" : 1,
            "x-addedInVersion" : "68"
          },
          "recurringExpiry" : {
            "type" : "string",
            "description" : "Date after which no further authorisations shall be performed. Format: YYYYMMDD",
            "x-addedInVersion" : "68"
          },
          "recurringFrequency" : {
            "type" : "string",
            "description" : "Indicates the minimum number of days between authorisations. Maximum length: 4 characters.",
            "maxLength" : 4,
            "x-addedInVersion" : "68"
          },
          "sdkAppID" : {
            "type" : "string",
            "description" : "The `sdkAppID` value as received from the 3D Secure 2 SDK.\nRequired for `deviceChannel` set to **app**."
          },
          "sdkEncData" : {
            "type" : "string",
            "description" : "The `sdkEncData` value as received from the 3D Secure 2 SDK.\nRequired for `deviceChannel` set to **app**."
          },
          "sdkEphemPubKey" : {
            "$ref" : "#/components/schemas/SDKEphemPubKey",
            "description" : "The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK.\nRequired for `deviceChannel` set to **app**."
          },
          "sdkMaxTimeout" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 60,
            "description" : "The maximum amount of time in minutes for the 3D Secure 2 authentication process.\nOptional and only for `deviceChannel` set to **app**. Defaults to **60** minutes."
          },
          "sdkReferenceNumber" : {
            "type" : "string",
            "description" : "The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK.\nOnly for `deviceChannel` set to **app**."
          },
          "sdkTransID" : {
            "type" : "string",
            "description" : "The `sdkTransID` value as received from the 3D Secure 2 SDK.\nOnly for `deviceChannel` set to **app**."
          },
          "sdkVersion" : {
            "type" : "string",
            "description" : "Version of the 3D Secure 2 mobile SDK. \nOnly for `deviceChannel` set to **app**.",
            "x-addedInVersion" : "40"
          },
          "threeDSCompInd" : {
            "type" : "string",
            "description" : "Completion indicator for the device fingerprinting."
          },
          "threeDSRequestorAuthenticationInd" : {
            "type" : "string",
            "description" : "Indicates the type of Authentication request.",
            "x-addedInVersion" : "68"
          },
          "threeDSRequestorAuthenticationInfo" : {
            "$ref" : "#/components/schemas/ThreeDSRequestorAuthenticationInfo",
            "description" : "Information about how the 3DS Requestor authenticated the cardholder before or during the transaction",
            "x-addedInVersion" : "68"
          },
          "threeDSRequestorChallengeInd" : {
            "type" : "string",
            "description" : "Indicates whether a challenge is requested for this transaction. Possible values:\n* **01** — No preference\n* **02** — No challenge requested\n* **03** — Challenge requested (3DS Requestor preference)\n* **04** — Challenge requested (Mandate)\n* **05** — No challenge (transactional risk analysis is already performed)\n* **06** — Data Only",
            "enum" : [ "01", "02", "03", "04", "05", "06" ],
            "x-addedInVersion" : "68"
          },
          "threeDSRequestorID" : {
            "type" : "string",
            "description" : "Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2."
          },
          "threeDSRequestorName" : {
            "type" : "string",
            "description" : "Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2."
          },
          "threeDSRequestorPriorAuthenticationInfo" : {
            "$ref" : "#/components/schemas/ThreeDSRequestorPriorAuthenticationInfo",
            "description" : "Information about how the 3DS Requestor authenticated the cardholder as part of a previous 3DS transaction.",
            "x-addedInVersion" : "68"
          },
          "threeDSRequestorURL" : {
            "type" : "string",
            "description" : "URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process."
          },
          "transType" : {
            "type" : "string",
            "description" : "Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values:\n* **01** — Goods/Service Purchase\n* **03** — Check Acceptance\n* **10** — Account Funding\n* **11** — Quasi-Cash Transaction\n* **28** — Prepaid Activation and Load",
            "enum" : [ "01", "03", "10", "11", "28" ],
            "maxLength" : 2,
            "minLength" : 2,
            "x-addedInVersion" : "68"
          },
          "transactionType" : {
            "type" : "string",
            "description" : "Identify the type of the transaction being authenticated.",
            "enum" : [ "goodsOrServicePurchase", "checkAcceptance", "accountFunding", "quasiCashTransaction", "prepaidActivationAndLoad" ],
            "x-addedInVersion" : "50"
          },
          "whiteListStatus" : {
            "type" : "string",
            "description" : "The `whiteListStatus` value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.",
            "x-addedInVersion" : "49"
          },
          "workPhone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The work phone number provided by the cardholder. The phone number must consist of a country code, followed by the number. If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`, and did not send the shopper's phone number in `telephoneNumber`.",
            "x-addedInVersion" : "68"
          }
        },
        "required" : [ "deviceChannel" ]
      },
      "ThreeDS2RequestFields" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "acctInfo" : {
            "$ref" : "#/components/schemas/AcctInfo",
            "description" : "Additional information about the cardholder’s account provided by the 3DS Requestor.",
            "x-addedInVersion" : "68"
          },
          "acctType" : {
            "type" : "string",
            "description" : "Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values:\n* **01** — Not applicable\n* **02** — Credit\n* **03** — Debit",
            "enum" : [ "01", "02", "03" ],
            "maxLength" : 2,
            "minLength" : 2,
            "x-addedInVersion" : "68"
          },
          "acquirerBIN" : {
            "type" : "string",
            "description" : "Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.",
            "x-addedInVersion" : "49"
          },
          "acquirerMerchantID" : {
            "type" : "string",
            "description" : "Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant's acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.",
            "x-addedInVersion" : "49"
          },
          "addrMatch" : {
            "type" : "string",
            "description" : "Indicates whether the cardholder shipping Address and cardholder billing address are the same. Allowed values:\n* **Y** — Shipping Address matches Billing Address.\n* **N** — Shipping Address does not match Billing Address.",
            "enum" : [ "Y", "N" ],
            "maxLength" : 1,
            "minLength" : 1,
            "x-addedInVersion" : "68"
          },
          "authenticationOnly" : {
            "type" : "boolean",
            "default" : false,
            "deprecated" : true,
            "description" : "If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.",
            "x-deprecatedInVersion" : "50",
            "x-deprecatedMessage" : "Use `threeDSAuthenticationOnly` instead."
          },
          "challengeIndicator" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Possibility to specify a preference for receiving a challenge from the issuer.\nAllowed values:\n* `noPreference`\n* `requestNoChallenge`\n* `requestChallenge`\n* `requestChallengeAsMandate`\n",
            "enum" : [ "noPreference", "requestNoChallenge", "requestChallenge", "requestChallengeAsMandate" ],
            "x-deprecatedInVersion" : "68",
            "x-deprecatedMessage" : "Use `threeDSRequestorChallengeInd` instead."
          },
          "deviceRenderOptions" : {
            "$ref" : "#/components/schemas/DeviceRenderOptions",
            "description" : "Display options for the 3D Secure 2 SDK.\nOptional and only for `deviceChannel` **app**."
          },
          "homePhone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The home phone number provided by the cardholder. The phone number must consist of a country code, followed by the number. If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`, and did not send the shopper's phone number in `telephoneNumber`.",
            "x-addedInVersion" : "68"
          },
          "mcc" : {
            "type" : "string",
            "description" : "Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The `mcc` is a four-digit code with which the previously given `acquirerMerchantID` is registered at the scheme.",
            "x-addedInVersion" : "49"
          },
          "merchantName" : {
            "type" : "string",
            "description" : "Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters.\n> Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.",
            "x-addedInVersion" : "49"
          },
          "messageVersion" : {
            "type" : "string",
            "description" : "The `messageVersion` value indicating the 3D Secure 2 protocol version."
          },
          "mobilePhone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The mobile phone number provided by the cardholder. The phone number must consist of a country code, followed by the number. If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`, and did not send the shopper's phone number in `telephoneNumber`.",
            "x-addedInVersion" : "68"
          },
          "notificationURL" : {
            "type" : "string",
            "description" : "URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**."
          },
          "payTokenInd" : {
            "type" : "boolean",
            "description" : "Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS.",
            "x-addedInVersion" : "68"
          },
          "paymentAuthenticationUseCase" : {
            "type" : "string",
            "description" : "Indicates the type of payment for which an authentication is requested (message extension)",
            "x-addedInVersion" : "68"
          },
          "purchaseInstalData" : {
            "type" : "string",
            "description" : "Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters.",
            "maxLength" : 3,
            "minLength" : 1,
            "x-addedInVersion" : "68"
          },
          "recurringExpiry" : {
            "type" : "string",
            "description" : "Date after which no further authorisations shall be performed. Format: YYYYMMDD",
            "x-addedInVersion" : "68"
          },
          "recurringFrequency" : {
            "type" : "string",
            "description" : "Indicates the minimum number of days between authorisations. Maximum length: 4 characters.",
            "maxLength" : 4,
            "x-addedInVersion" : "68"
          },
          "sdkAppID" : {
            "type" : "string",
            "description" : "The `sdkAppID` value as received from the 3D Secure 2 SDK."
          },
          "sdkEphemPubKey" : {
            "$ref" : "#/components/schemas/SDKEphemPubKey",
            "description" : "The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK."
          },
          "sdkMaxTimeout" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 60,
            "description" : "The maximum amount of time in minutes for the 3D Secure 2 authentication process.\nOptional and only for `deviceChannel` set to **app**. Defaults to **60** minutes."
          },
          "sdkReferenceNumber" : {
            "type" : "string",
            "description" : "The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK."
          },
          "sdkTransID" : {
            "type" : "string",
            "description" : "The `sdkTransID` value as received from the 3D Secure 2 SDK."
          },
          "threeDSCompInd" : {
            "type" : "string",
            "description" : "Completion indicator for the device fingerprinting."
          },
          "threeDSRequestorAuthenticationInd" : {
            "type" : "string",
            "description" : "Indicates the type of Authentication request.",
            "x-addedInVersion" : "68"
          },
          "threeDSRequestorAuthenticationInfo" : {
            "$ref" : "#/components/schemas/ThreeDSRequestorAuthenticationInfo",
            "description" : "Information about how the 3DS Requestor authenticated the cardholder before or during the transaction",
            "x-addedInVersion" : "68"
          },
          "threeDSRequestorChallengeInd" : {
            "type" : "string",
            "description" : "Indicates whether a challenge is requested for this transaction. Possible values:\n* **01** — No preference\n* **02** — No challenge requested\n* **03** — Challenge requested (3DS Requestor preference)\n* **04** — Challenge requested (Mandate)\n* **05** — No challenge (transactional risk analysis is already performed)\n* **06** — Data Only",
            "enum" : [ "01", "02", "03", "04", "05", "06" ],
            "x-addedInVersion" : "68"
          },
          "threeDSRequestorID" : {
            "type" : "string",
            "description" : "Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2."
          },
          "threeDSRequestorName" : {
            "type" : "string",
            "description" : "Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2."
          },
          "threeDSRequestorPriorAuthenticationInfo" : {
            "$ref" : "#/components/schemas/ThreeDSRequestorPriorAuthenticationInfo",
            "description" : "Information about how the 3DS Requestor authenticated the cardholder as part of a previous 3DS transaction.",
            "x-addedInVersion" : "68"
          },
          "threeDSRequestorURL" : {
            "type" : "string",
            "description" : "URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process."
          },
          "transType" : {
            "type" : "string",
            "description" : "Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values:\n* **01** — Goods/Service Purchase\n* **03** — Check Acceptance\n* **10** — Account Funding\n* **11** — Quasi-Cash Transaction\n* **28** — Prepaid Activation and Load",
            "enum" : [ "01", "03", "10", "11", "28" ],
            "maxLength" : 2,
            "minLength" : 2,
            "x-addedInVersion" : "68"
          },
          "transactionType" : {
            "type" : "string",
            "description" : "Identify the type of the transaction being authenticated.",
            "enum" : [ "goodsOrServicePurchase", "checkAcceptance", "accountFunding", "quasiCashTransaction", "prepaidActivationAndLoad" ],
            "x-addedInVersion" : "50"
          },
          "whiteListStatus" : {
            "type" : "string",
            "description" : "The `whiteListStatus` value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.",
            "x-addedInVersion" : "49"
          },
          "workPhone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The work phone number provided by the cardholder. The phone number must consist of a country code, followed by the number. If the value you provide does not follow the guidelines, we do not submit it for authentication.\n> Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`, and did not send the shopper's phone number in `telephoneNumber`.",
            "x-addedInVersion" : "68"
          }
        }
      },
      "ThreeDS2ResponseData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "acsChallengeMandated" : {
            "type" : "string"
          },
          "acsOperatorID" : {
            "type" : "string"
          },
          "acsReferenceNumber" : {
            "type" : "string"
          },
          "acsSignedContent" : {
            "type" : "string"
          },
          "acsTransID" : {
            "type" : "string"
          },
          "acsURL" : {
            "type" : "string"
          },
          "authenticationType" : {
            "type" : "string"
          },
          "cardHolderInfo" : {
            "type" : "string"
          },
          "cavvAlgorithm" : {
            "type" : "string"
          },
          "challengeIndicator" : {
            "type" : "string"
          },
          "dsReferenceNumber" : {
            "type" : "string"
          },
          "dsTransID" : {
            "type" : "string"
          },
          "exemptionIndicator" : {
            "type" : "string"
          },
          "messageVersion" : {
            "type" : "string"
          },
          "riskScore" : {
            "type" : "string"
          },
          "sdkEphemPubKey" : {
            "type" : "string"
          },
          "threeDSServerTransID" : {
            "type" : "string"
          },
          "transStatus" : {
            "type" : "string"
          },
          "transStatusReason" : {
            "type" : "string"
          }
        }
      },
      "ThreeDS2Result" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "authenticationValue" : {
            "type" : "string",
            "description" : "The `authenticationValue` value as defined in the 3D Secure 2 specification."
          },
          "cavvAlgorithm" : {
            "type" : "string",
            "description" : "The algorithm used by the ACS to calculate the authentication value, only for Cartes Bancaires integrations.",
            "x-addedInVersion" : "50"
          },
          "challengeCancel" : {
            "type" : "string",
            "description" : "Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).",
            "enum" : [ "01", "02", "03", "04", "05", "06", "07" ],
            "x-addedInVersion" : "67"
          },
          "dsTransID" : {
            "type" : "string",
            "description" : "The `dsTransID` value as defined in the 3D Secure 2 specification."
          },
          "eci" : {
            "type" : "string",
            "description" : "The `eci` value as defined in the 3D Secure 2 specification."
          },
          "exemptionIndicator" : {
            "type" : "string",
            "description" : "Indicates the exemption type that was applied by the issuer to the authentication, if exemption applied.\nAllowed values:\n* `lowValue`\n* `secureCorporate`\n* `trustedBeneficiary`\n* `transactionRiskAnalysis`\n",
            "enum" : [ "lowValue", "secureCorporate", "trustedBeneficiary", "transactionRiskAnalysis" ],
            "x-addedInVersion" : "67"
          },
          "messageVersion" : {
            "type" : "string",
            "description" : "The `messageVersion` value as defined in the 3D Secure 2 specification.",
            "x-addedInVersion" : "49"
          },
          "riskScore" : {
            "type" : "string",
            "description" : "Risk score calculated by Cartes Bancaires Directory Server (DS).",
            "x-addedInVersion" : "67"
          },
          "threeDSRequestorChallengeInd" : {
            "type" : "string",
            "description" : "Indicates whether a challenge is requested for this transaction. Possible values:\n* **01** — No preference\n* **02** — No challenge requested\n* **03** — Challenge requested (3DS Requestor preference)\n* **04** — Challenge requested (Mandate)\n* **05** — No challenge (transactional risk analysis is already performed)\n* **06** — Data Only",
            "enum" : [ "01", "02", "03", "04", "05", "06" ],
            "x-addedInVersion" : "68"
          },
          "threeDSServerTransID" : {
            "type" : "string",
            "description" : "The `threeDSServerTransID` value as defined in the 3D Secure 2 specification."
          },
          "timestamp" : {
            "type" : "string",
            "description" : "The `timestamp` value of the 3D Secure 2 authentication."
          },
          "transStatus" : {
            "type" : "string",
            "description" : "The `transStatus` value as defined in the 3D Secure 2 specification."
          },
          "transStatusReason" : {
            "type" : "string",
            "description" : "Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values)."
          },
          "whiteListStatus" : {
            "type" : "string",
            "description" : "The `whiteListStatus` value as defined in the 3D Secure 2 specification.",
            "x-addedInVersion" : "49"
          }
        }
      },
      "ThreeDSRequestorAuthenticationInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "threeDSReqAuthData" : {
            "type" : "string",
            "description" : "Data that documents and supports a specific authentication process. Maximum length: 2048 bytes."
          },
          "threeDSReqAuthMethod" : {
            "type" : "string",
            "description" : "Mechanism used by the Cardholder to authenticate to the 3DS Requestor. Allowed values:\n* **01** — No 3DS Requestor authentication occurred (for example, cardholder “logged in” as guest).\n* **02** — Login to the cardholder account at the 3DS Requestor system using 3DS Requestor’s own credentials.\n* **03** — Login to the cardholder account at the 3DS Requestor system using federated ID.\n* **04** — Login to the cardholder account at the 3DS Requestor system using issuer credentials.\n* **05** — Login to the cardholder account at the 3DS Requestor system using third-party authentication.\n* **06** — Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator.",
            "enum" : [ "01", "02", "03", "04", "05", "06" ],
            "maxLength" : 2,
            "minLength" : 2
          },
          "threeDSReqAuthTimestamp" : {
            "type" : "string",
            "description" : "Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM",
            "maxLength" : 12,
            "minLength" : 12
          }
        }
      },
      "ThreeDSRequestorPriorAuthenticationInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "threeDSReqPriorAuthData" : {
            "type" : "string",
            "description" : "Data that documents and supports a specific authentication process. Maximum length: 2048 bytes."
          },
          "threeDSReqPriorAuthMethod" : {
            "type" : "string",
            "description" : "Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor. Allowed values:\n* **01** — Frictionless authentication occurred by ACS.\n* **02** — Cardholder challenge occurred by ACS.\n* **03** — AVS verified.\n* **04** — Other issuer methods.",
            "enum" : [ "01", "02", "03", "04" ],
            "maxLength" : 2,
            "minLength" : 2
          },
          "threeDSReqPriorAuthTimestamp" : {
            "type" : "string",
            "description" : "Date and time in UTC of the prior cardholder authentication. Format: YYYYMMDDHHMM",
            "maxLength" : 12,
            "minLength" : 12
          },
          "threeDSReqPriorRef" : {
            "type" : "string",
            "description" : "This data element provides additional information to the ACS to determine the best approach for handing a request. This data element contains an ACS Transaction ID for a prior authenticated transaction. For example, the first recurring transaction that was authenticated with the cardholder. Length: 30 characters.",
            "maxLength" : 36,
            "minLength" : 36
          }
        }
      },
      "ThreeDSecureData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "authenticationResponse" : {
            "type" : "string",
            "description" : "In 3D Secure 2, this is the `transStatus` from the challenge result. If the transaction was frictionless, omit this parameter.\n\n",
            "enum" : [ "Y", "N", "U", "A" ]
          },
          "cavv" : {
            "type" : "string",
            "format" : "byte",
            "description" : "The cardholder authentication value (base64 encoded, 20 bytes in a decoded form)."
          },
          "cavvAlgorithm" : {
            "type" : "string",
            "description" : "The CAVV algorithm used. Include this only for 3D Secure 1."
          },
          "challengeCancel" : {
            "type" : "string",
            "description" : "Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).",
            "enum" : [ "01", "02", "03", "04", "05", "06", "07" ],
            "x-addedInVersion" : "67"
          },
          "directoryResponse" : {
            "type" : "string",
            "description" : "In 3D Secure 2, this is the `transStatus` from the `ARes`.\n\n",
            "enum" : [ "A", "C", "D", "I", "N", "R", "U", "Y" ]
          },
          "dsTransID" : {
            "type" : "string",
            "description" : "Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.",
            "x-addedInVersion" : "40"
          },
          "eci" : {
            "type" : "string",
            "description" : "The electronic commerce indicator."
          },
          "riskScore" : {
            "type" : "string",
            "description" : "Risk score calculated by Directory Server (DS). Required for Cartes Bancaires integrations.",
            "x-addedInVersion" : "67"
          },
          "threeDSVersion" : {
            "type" : "string",
            "description" : "The version of the 3D Secure protocol.",
            "x-addedInVersion" : "40"
          },
          "tokenAuthenticationVerificationValue" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Network token authentication verification value (TAVV). The network token cryptogram.",
            "x-addedInVersion" : "68"
          },
          "transStatusReason" : {
            "type" : "string",
            "description" : "Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).",
            "x-addedInVersion" : "67"
          },
          "xid" : {
            "type" : "string",
            "format" : "byte",
            "description" : "Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form)."
          }
        }
      },
      "TwintDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "subtype" : {
            "type" : "string",
            "description" : "The type of flow to initiate."
          },
          "type" : {
            "type" : "string",
            "description" : "The payment method type.",
            "enum" : [ "twint" ]
          }
        },
        "title" : "Twint"
      },
      "UpdatePaymentLinkRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the payment link. Possible values:\n* **expired**",
            "enum" : [ "expired" ]
          }
        },
        "required" : [ "status" ]
      },
      "UpiCollectDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "billingSequenceNumber" : {
            "type" : "string",
            "description" : "The sequence number for the debit. For example, send **2** if this is the second debit for the subscription. The sequence number is included in the notification sent to the shopper."
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "shopperNotificationReference" : {
            "type" : "string",
            "description" : "The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "upi_collect",
            "description" : "**upi_collect**",
            "enum" : [ "upi_collect" ]
          },
          "virtualPaymentAddress" : {
            "type" : "string",
            "description" : "The virtual payment address for UPI."
          }
        },
        "required" : [ "billingSequenceNumber", "type" ],
        "title" : "UPI Collect"
      },
      "UpiIntentDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "appId" : {
            "type" : "string",
            "description" : "TPAP (Third Party Application) Id that is being used to make the UPI payment"
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "shopperNotificationReference" : {
            "type" : "string",
            "description" : "The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "upi_intent",
            "description" : "**upi_intent**",
            "enum" : [ "upi_intent" ]
          }
        },
        "required" : [ "type" ],
        "title" : "UPI Intent"
      },
      "UtilityRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "originDomains" : {
            "type" : "array",
            "description" : "The list of origin domains, for which origin keys are requested.",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "originDomains" ]
      },
      "UtilityResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "originKeys" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The list of origin keys for all requested domains. For each list item, the key is the domain and the value is the origin key.",
            "x-addedInVersion" : "1"
          }
        }
      },
      "VippsDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "telephoneNumber" : {
            "type" : "string",
            "description" : ""
          },
          "type" : {
            "type" : "string",
            "default" : "vipps",
            "description" : "**vipps**",
            "enum" : [ "vipps" ]
          }
        },
        "required" : [ "telephoneNumber" ],
        "title" : "Vipps"
      },
      "VisaCheckoutDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "fundingSource" : {
            "type" : "string",
            "description" : "The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.",
            "enum" : [ "credit", "debit" ]
          },
          "type" : {
            "type" : "string",
            "default" : "visacheckout",
            "description" : "**visacheckout**",
            "enum" : [ "visacheckout" ]
          },
          "visaCheckoutCallId" : {
            "type" : "string",
            "description" : "The Visa Click to Pay Call ID value. When your shopper selects a payment and/or a shipping address from Visa Click to Pay, you will receive a Visa Click to Pay Call ID."
          }
        },
        "required" : [ "visaCheckoutCallId" ],
        "title" : "Visa Checkout"
      },
      "WeChatPayDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "type" : {
            "type" : "string",
            "default" : "wechatpay",
            "description" : "**wechatpay**",
            "enum" : [ "wechatpay", "wechatpay_pos" ]
          }
        },
        "title" : "WeChat Pay"
      },
      "WeChatPayMiniProgramDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "appId" : {
            "type" : "string"
          },
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "openid" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "default" : "wechatpayMiniProgram",
            "description" : "**wechatpayMiniProgram**",
            "enum" : [ "wechatpayMiniProgram" ]
          }
        },
        "title" : "WeChat Pay - Mini Program"
      },
      "ZipDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "checkoutAttemptId" : {
            "type" : "string",
            "description" : "The checkout attempt identifier."
          },
          "clickAndCollect" : {
            "type" : "string",
            "description" : "Set this to **true** if the shopper would like to pick up and collect their order, instead of having the goods delivered to them."
          },
          "recurringDetailReference" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "x-deprecatedInVersion" : "49",
            "x-deprecatedMessage" : "Use `storedPaymentMethodId` instead."
          },
          "storedPaymentMethodId" : {
            "type" : "string",
            "description" : "This is the `recurringDetailReference` returned in the response when you created the token.",
            "maxLength" : 64,
            "x-addedInVersion" : "49"
          },
          "type" : {
            "type" : "string",
            "default" : "zip",
            "description" : "**zip**",
            "enum" : [ "zip", "zip_pos" ]
          }
        },
        "title" : "Zip"
      },
      "Result" : {
        "type" : "string",
        "enum" : [ "VALID", "INVALID", "UNKNOWN" ]
      },
      "ValidateShopperIdResponse" : {
        "type" : "object",
        "properties" : {
          "reason" : {
            "type" : "string"
          },
          "result" : {
            "$ref" : "#/components/schemas/Result"
          }
        }
      },
      "DefaultErrorResponseEntity" : {
        "type" : "object",
        "description" : "Standardized error response following RFC-7807 format",
        "externalDocs" : {
          "url" : "https://www.rfc-editor.org/rfc/rfc7807"
        },
        "properties" : {
          "detail" : {
            "type" : "string",
            "description" : "A human-readable explanation specific to this occurrence of the problem."
          },
          "errorCode" : {
            "type" : "string",
            "description" : "Unique business error code."
          },
          "instance" : {
            "type" : "string",
            "description" : "A URI that identifies the specific occurrence of the problem if applicable."
          },
          "invalidFields" : {
            "type" : "array",
            "description" : "Array of fields with validation errors when applicable.",
            "items" : {
              "$ref" : "#/components/schemas/InvalidField"
            }
          },
          "requestId" : {
            "type" : "string",
            "description" : "The unique reference for the request."
          },
          "status" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The HTTP status code."
          },
          "title" : {
            "type" : "string",
            "description" : "A short, human-readable summary of the problem type."
          },
          "type" : {
            "type" : "string",
            "description" : "A URI that identifies the validation error type. It points to human-readable documentation for the problem type."
          }
        }
      },
      "InvalidField" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The field that has an invalid value."
          },
          "value" : {
            "type" : "string",
            "description" : "The invalid value."
          },
          "message" : {
            "type" : "string",
            "description" : "Description of the validation error."
          }
        },
        "required" : [ "message", "name", "value" ]
      },
      "PayToPaymentMethod" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ShopperIdPaymentMethod"
        }, {
          "type" : "object",
          "properties" : {
            "shopperReference" : {
              "type" : "string",
              "maxLength" : 256,
              "minLength" : 0
            }
          }
        } ],
        "required" : [ "type" ]
      },
      "ShopperIdPaymentMethod" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "payTo" : "#/components/schemas/PayToPaymentMethod",
            "upi_collect" : "#/components/schemas/UPIPaymentMethod"
          }
        },
        "properties" : {
          "type" : {
            "type" : "string",
            "maxLength" : 50,
            "minLength" : 0,
            "pattern" : "payTo|upi_collect"
          }
        },
        "required" : [ "type" ]
      },
      "UPIPaymentMethod" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ShopperIdPaymentMethod"
        }, {
          "type" : "object",
          "properties" : {
            "virtualPaymentAddress" : {
              "type" : "string",
              "maxLength" : 256,
              "minLength" : 1
            }
          }
        } ],
        "required" : [ "type" ]
      },
      "ValidateShopperIdRequest" : {
        "type" : "object",
        "properties" : {
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account identifier, with which you want to process the transaction.",
            "maxLength" : 1000,
            "minLength" : 0
          },
          "paymentMethod" : {
            "$ref" : "#/components/schemas/ShopperIdPaymentMethod",
            "description" : "paymentMethod"
          },
          "shopperEmail" : {
            "type" : "string",
            "maxLength" : 300,
            "minLength" : 0
          },
          "shopperIP" : {
            "type" : "string",
            "maxLength" : 15,
            "minLength" : 0
          },
          "shopperReference" : {
            "type" : "string",
            "maxLength" : 256,
            "minLength" : 0
          }
        },
        "required" : [ "merchantAccount", "paymentMethod" ]
      }
    },
    "parameters" : {
      "Idempotency-Key" : {
        "name" : "Idempotency-Key",
        "in" : "header",
        "description" : "A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        },
        "example" : "37ca9c97-d1d1-4c62-89e8-706891a563ed"
      }
    },
    "examples" : {
      "generic-400" : {
        "summary" : "Response code 400. Bad request.",
        "value" : {
          "status" : 400,
          "errorCode" : "702",
          "message" : "Unexpected input: \", expected: }",
          "errorType" : "validation"
        }
      },
      "generic-401" : {
        "summary" : "Response code 401. Unauthorized.",
        "value" : {
          "status" : 401,
          "errorCode" : "000",
          "message" : "HTTP Status Response - Unauthorized",
          "errorType" : "security"
        }
      },
      "generic-403" : {
        "summary" : "Response code 403. Forbidden.",
        "value" : {
          "status" : 403,
          "errorCode" : "901",
          "message" : "Invalid Merchant Account",
          "errorType" : "security",
          "pspReference" : "881611827877203B"
        }
      },
      "generic-422" : {
        "summary" : "Response code 422. Unprocessable entity.",
        "value" : {
          "status" : 422,
          "errorCode" : "14_030",
          "message" : "Return URL is missing.",
          "errorType" : "validation",
          "pspReference" : "8816118280275544"
        }
      },
      "generic-500" : {
        "summary" : "Response code 500. Internal server error.",
        "value" : {
          "status" : 500,
          "errorCode" : "905",
          "message" : "Payment details are not supported",
          "errorType" : "configuration",
          "pspReference" : "8516091485743033"
        }
      },
      "get-paymentLinks-linkId-basic-200" : {
        "summary" : "Payment link details",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 8700
          },
          "countryCode" : "NL",
          "expiresAt" : "2021-04-08T14:06:39Z",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "reference" : "shopper-reference-ekvL83",
          "shopperLocale" : "hu-HU",
          "shopperReference" : "shopper-reference-LZfdWZ",
          "status" : "active",
          "url" : "https://test.adyen.link/PL61C53A8B97E6915A",
          "id" : "PL61C53A8B97E6915A"
        }
      },
      "get-sessions-sessionId-success-200" : {
        "summary" : "Response code: 200 - Success",
        "description" : "The status of the session with the specified ID.",
        "value" : {
          "id" : "CS12345678",
          "status" : "completed"
        }
      },
      "patch-paymentLinks-linkId-basic" : {
        "summary" : "Update the status of a payment link",
        "value" : {
          "status" : "expired"
        }
      },
      "patch-paymentLinks-linkId-basic-200" : {
        "summary" : "Payment link status updated",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 8700
          },
          "countryCode" : "NL",
          "expiresAt" : "2021-04-08T14:06:39Z",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "reference" : "shopper-reference-ekvL83",
          "shopperLocale" : "hu-HU",
          "shopperReference" : "shopper-reference-LZfdWZ",
          "status" : "expired",
          "url" : "https://test.adyen.link/PL61C53A8B97E6915A",
          "id" : "PL61C53A8B97E6915A"
        }
      },
      "post-applePay-sessions-basic" : {
        "summary" : "Get payment session for Apple Pay",
        "value" : {
          "displayName" : "YOUR_MERCHANT_NAME",
          "domainName" : "YOUR_DOMAIN_NAME",
          "merchantIdentifier" : "YOUR_MERCHANT_ID"
        }
      },
      "post-applePay-sessions-basic-200" : {
        "summary" : "Payment session data for Apple Pay",
        "value" : {
          "data" : "eyJ2Z..."
        }
      },
      "post-cancels-cancel-with-own-reference" : {
        "summary" : "Cancel a payment using your own reference",
        "description" : "Example cancel request with your own reference",
        "value" : {
          "paymentReference" : "YOUR_UNIQUE_REFERENCE_FOR_THE_PAYMENT",
          "reference" : "YOUR_UNIQUE_REFERENCE_FOR_THE_CANCELLATION",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-cancels-cancel-with-own-reference-201" : {
        "summary" : "Payment cancellation requested",
        "description" : "Example response when a payment cancellation was requested",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "paymentReference" : "YOUR_UNIQUE_REFERENCE_FOR_THE_PAYMENT",
          "reference" : "YOUR_UNIQUE_REFERENCE_FOR_THE_CANCELLATION",
          "pspReference" : "993617894906488A",
          "status" : "received"
        }
      },
      "post-cardDetails-basic" : {
        "summary" : "Get a list of brands on a card with the unencrypted card number",
        "description" : "Example request for getting a list of brands on a card using the first 6 digits of the card number.",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "cardNumber" : "411111"
        }
      },
      "post-cardDetails-basic-200" : {
        "summary" : "List of brands on the card",
        "description" : "Example response when the card is co-branded.",
        "value" : {
          "brands" : [ {
            "type" : "visa",
            "supported" : true
          }, {
            "type" : "cartebancaire",
            "supported" : true
          } ],
          "fundingSource" : "CREDIT",
          "isCardCommercial" : false,
          "issuingCountryCode" : "FR"
        }
      },
      "post-cardDetails-supported-brands" : {
        "summary" : "Get a list of brands on a card specifying your supported card brands",
        "description" : "Example request for getting a list of brands on a card using the first 6 digits of the card number and including the card brands you support.",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "cardNumber" : "411111",
          "supportedBrands" : [ "visa", "mc", "amex" ]
        }
      },
      "post-cardDetails-supported-brands-200" : {
        "summary" : "List of brands on the card when you specify your supported card brands",
        "description" : "Example response when the card is co-branded, and you only support Visa.",
        "value" : {
          "brands" : [ {
            "type" : "visa",
            "supported" : true
          }, {
            "type" : "cartebancaire",
            "supported" : false
          } ],
          "fundingSource" : "CREDIT",
          "isCardCommercial" : false,
          "issuingCountryCode" : "FR"
        }
      },
      "post-donationCampaigns-donation-campaigns" : {
        "summary" : "Get a list of active donation campaigns",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "currency" : "EUR"
        }
      },
      "post-donationCampaigns-donation-campaigns-200" : {
        "summary" : "List of active donation campaigns",
        "value" : {
          "donationCampaigns" : [ {
            "id" : "DONATION_CAMPAIGN_ID",
            "campaignName" : "DONATION_CAMPAIGN_NAME",
            "donation" : {
              "currency" : "EUR",
              "type" : "fixedAmounts",
              "donationType" : "fixedAmounts",
              "values" : [ 100, 200, 300 ]
            },
            "nonprofitName" : "NONPROFIT_NAME",
            "causeName" : "NONPROFIT_CAUSE",
            "nonprofitDescription" : "NONPROFIT_DESCRIPTION.",
            "nonprofitUrl" : "NONPROFIT_WEBSITE_URL",
            "logoUrl" : "NONPROFIT_LOGO_URL",
            "bannerUrl" : "NONPROFIT_BANNER_URL",
            "termsAndConditionsUrl" : "NONPROFIT_TERMS_AND_CONDITIONS_URL"
          }, {
            "id" : "DONATION_CAMPAIGN_ID",
            "campaignName" : "DONATION_CAMPAIGN_NAME",
            "donation" : {
              "currency" : "EUR",
              "type" : "roundup",
              "donationType" : "roundup",
              "maxRoundupAmount" : 100
            },
            "nonprofitName" : "NONPROFIT_NAME",
            "causeName" : "NONPROFIT_CAUSE",
            "nonprofitDescription" : "NONPROFIT_DESCRIPTION.",
            "nonprofitUrl" : "NONPROFIT_WEBSITE_URL",
            "logoUrl" : "NONPROFIT_LOGO_URL",
            "bannerUrl" : "NONPROFIT_BANNER_URL",
            "termsAndConditionsUrl" : "NONPROFIT_TERMS_AND_CONDITIONS_URL"
          } ]
        }
      },
      "post-donations-donations" : {
        "summary" : "Start a donation transaction",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 1000
          },
          "reference" : "YOUR_DONATION_REFERENCE",
          "paymentMethod" : {
            "type" : "scheme"
          },
          "donationToken" : "YOUR_DONATION_TOKEN",
          "donationOriginalPspReference" : "991559660454807J",
          "donationAccount" : "NONPROFIT_ACCOUNT",
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "shopperInteraction" : "ContAuth"
        }
      },
      "post-donations-donations-200" : {
        "summary" : "Successful donation transaction",
        "value" : {
          "id" : "UNIQUE_RESOURCE_ID",
          "status" : "completed",
          "donationAccount" : "NONPROFIT_ACCOUNT",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "amount" : {
            "currency" : "EUR",
            "value" : 1000
          },
          "reference" : "YOUR_DONATION_REFERENCE",
          "payment" : {
            "pspReference" : "8535762347980628",
            "resultCode" : "Authorised",
            "amount" : {
              "currency" : "EUR",
              "value" : 1000
            },
            "merchantReference" : "YOUR_DONATION_REFERENCE"
          }
        }
      },
      "post-donations-donations-with-campaigns" : {
        "summary" : "Start a donation transaction for a donation campaign",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 1000
          },
          "reference" : "YOUR_DONATION_REFERENCE",
          "paymentMethod" : {
            "type" : "scheme"
          },
          "donationToken" : "YOUR_DONATION_TOKEN",
          "donationOriginalPspReference" : "991559660454807J",
          "donationCampaignId" : "DONATION_CAMPAIGN_ID",
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-donations-donations-with-campaigns-200" : {
        "summary" : "Successful donation to a donation campaign",
        "value" : {
          "id" : "UNIQUE_RESOURCE_ID",
          "status" : "completed",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "amount" : {
            "currency" : "EUR",
            "value" : 1000
          },
          "reference" : "YOUR_DONATION_REFERENCE",
          "payment" : {
            "pspReference" : "8535762347980628",
            "resultCode" : "Authorised",
            "amount" : {
              "currency" : "EUR",
              "value" : 1000
            },
            "merchantReference" : "YOUR_DONATION_REFERENCE"
          }
        }
      },
      "post-donations-donations-with-token" : {
        "summary" : "Start a donation transaction with a token",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 1000
          },
          "reference" : "YOUR_DONATION_REFERENCE",
          "paymentMethod" : {
            "type" : "scheme",
            "recurringDetailReference" : "7219687191761347"
          },
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "donationAccount" : "NONPROFIT_ACCOUNT",
          "shopperInteraction" : "ContAuth",
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "recurringProcessingModel" : "CardOnFile"
        }
      },
      "post-donations-donations-with-token-200" : {
        "summary" : "Successful donation transaction with a token",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 500
          },
          "donationAccount" : "NONPROFIT_ACCOUNT",
          "id" : "UNIQUE_RESOURCE_ID",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "payment" : {
            "pspReference" : "FJM726V375BV9D82",
            "resultCode" : "Authorised",
            "amount" : {
              "currency" : "EUR",
              "value" : 500
            },
            "merchantReference" : "YOUR_DONATION_REFERENCE"
          },
          "reference" : "1412563167350061",
          "status" : "completed"
        }
      },
      "post-donations-donations-with-token-422" : {
        "summary" : "Example error response when the donation account isn't valid",
        "value" : {
          "status" : 422,
          "errorCode" : "187",
          "message" : "Field 'additionalData.donationAccount' is not valid.",
          "errorType" : "validation"
        }
      },
      "post-orders-basic" : {
        "summary" : "Create an order",
        "value" : {
          "reference" : "YOUR_ORDER_REFERENCE",
          "amount" : {
            "value" : 2500,
            "currency" : "EUR"
          },
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-orders-basic-200" : {
        "summary" : "Order created",
        "value" : {
          "pspReference" : "8616178914061985",
          "resultCode" : "Success",
          "expiresAt" : "2021-04-09T14:16:46Z",
          "orderData" : "Ab02b4c0!BQABAgCxXvknCldOcRElkxY8Za7iyym4Wv8aDzyNwmj/3nh4G6YtwnUIJHaK62NlN4oIsACdkn1FEjBwKlheG40jvXcYGBk4KFV5WvOhTVCpv/KXnkrI7xQv/u2lE7U4wA+HPB6K4Zj2L8xO/ogZi+zGZqFs5m16jmkH7ku6FzXygXLNuUCuOlmlXSZhdkHHTNVQSq1MELDK9OL74y532ETRPTCNxx8WlEiZB+LDqYrPvH9GgigtD5kw8Do45jfFfG72kWBEgfYqp4mbUmBB9ebXFYZKfF0qvW1x7A2Y9+/MFlTIdXfKW484bJeDBCTTrmKGXIj+U4r5imr5fXTyNLcrxyUqwrb9jg+5B4qg1XB6Cgj5UPlSI4O62I7v0s5TTj69dzLwUQRxSQbwLrZVGYavXzeVKI54BVLRV3d/+BbPvTqnTo34UhfZbPlOx9F2eyaS0ZXdOKnHw89uGUgxUpLsMqnbRysi/pxpZaulel+0mExb68wVxb/7Teob5eRG4gp7cfZVZs6tLXOYWL+W0TqIlsa3hWsfM0LeaovzkoDtW/pK5JABXwMtLig9tsxoEh9ONYtIzkXC21LZ8ebiuSIMaPizjF8yca+QxrCZalQsu6uKnBz/mm8nnsflaGU2QS5zcoxk1RudL1Bl36LM9UZGPpFEYWiYA4sUsnNLw7peJjWCGhDepnwMv4TlgsEtoDtz1T54AEp7ImtleSI6IkFGMEFBQTEwM0NBNTM3RUFFRDg3QzI0REQ1MzkwOUI4MEE3OEE5MjNFMzgyM0Q2OERBQ0M5NEI5RkY4MzA1REMifRslOdmfgUHTXl66WPD9xoW2whIeRx/jR++2MqNE16x6zQy+KtDN8/h60crZwmqkjVTQYqQlsYSYDHSIyb4wnnay16/5il1yS7vN3UCLaTXjYBIAyyx6Wr9j4P3CI/etB+PpviHoESC4mV6ZN4whMDQyziQ8s230GtboXbh42qND7rk9phySBogowQlXrtF+l2n2F46nyif0owEgik5fGARfvjZtY2w23s30KMLNwU4gWSvX4H6RMVS8TfZH2fKfNrwB3tZUXwYkELs5ntaHysswq5Mn5aq2BKAMHu/Rh/wureMSI73Qi0avjrzWCwzt3JH4wnzErMnOZwSdgA==",
          "reference" : "shopper-reference-ekvL83",
          "remainingAmount" : {
            "currency" : "EUR",
            "value" : 2500
          },
          "amount" : {
            "currency" : "EUR",
            "value" : 300
          }
        }
      },
      "post-orders-cancel-basic" : {
        "summary" : "Cancel an order",
        "value" : {
          "order" : {
            "pspReference" : "8815517812932012",
            "orderData" : "823fh892f8f18f4...148f13f9f3f"
          },
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-orders-cancel-basic-200" : {
        "summary" : "Order cancelled",
        "value" : {
          "pspReference" : "8816178914079738",
          "resultCode" : "Received"
        }
      },
      "post-originKeys-basic" : {
        "summary" : "Get origin keys",
        "value" : {
          "originDomains" : [ "https://www.your-domain1.com", "https://www.your-domain2.com", "https://www.your-domain3.com" ]
        }
      },
      "post-originKeys-basic-200" : {
        "summary" : "Example response for request 'basic'",
        "value" : {
          "originKeys" : {
            "https://www.your-domain1.com" : "pub.v2.8116178901076090.aHR0cHM6Ly93d3cueW91ci1kb21haW4xLmNvbQ.pvbYlrXz0ICP4kwMJXDGDLVMqALhwXr1MSRjT-fkhvw",
            "https://www.your-domain3.com" : "pub.v2.8116178901076090.aHR0cHM6Ly93d3cueW91ci1kb21haW4zLmNvbQ.FrTpVz7_RzAywKasM0kXCRoMfoMkKIKaxjFymRGORIc",
            "https://www.your-domain2.com" : "pub.v2.8116178901076090.aHR0cHM6Ly93d3cueW91ci1kb21haW4yLmNvbQ.LdN9kvJ35fYFFiBSJA4idMnwwxJ5_yXpeNS__Ap5wkg"
          }
        }
      },
      "post-paymentLinks-basic" : {
        "summary" : "Create a payment link",
        "value" : {
          "reference" : "YOUR_ORDER_NUMBER",
          "amount" : {
            "value" : 1250,
            "currency" : "BRL"
          },
          "countryCode" : "BR",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "shopperEmail" : "test@email.com",
          "shopperLocale" : "pt-BR",
          "billingAddress" : {
            "street" : "Roque Petroni Jr",
            "postalCode" : "59000060",
            "city" : "São Paulo",
            "houseNumberOrName" : "999",
            "country" : "BR",
            "stateOrProvince" : "SP"
          },
          "deliveryAddress" : {
            "street" : "Roque Petroni Jr",
            "postalCode" : "59000060",
            "city" : "São Paulo",
            "houseNumberOrName" : "999",
            "country" : "BR",
            "stateOrProvince" : "SP"
          }
        }
      },
      "post-paymentLinks-basic-201" : {
        "summary" : "Payment link created",
        "value" : {
          "amount" : {
            "currency" : "BRL",
            "value" : 1250
          },
          "billingAddress" : {
            "city" : "São Paulo",
            "country" : "BR",
            "houseNumberOrName" : "999",
            "postalCode" : "59000060",
            "stateOrProvince" : "SP",
            "street" : "Roque Petroni Jr"
          },
          "countryCode" : "BR",
          "deliveryAddress" : {
            "city" : "São Paulo",
            "country" : "BR",
            "houseNumberOrName" : "999",
            "postalCode" : "59000060",
            "stateOrProvince" : "SP",
            "street" : "Roque Petroni Jr"
          },
          "expiresAt" : "2022-10-28T09:16:22Z",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "reference" : "YOUR_ORDER_NUMBER",
          "reusable" : false,
          "shopperEmail" : "test@email.com",
          "shopperLocale" : "pt-BR",
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "id" : "PLE83C39B0A0DE0C1E",
          "status" : "active",
          "url" : "https://test.adyen.link/PLE83C39B0A0DE0C1E"
        }
      },
      "post-paymentMethods-balance-basic" : {
        "summary" : "Get gift card balance specifying amount of 10 EUR",
        "value" : {
          "paymentMethod" : {
            "type" : "givex",
            "number" : "4126491073027401",
            "cvc" : "737"
          },
          "amount" : {
            "currency" : "EUR",
            "value" : 1000
          },
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-paymentMethods-balance-basic-200" : {
        "summary" : "Gift card balance greater than amount specified in request",
        "value" : {
          "pspReference" : "KHQC5N7G84BLNK43",
          "resultCode" : "Success",
          "balance" : {
            "currency" : "EUR",
            "value" : 5000
          }
        }
      },
      "post-paymentMethods-balance-not-enough" : {
        "summary" : "Get gift card balance specifying amount of 100 EUR",
        "value" : {
          "paymentMethod" : {
            "type" : "givex",
            "number" : "4126491073027401",
            "cvc" : "737"
          },
          "amount" : {
            "currency" : "EUR",
            "value" : 10000
          },
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-paymentMethods-balance-not-enough-200" : {
        "summary" : "Gift card balance lower than amount specified in request",
        "value" : {
          "pspReference" : "FKSPNCQ8HXSKGK82",
          "resultCode" : "NotEnoughBalance",
          "balance" : {
            "currency" : "EUR",
            "value" : 5000
          }
        }
      },
      "post-paymentMethods-basic" : {
        "summary" : "Get available payment methods",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-paymentMethods-basic-200" : {
        "summary" : "List of available payment methods",
        "value" : {
          "paymentMethods" : [ {
            "name" : "ACH Direct Debit",
            "type" : "ach"
          }, {
            "name" : "Adyen Voucher",
            "type" : "adyen_test_voucher"
          }, {
            "name" : "AfterPay Invoice",
            "type" : "afterpay_default"
          }, {
            "name" : "AfterPay DirectDebit",
            "type" : "afterpay_directdebit"
          }, {
            "name" : "Afterpay",
            "type" : "afterpaytouch"
          }, {
            "name" : "Credit Card",
            "type" : "scheme"
          }, {
            "name" : "AliPay",
            "type" : "alipay"
          }, {
            "name" : "AliPay HK",
            "type" : "alipay_hk"
          }, {
            "name" : "AliPay",
            "type" : "alipay_wap"
          }, {
            "name" : "Android Pay",
            "type" : "androidpay"
          }, {
            "name" : "Apple Pay",
            "type" : "applepay"
          }, {
            "name" : "Credit Card via AsiaPay",
            "type" : "asiapay"
          }, {
            "name" : "China UnionPay",
            "type" : "asiapay_unionpay"
          }, {
            "name" : "Baby Gift Card",
            "type" : "babygiftcard"
          }, {
            "name" : "Baloto",
            "type" : "baloto"
          }, {
            "name" : "BancNet",
            "type" : "bancnet"
          }, {
            "name" : "Bank Transfer (BG)",
            "type" : "bankTransfer_BG"
          }, {
            "name" : "Bank Transfer (CH)",
            "type" : "bankTransfer_CH"
          }, {
            "name" : "Bank Transfer (DE)",
            "type" : "bankTransfer_DE"
          }, {
            "name" : "Bank Transfer (FI)",
            "type" : "bankTransfer_FI"
          }, {
            "name" : "Bank Transfer (GB)",
            "type" : "bankTransfer_GB"
          }, {
            "name" : "Bank Transfer (HU)",
            "type" : "bankTransfer_HU"
          }, {
            "name" : "SEPA Bank Transfer",
            "type" : "bankTransfer_IBAN"
          }, {
            "name" : "Bank Transfer (IE)",
            "type" : "bankTransfer_IE"
          }, {
            "name" : "Electronic Bank Transfer (MX)",
            "type" : "bankTransfer_MX_linked"
          }, {
            "name" : "Bank Transfer (MX)",
            "type" : "bankTransfer_MX_offline"
          }, {
            "name" : "Bank Transfer (NL)",
            "type" : "bankTransfer_NL"
          }, {
            "name" : "Bank Transfer (PL)",
            "type" : "bankTransfer_PL"
          }, {
            "name" : "Bank Transfer (SE)",
            "type" : "bankTransfer_SE"
          }, {
            "name" : "Bank Transfer (US)",
            "type" : "bankTransfer_US"
          }, {
            "name" : "Payconiq by Bancontact",
            "type" : "bcmc_mobile"
          }, {
            "name" : "Bijenkorf Cadeaucard",
            "type" : "bijcadeaucard"
          }, {
            "name" : "99Bill",
            "type" : "bill99"
          }, {
            "name" : "Online Banking India",
            "type" : "billdesk_online"
          }, {
            "name" : "UPI",
            "type" : "billdesk_upi"
          }, {
            "name" : "Wallets India",
            "type" : "billdesk_wallet"
          }, {
            "name" : "Blik",
            "type" : "blik"
          }, {
            "name" : "Bloemen Giftcard",
            "type" : "bloemengiftcard"
          }, {
            "name" : "Boekenbon Giftcard",
            "type" : "boekenbon"
          }, {
            "name" : "Boleto",
            "type" : "boleto"
          }, {
            "name" : "Boleto Bancario",
            "type" : "boletobancario_santander"
          }, {
            "name" : "Bradesco",
            "type" : "bradesco"
          }, {
            "name" : "Cash-Ticket",
            "type" : "cashticket"
          }, {
            "name" : "CashU",
            "type" : "cashu"
          }, {
            "name" : "CCAvenue",
            "type" : "ccavenue"
          }, {
            "name" : "Mula Checkout",
            "type" : "cellulant"
          }, {
            "name" : "Chasin Giftcard",
            "type" : "chasingiftcard"
          }, {
            "name" : "Clearpay",
            "type" : "clearpay"
          }, {
            "name" : "ClickandBuy",
            "type" : "clickandbuy"
          }, {
            "name" : "Paiement en 3 fois par Cartes Bancaires",
            "type" : "cofinoga_3xcb"
          }, {
            "name" : "Costes Giftcard",
            "type" : "costesgiftcard"
          }, {
            "name" : "custom_settlement",
            "type" : "custom_settlement"
          }, {
            "name" : "DANA",
            "type" : "dana"
          }, {
            "name" : "DineroMail",
            "type" : "dineromail"
          }, {
            "name" : "Online bank transfer.",
            "type" : "directEbanking"
          }, {
            "name" : "Direct Debit Brazil - Banco do Brazil",
            "type" : "directdebit_BR_bancodobrasil"
          }, {
            "name" : "Direct Debit Brazil - Bradesco",
            "type" : "directdebit_BR_bradesco"
          }, {
            "name" : "Direct Debit Brazil - Caixa Economica Federal",
            "type" : "directdebit_BR_caixa"
          }, {
            "name" : "Direct Debit Brazil - HSBC",
            "type" : "directdebit_BR_hsbc"
          }, {
            "name" : "Direct Debit Brazil - Itau",
            "type" : "directdebit_BR_itau"
          }, {
            "name" : "Direct Debit Brazil - Santander",
            "type" : "directdebit_BR_santander"
          }, {
            "name" : "BACS Direct Debit",
            "type" : "directdebit_GB"
          }, {
            "name" : "Alfamart",
            "type" : "doku_alfamart"
          }, {
            "name" : "BCA Bank Transfer",
            "type" : "doku_bca_va"
          }, {
            "name" : "BNI VA",
            "type" : "doku_bni_va"
          }, {
            "name" : "BRI VA",
            "type" : "doku_bri_va"
          }, {
            "name" : "CIMB VA",
            "type" : "doku_cimb_va"
          }, {
            "name" : "Danamon VA",
            "type" : "doku_danamon_va"
          }, {
            "name" : "Indomaret",
            "type" : "doku_indomaret"
          }, {
            "name" : "Mandiri VA",
            "type" : "doku_mandiri_va"
          }, {
            "name" : "OVO",
            "type" : "doku_ovo"
          }, {
            "name" : "Bank Transfer",
            "type" : "doku_permata_lite_atm"
          }, {
            "name" : "DOKU wallet",
            "type" : "doku_wallet"
          }, {
            "name" : "Dragonpay Prepaid Credits",
            "type" : "dragonpay_credits"
          }, {
            "name" : "Online Banking",
            "type" : "dragonpay_ebanking"
          }, {
            "name" : "GCash",
            "type" : "dragonpay_gcash"
          }, {
            "name" : "Over The Counter Banks",
            "type" : "dragonpay_otc_banking"
          }, {
            "name" : "OTC non-Bank via Dragonpay",
            "type" : "dragonpay_otc_non_banking"
          }, {
            "name" : "Convenience Stores",
            "type" : "dragonpay_otc_philippines"
          }, {
            "name" : "7/11",
            "type" : "dragonpay_seveneleven"
          }, {
            "name" : "eagleeye_voucher",
            "type" : "eagleeye_voucher"
          }, {
            "name" : "Finnish E-Banking",
            "type" : "ebanking_FI"
          }, {
            "name" : "Pay-easy ATM",
            "type" : "econtext_atm"
          }, {
            "name" : "Online Banking",
            "type" : "econtext_online"
          }, {
            "name" : "7-Eleven",
            "type" : "econtext_seven_eleven"
          }, {
            "name" : "Convenience Stores",
            "type" : "econtext_stores"
          }, {
            "name" : "eft_directdebit_CA",
            "type" : "eft_directdebit_CA"
          }, {
            "name" : "Lastschrift (ELV)",
            "type" : "elv"
          }, {
            "name" : "Bank Payment",
            "type" : "entercash"
          }, {
            "name" : "Nationale Entertainment Card",
            "type" : "entertainmentcard"
          }, {
            "name" : "EPS",
            "type" : "eps"
          }, {
            "name" : "Expert Cadeaukaart",
            "type" : "expertgiftcard"
          }, {
            "name" : "3x Oney",
            "type" : "facilypay_3x"
          }, {
            "name" : "4x Oney",
            "type" : "facilypay_4x"
          }, {
            "name" : "Fashioncheque",
            "type" : "fashioncheque"
          }, {
            "name" : "Fawry",
            "type" : "fawry"
          }, {
            "name" : "FijnCadeau",
            "type" : "fijncadeau"
          }, {
            "name" : "Fleurop Bloemenbon",
            "type" : "fleuropbloemenbon"
          }, {
            "name" : "Fonq Giftcard",
            "type" : "fonqgiftcard"
          }, {
            "name" : "Gall & Gall",
            "type" : "gallgall"
          }, {
            "name" : "GCash",
            "type" : "gcash"
          }, {
            "name" : "Generic GiftCard",
            "type" : "genericgiftcard"
          }, {
            "name" : "GiftFor2",
            "type" : "giftfor2card"
          }, {
            "name" : "Givex",
            "type" : "givex"
          }, {
            "name" : "Globe GCash",
            "type" : "globegcash"
          }, {
            "name" : "Goldsmiths Card",
            "type" : "goldsmithscard"
          }, {
            "name" : "GoPay Wallet",
            "type" : "gopay_wallet"
          }, {
            "name" : "OVO",
            "type" : "grabpay_ID"
          }, {
            "name" : "GrabPay",
            "type" : "grabpay_PH"
          }, {
            "name" : "GrabPay",
            "type" : "grabpay_SG"
          }, {
            "name" : "Hallmark Card",
            "type" : "hallmarkcard"
          }, {
            "name" : "HDFC",
            "type" : "hdfc"
          }, {
            "name" : "Hunkemoller Member Card",
            "type" : "hmclub"
          }, {
            "name" : "Hunkemoller Lingerie Card",
            "type" : "hmlingerie"
          }, {
            "name" : "iDEAL",
            "type" : "ideal"
          }, {
            "name" : "igive",
            "type" : "igive"
          }, {
            "name" : "Korean Account Transfer (IniPay)",
            "type" : "inicisIniPay_accounttransfer"
          }, {
            "name" : "Korean Credit Cards (IniPay)",
            "type" : "inicisIniPay_creditcard"
          }, {
            "name" : "Korean Mobile Phone (IniPay)",
            "type" : "inicisIniPay_mobilephone"
          }, {
            "name" : "Korean Virtual Account (IniPay)",
            "type" : "inicisIniPay_virtualaccount"
          }, {
            "name" : "Korean Account Transfer (Mobile)",
            "type" : "inicisMobile_accounttransfer"
          }, {
            "name" : "Korean Credit Cards (Mobile)",
            "type" : "inicisMobile_creditcard"
          }, {
            "name" : "Korean Mobile Phone (Mobile)",
            "type" : "inicisMobile_mobilephone"
          }, {
            "name" : "Korean Virtual Account (Mobile)",
            "type" : "inicisMobile_virtualaccount"
          }, {
            "name" : "Korean Credit Cards",
            "type" : "inicis_creditcard"
          }, {
            "name" : "Interac® Online",
            "type" : "interac"
          }, {
            "name" : "Instant EFT",
            "type" : "ipay"
          }, {
            "name" : "iPay88",
            "type" : "ipay88"
          }, {
            "name" : "isracard",
            "type" : "isracard"
          }, {
            "name" : "Phone Payment",
            "type" : "ivr"
          }, {
            "name" : "Landline phone",
            "type" : "ivrLandline"
          }, {
            "name" : "Mobile phone",
            "type" : "ivrMobile"
          }, {
            "name" : "Kado Wereld",
            "type" : "kadowereld"
          }, {
            "name" : "KakaoPay",
            "type" : "kakaopay"
          }, {
            "name" : "Karen Millen Card",
            "type" : "karenmillen"
          }, {
            "name" : "Karen Millen GiftCard",
            "type" : "karenmillengiftcard"
          }, {
            "name" : "Bank Transfer",
            "type" : "kcp_banktransfer"
          }, {
            "name" : "Korea–issued cards",
            "type" : "kcp_creditcard"
          }, {
            "name" : "PayCo",
            "type" : "kcp_payco"
          }, {
            "name" : "Naver Pay",
            "type" : "kcp_naverpay"
          }, {
            "name" : "Virtual Account via KCP",
            "type" : "kcp_va"
          }, {
            "name" : "Pay later with Klarna.",
            "type" : "klarna"
          }, {
            "name" : "Pay over time with Klarna.",
            "type" : "klarna_account"
          }, {
            "name" : "Buy Now, Pay Later with Billie",
            "type" : "klarna_b2b"
          }, {
            "name" : "Pay now with Klarna.",
            "type" : "klarna_paynow"
          }, {
            "name" : "Leisure Card",
            "type" : "leisurecard"
          }, {
            "name" : "China Credit Card",
            "type" : "lianlianpay_creditcard"
          }, {
            "name" : "China Debit Card",
            "type" : "lianlianpay_debitcard"
          }, {
            "name" : "China Online Banking - Credit Card",
            "type" : "lianlianpay_ebanking_credit"
          }, {
            "name" : "China Online Banking - Debit Card",
            "type" : "lianlianpay_ebanking_debit"
          }, {
            "name" : "China Online Banking - Enterprise",
            "type" : "lianlianpay_ebanking_enterprise"
          }, {
            "name" : "Loods5 Cadeaukaart",
            "type" : "loods5giftcard"
          }, {
            "name" : "Loods5 Tegoedbon",
            "type" : "loods5prepaidcard"
          }, {
            "name" : "Love2Shop GiftCard",
            "type" : "love2shop"
          }, {
            "name" : "mada",
            "type" : "mada"
          }, {
            "name" : "Mappin & Webb Card",
            "type" : "mappinwebbcard"
          }, {
            "name" : "MB WAY",
            "type" : "mbway"
          }, {
            "name" : "Amazon Pay",
            "type" : "amazonpay"
          }, {
            "name" : "Mercado Pago",
            "type" : "mercadopago"
          }, {
            "name" : "MobilePay",
            "type" : "mobilepay"
          }, {
            "name" : "AliPay via Razer Merchant Services",
            "type" : "molpay_alipay"
          }, {
            "name" : "7-Eleven",
            "type" : "molpay_cash"
          }, {
            "name" : "CIMB Virtual Account",
            "type" : "molpay_cimb_va"
          }, {
            "name" : "Malaysia E-Banking via Razer Merchant Services",
            "type" : "molpay_ebanking_MY"
          }, {
            "name" : "Vietnam E-Banking",
            "type" : "molpay_ebanking_VN"
          }, {
            "name" : "Malaysia E-Banking",
            "type" : "molpay_ebanking_fpx_MY"
          }, {
            "name" : "eNETS Debit",
            "type" : "molpay_enetsd"
          }, {
            "name" : "epay",
            "type" : "molpay_epay"
          }, {
            "name" : "Esapay",
            "type" : "molpay_esapay"
          }, {
            "name" : "MyClear FPX",
            "type" : "molpay_fpx"
          }, {
            "name" : "Maybank2u",
            "type" : "molpay_maybank2u"
          }, {
            "name" : "Nganluong",
            "type" : "molpay_nganluong"
          }, {
            "name" : "Convenience Stores Thailand",
            "type" : "molpay_paysbuy"
          }, {
            "name" : "MOLPoints",
            "type" : "molpay_points"
          }, {
            "name" : "RHB Now",
            "type" : "molpay_rhb"
          }, {
            "name" : "SAM by SingPost",
            "type" : "molpay_singpost"
          }, {
            "name" : "MOLWallet",
            "type" : "molpay_wallet"
          }, {
            "name" : "MoMo ATM",
            "type" : "momo_atm"
          }, {
            "name" : "Momo Wallet",
            "type" : "momo_wallet"
          }, {
            "name" : "Moneybookers",
            "type" : "moneybookers"
          }, {
            "name" : "Multibanco",
            "type" : "multibanco"
          }, {
            "name" : "De Nationale Musicalcard",
            "type" : "musicalcard"
          }, {
            "name" : "Nationale Bioscoopbon",
            "type" : "nationalebioscoopbon"
          }, {
            "name" : "Nationale Tuinbon",
            "type" : "nationaletuinbon"
          }, {
            "name" : "Nationale Verwen Cadeaubon",
            "type" : "nationaleverwencadeaubon"
          }, {
            "name" : "BankAxess",
            "type" : "netaxept_bankaxess"
          }, {
            "name" : "NETELLER",
            "type" : "neteller"
          }, {
            "name" : "Onebip",
            "type" : "onebip"
          }, {
            "name" : "One Two Three",
            "type" : "onetwothree"
          }, {
            "name" : "Online Banking PL",
            "type" : "onlineBanking_PL"
          }, {
            "name" : "Online banking",
            "type" : "openbanking_UK"
          }, {
            "name" : "Oxxo",
            "type" : "oxxo"
          }, {
            "name" : "Pathe Giftcard",
            "type" : "pathegiftcard"
          }, {
            "name" : "PayBright",
            "type" : "paybright"
          }, {
            "name" : "Maya Wallet",
            "type" : "paymaya_wallet"
          }, {
            "name" : "PayPal",
            "type" : "paypal"
          }, {
            "name" : "Paysafecard",
            "type" : "paysafecard"
          }, {
            "name" : "Payshop",
            "type" : "payshop"
          }, {
            "name" : "PayD AMT via Paythru",
            "type" : "paythru_amt"
          }, {
            "name" : "EFT via Paythru",
            "type" : "paythru_eft"
          }, {
            "name" : "PayTM",
            "type" : "paytm"
          }, {
            "name" : "PayU UPI",
            "type" : "payu_IN_upi"
          }, {
            "name" : "EFT Pro via PayU",
            "type" : "payu_ZA_eftpro"
          }, {
            "name" : "Google Pay",
            "type" : "paywithgoogle"
          }, {
            "name" : "pix",
            "type" : "pix"
          }, {
            "name" : "Plastix",
            "type" : "plastix"
          }, {
            "name" : "Pluim",
            "type" : "pluimgiftcard"
          }, {
            "name" : "Podium Card",
            "type" : "podiumcard"
          }, {
            "name" : "POLi",
            "type" : "poli"
          }, {
            "name" : "PPS",
            "type" : "pps"
          }, {
            "name" : "Primera Cadeaukaart",
            "type" : "primeracadeaucard"
          }, {
            "name" : "Illicado Gift Card",
            "type" : "prosodie_illicado"
          }, {
            "name" : "PSE",
            "type" : "pse"
          }, {
            "name" : "Qiwi Wallet",
            "type" : "qiwiwallet"
          }, {
            "name" : "RatePay Invoice",
            "type" : "ratepay"
          }, {
            "name" : "RatePay Direct Debit",
            "type" : "ratepay_directdebit"
          }, {
            "name" : "Rituals Giftcard",
            "type" : "rituals"
          }, {
            "name" : "Rob Peetoom Giftcard",
            "type" : "robpeetoomgiftcard"
          }, {
            "name" : "SafetyPay",
            "type" : "safetypay"
          }, {
            "name" : "SafetyPay Cash",
            "type" : "safetypay_cash"
          }, {
            "name" : "Shoes&Accessories Cadeau",
            "type" : "sagiftcard"
          }, {
            "name" : "Score Giftcard",
            "type" : "scoregiftcard"
          }, {
            "name" : "SEB Direktbetalning",
            "type" : "sebdirectpayment"
          }, {
            "name" : "SEPA Direct Debit",
            "type" : "sepadirectdebit"
          }, {
            "name" : "7-Eleven",
            "type" : "seveneleven"
          }, {
            "name" : "Premium SMS",
            "type" : "sms"
          }, {
            "name" : "SVS",
            "type" : "svs"
          }, {
            "name" : "Swish",
            "type" : "swish"
          }, {
            "name" : "TCS Test GiftCard",
            "type" : "tcstestgiftcard"
          }, {
            "name" : "TenPay",
            "type" : "tenpay"
          }, {
            "name" : "The Sting Giftcard",
            "type" : "thestinggiftcard"
          }, {
            "name" : "TrueMoney",
            "type" : "truemoney"
          }, {
            "name" : "Trustly",
            "type" : "trustly"
          }, {
            "name" : "Online Banking by Trustpay",
            "type" : "trustpay"
          }, {
            "name" : "TWINT",
            "type" : "twint"
          }, {
            "name" : "Ukash",
            "type" : "ukash"
          }, {
            "name" : "UnionPay",
            "type" : "unionpay"
          }, {
            "name" : "UPI Collect",
            "type" : "upi_collect"
          }, {
            "name" : "Valuelink",
            "type" : "valuelink"
          }, {
            "name" : "V&D Cadeaukaart",
            "type" : "vdcadeaucard"
          }, {
            "name" : "Vipps",
            "type" : "vipps"
          }, {
            "name" : "Visa Checkout",
            "type" : "visacheckout"
          }, {
            "name" : "VVV Cadeaubon",
            "type" : "vvvcadeaubon"
          }, {
            "name" : "VVV Giftcard",
            "type" : "vvvgiftcard"
          }, {
            "name" : "Webshop Giftcard",
            "type" : "webshopgiftcard"
          }, {
            "name" : "WeChat Pay",
            "type" : "wechatpayMiniProgram"
          }, {
            "name" : "WeChat Pay",
            "type" : "wechatpayQR"
          }, {
            "name" : "WeChat Pay",
            "type" : "wechatpayWeb"
          }, {
            "name" : "WE Fashion Giftcard",
            "type" : "wefashiongiftcard"
          }, {
            "name" : "Western Union",
            "type" : "westernunion"
          }, {
            "name" : "Winkel Cheque",
            "type" : "winkelcheque"
          }, {
            "name" : "WOS Card",
            "type" : "woscard"
          }, {
            "name" : "Alfa-Click",
            "type" : "yandex_alfaclick"
          }, {
            "name" : "Pay using bank card",
            "type" : "yandex_bank_card"
          }, {
            "name" : "Cash terminals",
            "type" : "yandex_cash"
          }, {
            "name" : "Pay using installments",
            "type" : "yandex_installments"
          }, {
            "name" : "YooMoney",
            "type" : "yandex_money"
          }, {
            "name" : "Promsvyazbank",
            "type" : "yandex_promsvyazbank"
          }, {
            "name" : "SberPay",
            "type" : "yandex_sberbank"
          }, {
            "name" : "WebMoney",
            "type" : "yandex_webmoney"
          }, {
            "name" : "Your Gift",
            "type" : "yourgift"
          }, {
            "name" : "Zip",
            "type" : "zip"
          } ]
        }
      },
      "post-paymentMethods-filtered" : {
        "summary" : "Get payment methods based on the country and amount",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "countryCode" : "NL",
          "shopperLocale" : "nl-NL",
          "amount" : {
            "currency" : "EUR",
            "value" : 1000
          }
        }
      },
      "post-paymentMethods-filtered-200" : {
        "summary" : "List of available payment methods, based on the specified country and amount",
        "value" : {
          "paymentMethods" : [ {
            "name" : "iDEAL",
            "type" : "ideal"
          }, {
            "name" : "Hitelkártya",
            "type" : "scheme"
          }, {
            "name" : "PayPal",
            "type" : "paypal"
          }, {
            "name" : "AfterPay Invoice",
            "type" : "afterpay_default"
          }, {
            "name" : "Pay later with Klarna.",
            "type" : "klarna"
          }, {
            "name" : "SEPA Direct Debit",
            "type" : "sepadirectdebit"
          }, {
            "name" : "Paysafecard",
            "type" : "paysafecard"
          }, {
            "name" : "Bijenkorf Cadeaucard",
            "type" : "bijcadeaucard"
          }, {
            "name" : "Fonq Giftcard",
            "type" : "fonqgiftcard"
          }, {
            "name" : "Bank Transfer (NL)",
            "type" : "bankTransfer_NL"
          }, {
            "name" : "Pathe Giftcard",
            "type" : "pathegiftcard"
          }, {
            "name" : "VVV Giftcard",
            "type" : "vvvgiftcard"
          }, {
            "name" : "Podium Card",
            "type" : "podiumcard"
          }, {
            "name" : "RatePay Direct Debit",
            "type" : "ratepay_directdebit"
          }, {
            "name" : "Rituals Giftcard",
            "type" : "rituals"
          }, {
            "name" : "Hunkemoller Lingerie Card",
            "type" : "hmlingerie"
          }, {
            "name" : "Primera Cadeaukaart",
            "type" : "primeracadeaucard"
          }, {
            "name" : "Fashioncheque",
            "type" : "fashioncheque"
          }, {
            "name" : "NETELLER",
            "type" : "neteller"
          }, {
            "name" : "Adyen Voucher",
            "type" : "adyen_test_voucher"
          }, {
            "name" : "AfterPay B2B",
            "type" : "afterpay_b2b"
          }, {
            "name" : "AfterPay DirectDebit",
            "type" : "afterpay_directdebit"
          }, {
            "name" : "AliPay",
            "type" : "alipay"
          }, {
            "name" : "AliPay",
            "type" : "alipay_wap"
          }, {
            "name" : "Android Pay",
            "type" : "androidpay"
          }, {
            "name" : "Apple Pay",
            "type" : "applepay"
          }, {
            "name" : "Baby Gift Card",
            "type" : "babygiftcard"
          }, {
            "name" : "SEPA Bank Transfer",
            "type" : "bankTransfer_IBAN"
          }, {
            "name" : "Bloemen Giftcard",
            "type" : "bloemengiftcard"
          }, {
            "name" : "Boekenbon Giftcard",
            "type" : "boekenbon"
          }, {
            "name" : "Cash-Ticket",
            "type" : "cashticket"
          }, {
            "name" : "Chasin Giftcard",
            "type" : "chasingiftcard"
          }, {
            "name" : "ClickandBuy",
            "type" : "clickandbuy"
          }, {
            "name" : "Costes Giftcard",
            "type" : "costesgiftcard"
          }, {
            "name" : "custom_settlement",
            "type" : "custom_settlement"
          }, {
            "name" : "eft_directdebit_CA",
            "type" : "eft_directdebit_CA"
          }, {
            "name" : "Nationale Entertainment Card",
            "type" : "entertainmentcard"
          }, {
            "name" : "Expert Cadeaukaart",
            "type" : "expertgiftcard"
          }, {
            "name" : "FijnCadeau",
            "type" : "fijncadeau"
          }, {
            "name" : "Fleurop Bloemenbon",
            "type" : "fleuropbloemenbon"
          }, {
            "name" : "Gall & Gall",
            "type" : "gallgall"
          }, {
            "name" : "Generic GiftCard",
            "type" : "genericgiftcard"
          }, {
            "name" : "GiftFor2",
            "type" : "giftfor2card"
          }, {
            "name" : "Givex",
            "type" : "givex"
          }, {
            "name" : "Goldsmiths Card",
            "type" : "goldsmithscard"
          }, {
            "name" : "Hunkemoller Member Card",
            "type" : "hmclub"
          }, {
            "name" : "Phone Payment",
            "type" : "ivr"
          }, {
            "name" : "Landline phone",
            "type" : "ivrLandline"
          }, {
            "name" : "Mobile phone",
            "type" : "ivrMobile"
          }, {
            "name" : "Kado Wereld",
            "type" : "kadowereld"
          }, {
            "name" : "Karen Millen GiftCard",
            "type" : "karenmillengiftcard"
          }, {
            "name" : "Leisure Card",
            "type" : "leisurecard"
          }, {
            "name" : "Loods5 Cadeaukaart",
            "type" : "loods5giftcard"
          }, {
            "name" : "Loods5 Tegoedbon",
            "type" : "loods5prepaidcard"
          }, {
            "name" : "Amazon Pay",
            "type" : "amazonpay"
          }, {
            "name" : "MOLPoints",
            "type" : "molpay_points"
          }, {
            "name" : "Moneybookers",
            "type" : "moneybookers"
          }, {
            "name" : "De Nationale Musicalcard",
            "type" : "musicalcard"
          }, {
            "name" : "Nationale Bioscoopbon",
            "type" : "nationalebioscoopbon"
          }, {
            "name" : "Nationale Tuinbon",
            "type" : "nationaletuinbon"
          }, {
            "name" : "Nationale Verwen Cadeaubon",
            "type" : "nationaleverwencadeaubon"
          }, {
            "name" : "Onebip",
            "type" : "onebip"
          }, {
            "name" : "Google Pay",
            "type" : "paywithgoogle"
          }, {
            "name" : "Plastix",
            "type" : "plastix"
          }, {
            "name" : "Pluim",
            "type" : "pluimgiftcard"
          }, {
            "name" : "Illicado Gift Card",
            "type" : "prosodie_illicado"
          }, {
            "name" : "RatePay Invoice",
            "type" : "ratepay"
          }, {
            "name" : "Rob Peetoom Giftcard",
            "type" : "robpeetoomgiftcard"
          }, {
            "name" : "Shoes&Accessories Cadeau",
            "type" : "sagiftcard"
          }, {
            "name" : "Score Giftcard",
            "type" : "scoregiftcard"
          }, {
            "name" : "Premium SMS",
            "type" : "sms"
          }, {
            "name" : "SVS",
            "type" : "svs"
          }, {
            "name" : "TCS Test GiftCard",
            "type" : "tcstestgiftcard"
          }, {
            "name" : "The Sting Giftcard",
            "type" : "thestinggiftcard"
          }, {
            "name" : "Ukash",
            "type" : "ukash"
          }, {
            "name" : "UnionPay",
            "type" : "unionpay"
          }, {
            "name" : "Valuelink",
            "type" : "valuelink"
          }, {
            "name" : "V&D Cadeaukaart",
            "type" : "vdcadeaucard"
          }, {
            "name" : "Visa Checkout",
            "type" : "visacheckout"
          }, {
            "name" : "VVV Cadeaubon",
            "type" : "vvvcadeaubon"
          }, {
            "name" : "Webshop Giftcard",
            "type" : "webshopgiftcard"
          }, {
            "name" : "WE Fashion Giftcard",
            "type" : "wefashiongiftcard"
          }, {
            "name" : "Western Union",
            "type" : "westernunion"
          }, {
            "name" : "Winkel Cheque",
            "type" : "winkelcheque"
          }, {
            "name" : "Your Gift",
            "type" : "yourgift"
          } ]
        }
      },
      "post-paymentMethods-include-stored" : {
        "summary" : "Get payment methods, including stored card details",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "countryCode" : "NL",
          "amount" : {
            "currency" : "EUR",
            "value" : 1000
          },
          "shopperReference" : "YOUR_SHOPPER_REFERENCE"
        }
      },
      "post-paymentMethods-include-stored-200" : {
        "summary" : "List of available payment methods, including stored payment details",
        "value" : {
          "paymentMethods" : [ {
            "name" : "iDEAL",
            "type" : "ideal"
          }, {
            "name" : "Credit Card",
            "type" : "scheme"
          }, {
            "name" : "PayPal",
            "type" : "paypal"
          }, {
            "name" : "AfterPay Invoice",
            "type" : "afterpay_default"
          }, {
            "name" : "Pay later with Klarna.",
            "type" : "klarna"
          }, {
            "name" : "SEPA Direct Debit",
            "type" : "sepadirectdebit"
          }, {
            "name" : "Paysafecard",
            "type" : "paysafecard"
          }, {
            "name" : "Bijenkorf Cadeaucard",
            "type" : "bijcadeaucard"
          }, {
            "name" : "Fonq Giftcard",
            "type" : "fonqgiftcard"
          }, {
            "name" : "Bank Transfer (NL)",
            "type" : "bankTransfer_NL"
          }, {
            "name" : "Pathe Giftcard",
            "type" : "pathegiftcard"
          }, {
            "name" : "VVV Giftcard",
            "type" : "vvvgiftcard"
          }, {
            "name" : "Podium Card",
            "type" : "podiumcard"
          }, {
            "name" : "RatePay Direct Debit",
            "type" : "ratepay_directdebit"
          }, {
            "name" : "Rituals Giftcard",
            "type" : "rituals"
          }, {
            "name" : "Hunkemoller Lingerie Card",
            "type" : "hmlingerie"
          }, {
            "name" : "Primera Cadeaukaart",
            "type" : "primeracadeaucard"
          }, {
            "name" : "Fashioncheque",
            "type" : "fashioncheque"
          }, {
            "name" : "NETELLER",
            "type" : "neteller"
          }, {
            "name" : "Adyen Voucher",
            "type" : "adyen_test_voucher"
          }, {
            "name" : "AfterPay B2B",
            "type" : "afterpay_b2b"
          }, {
            "name" : "AfterPay DirectDebit",
            "type" : "afterpay_directdebit"
          }, {
            "name" : "AliPay",
            "type" : "alipay"
          }, {
            "name" : "AliPay",
            "type" : "alipay_wap"
          }, {
            "name" : "Android Pay",
            "type" : "androidpay"
          }, {
            "name" : "Apple Pay",
            "type" : "applepay"
          }, {
            "name" : "Baby Gift Card",
            "type" : "babygiftcard"
          }, {
            "name" : "SEPA Bank Transfer",
            "type" : "bankTransfer_IBAN"
          }, {
            "name" : "Bloemen Giftcard",
            "type" : "bloemengiftcard"
          }, {
            "name" : "Boekenbon Giftcard",
            "type" : "boekenbon"
          }, {
            "name" : "Cash-Ticket",
            "type" : "cashticket"
          }, {
            "name" : "Chasin Giftcard",
            "type" : "chasingiftcard"
          }, {
            "name" : "ClickandBuy",
            "type" : "clickandbuy"
          }, {
            "name" : "Costes Giftcard",
            "type" : "costesgiftcard"
          }, {
            "name" : "custom_settlement",
            "type" : "custom_settlement"
          }, {
            "name" : "eft_directdebit_CA",
            "type" : "eft_directdebit_CA"
          }, {
            "name" : "Nationale Entertainment Card",
            "type" : "entertainmentcard"
          }, {
            "name" : "Expert Cadeaukaart",
            "type" : "expertgiftcard"
          }, {
            "name" : "FijnCadeau",
            "type" : "fijncadeau"
          }, {
            "name" : "Fleurop Bloemenbon",
            "type" : "fleuropbloemenbon"
          }, {
            "name" : "Gall & Gall",
            "type" : "gallgall"
          }, {
            "name" : "Generic GiftCard",
            "type" : "genericgiftcard"
          }, {
            "name" : "GiftFor2",
            "type" : "giftfor2card"
          }, {
            "name" : "Givex",
            "type" : "givex"
          }, {
            "name" : "Goldsmiths Card",
            "type" : "goldsmithscard"
          }, {
            "name" : "Hunkemoller Member Card",
            "type" : "hmclub"
          }, {
            "name" : "Phone Payment",
            "type" : "ivr"
          }, {
            "name" : "Landline phone",
            "type" : "ivrLandline"
          }, {
            "name" : "Mobile phone",
            "type" : "ivrMobile"
          }, {
            "name" : "Kado Wereld",
            "type" : "kadowereld"
          }, {
            "name" : "Karen Millen GiftCard",
            "type" : "karenmillengiftcard"
          }, {
            "name" : "Leisure Card",
            "type" : "leisurecard"
          }, {
            "name" : "Loods5 Cadeaukaart",
            "type" : "loods5giftcard"
          }, {
            "name" : "Loods5 Tegoedbon",
            "type" : "loods5prepaidcard"
          }, {
            "name" : "Amazon Pay",
            "type" : "amazonpay"
          }, {
            "name" : "MOLPoints",
            "type" : "molpay_points"
          }, {
            "name" : "Moneybookers",
            "type" : "moneybookers"
          }, {
            "name" : "De Nationale Musicalcard",
            "type" : "musicalcard"
          }, {
            "name" : "Nationale Bioscoopbon",
            "type" : "nationalebioscoopbon"
          }, {
            "name" : "Nationale Tuinbon",
            "type" : "nationaletuinbon"
          }, {
            "name" : "Nationale Verwen Cadeaubon",
            "type" : "nationaleverwencadeaubon"
          }, {
            "name" : "Onebip",
            "type" : "onebip"
          }, {
            "name" : "Google Pay",
            "type" : "paywithgoogle"
          }, {
            "name" : "Plastix",
            "type" : "plastix"
          }, {
            "name" : "Pluim",
            "type" : "pluimgiftcard"
          }, {
            "name" : "Illicado Gift Card",
            "type" : "prosodie_illicado"
          }, {
            "name" : "RatePay Invoice",
            "type" : "ratepay"
          }, {
            "name" : "Rob Peetoom Giftcard",
            "type" : "robpeetoomgiftcard"
          }, {
            "name" : "Shoes&Accessories Cadeau",
            "type" : "sagiftcard"
          }, {
            "name" : "Score Giftcard",
            "type" : "scoregiftcard"
          }, {
            "name" : "Premium SMS",
            "type" : "sms"
          }, {
            "name" : "SVS",
            "type" : "svs"
          }, {
            "name" : "TCS Test GiftCard",
            "type" : "tcstestgiftcard"
          }, {
            "name" : "The Sting Giftcard",
            "type" : "thestinggiftcard"
          }, {
            "name" : "Ukash",
            "type" : "ukash"
          }, {
            "name" : "UnionPay",
            "type" : "unionpay"
          }, {
            "name" : "Valuelink",
            "type" : "valuelink"
          }, {
            "name" : "V&D Cadeaukaart",
            "type" : "vdcadeaucard"
          }, {
            "name" : "Visa Checkout",
            "type" : "visacheckout"
          }, {
            "name" : "VVV Cadeaubon",
            "type" : "vvvcadeaubon"
          }, {
            "name" : "Webshop Giftcard",
            "type" : "webshopgiftcard"
          }, {
            "name" : "WE Fashion Giftcard",
            "type" : "wefashiongiftcard"
          }, {
            "name" : "Western Union",
            "type" : "westernunion"
          }, {
            "name" : "Winkel Cheque",
            "type" : "winkelcheque"
          }, {
            "name" : "Your Gift",
            "type" : "yourgift"
          } ],
          "storedPaymentMethods" : [ {
            "brand" : "visa",
            "expiryMonth" : "10",
            "expiryYear" : "30",
            "holderName" : "John Smith",
            "id" : "7219687191761347",
            "lastFour" : "1111",
            "name" : "VISA",
            "shopperEmail" : "john.smith@example.com",
            "supportedShopperInteractions" : [ "CardOnFile", "Subscription", "UnscheduledCardOnFile" ],
            "type" : "scheme"
          } ]
        }
      },
      "post-payments-applepay" : {
        "summary" : "Make an Apple Pay payment",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "applepay",
            "applePayToken" : "VNRWtuNlNEWkRCSm1xWndjMDFFbktkQU..."
          },
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-card-3d-secure-2-web" : {
        "summary" : "Make a card payment with 3D Secure 2 native authentication, using encrypted card details",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 1000
          },
          "reference" : "YOUR_ORDER_NUMBER",
          "paymentMethod" : {
            "type" : "scheme",
            "encryptedCardNumber" : "test_4035501428146300",
            "encryptedExpiryMonth" : "test_03",
            "encryptedExpiryYear" : "test_2030",
            "encryptedSecurityCode" : "test_737",
            "holderName" : "John Smith"
          },
          "additionalData" : {
            "allow3DS2" : "true"
          },
          "billingAddress" : {
            "country" : "US",
            "city" : "New York",
            "street" : "Redwood Block",
            "houseNumberOrName" : "37C",
            "stateOrProvince" : "NY",
            "postalCode" : "10039"
          },
          "shopperEmail" : "s.hopper@test.com",
          "shopperIP" : "192.0.2.1",
          "browserInfo" : {
            "userAgent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36",
            "acceptHeader" : "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
            "language" : "nl-NL",
            "colorDepth" : 24,
            "screenHeight" : 723,
            "screenWidth" : 1536,
            "timeZoneOffset" : 0,
            "javaEnabled" : true
          },
          "channel" : "Web",
          "origin" : "https://your-company.example.com",
          "returnUrl" : "https://your-company.example.com/checkout/",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-card-3d-secure-direct" : {
        "summary" : "Make card payment with 3D Secure redirect authentication",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "scheme",
            "number" : "4212345678901237",
            "expiryMonth" : "03",
            "expiryYear" : "2030",
            "holderName" : "John Smith",
            "cvc" : "737"
          },
          "browserInfo" : {
            "userAgent" : "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9) Gecko/2008052912 Firefox/3.0",
            "acceptHeader" : "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "javaEnabled" : true,
            "colorDepth" : 10,
            "screenHeight" : 2000,
            "screenWidth" : 3000,
            "timeZoneOffset" : 5,
            "language" : "en"
          },
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-card-direct" : {
        "summary" : "Make a card payment",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "scheme",
            "number" : "4111111111111111",
            "expiryMonth" : "03",
            "expiryYear" : "2030",
            "holderName" : "John Smith",
            "cvc" : "737"
          },
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-card-direct-200" : {
        "summary" : "Successful card payment",
        "value" : {
          "additionalData" : {
            "cvcResult" : "1 Matches",
            "authCode" : "044925",
            "avsResult" : "4 AVS not supported for this card type",
            "avsResultRaw" : "4",
            "cvcResultRaw" : "M",
            "refusalReasonRaw" : "AUTHORISED",
            "acquirerCode" : "TestPmmAcquirer",
            "acquirerReference" : "YOUR_ACQUIRER_REFERENCE"
          },
          "pspReference" : "YOUR_PSP_REFERENCE",
          "resultCode" : "Authorised",
          "merchantReference" : "YOUR_MERCHANT_REFERENCE"
        }
      },
      "post-payments-card-securedfields" : {
        "summary" : "Make a card payment using encrypted card details",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "scheme",
            "encryptedCardNumber" : "test_4111111111111111",
            "encryptedExpiryMonth" : "test_03",
            "encryptedExpiryYear" : "test_2030",
            "encryptedSecurityCode" : "test_737"
          },
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-card-securedfields-200" : {
        "summary" : "Successful card payment using encrypted card details",
        "value" : {
          "additionalData" : {
            "cvcResult" : "1 Matches",
            "authCode" : "065696",
            "avsResult" : "4 AVS not supported for this card type",
            "avsResultRaw" : "4",
            "cvcResultRaw" : "M",
            "refusalReasonRaw" : "AUTHORISED",
            "acquirerCode" : "TestPmmAcquirer",
            "acquirerReference" : "YOUR_ACQUIRER_REFERENCE"
          },
          "pspReference" : "YOUR_PSP_REFERENCE",
          "resultCode" : "Authorised",
          "merchantReference" : "YOUR_MERCHANT_REFERENCE"
        }
      },
      "post-payments-details-00.redirect" : {
        "summary" : "Submit the redirect result",
        "description" : "Example request when submitting a redirect result",
        "value" : {
          "details" : {
            "redirectResult" : "X6XtfGC3!Y..."
          }
        }
      },
      "post-payments-details-00.redirect-200" : {
        "summary" : "Payment authorised",
        "description" : "Example response when submitting the redirect result",
        "value" : {
          "resultCode" : "Authorised",
          "pspReference" : "V4HZ4RBFJGXXGN82"
        }
      },
      "post-payments-details-3d-secure-2-native" : {
        "summary" : "Submit 3D Secure 2 authentication result",
        "value" : {
          "details" : {
            "threeDSResult" : "eyJ0cmFuc1N0YXR1cyI6IlkifQ=="
          }
        }
      },
      "post-payments-enableOneClick-SF" : {
        "summary" : "Tokenize card details for one-off payments, using encrypted card details",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "scheme",
            "encryptedCardNumber" : "test_4111111111111111",
            "encryptedExpiryMonth" : "test_03",
            "encryptedExpiryYear" : "test_2030",
            "encryptedSecurityCode" : "test_737"
          },
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "storePaymentMethod" : true,
          "shopperInteraction" : "Ecommerce",
          "recurringProcessingModel" : "CardOnFile",
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-enableOneClick-SF-200" : {
        "summary" : "Card details tokenized for one-off payments, using encrypted card details",
        "value" : {
          "additionalData" : {
            "cvcResult" : "1 Matches",
            "authCode" : "082338",
            "avsResult" : "4 AVS not supported for this card type",
            "avsResultRaw" : "4",
            "cvcResultRaw" : "M",
            "refusalReasonRaw" : "AUTHORISED",
            "acquirerCode" : "TestPmmAcquirer",
            "acquirerReference" : "YOUR_ACQUIRER_REFERENCE",
            "tokenization.shopperReference" : "YOUR_SHOPPER_REFERENCE",
            "tokenization.storedPaymentMethodId" : "M5N7TQ4TG5PFWR50",
            "tokenization.store.operationType" : "created"
          },
          "pspReference" : "YOUR_PSP_REFERENCE",
          "resultCode" : "Authorised",
          "merchantReference" : "YOUR_MERCHANT_REFERENCE"
        }
      },
      "post-payments-enableOneClick-raw" : {
        "summary" : "Tokenize card details for one-off payments",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "scheme",
            "number" : "4111111111111111",
            "expiryMonth" : "03",
            "expiryYear" : "2030",
            "holderName" : "John Smith",
            "cvc" : "737"
          },
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "shopperInteraction" : "Ecommerce",
          "recurringProcessingModel" : "CardOnFile",
          "storePaymentMethod" : true,
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-enableOneClick-raw-200" : {
        "summary" : "Card details tokenized for one-off payments",
        "value" : {
          "additionalData" : {
            "cvcResult" : "1 Matches",
            "authCode" : "003704",
            "avsResult" : "4 AVS not supported for this card type",
            "avsResultRaw" : "4",
            "cvcResultRaw" : "M",
            "refusalReasonRaw" : "AUTHORISED",
            "acquirerCode" : "TestPmmAcquirer",
            "acquirerReference" : "YOUR_ACQUIRER_REFERENCE",
            "tokenization.shopperReference" : "YOUR_SHOPPER_REFERENCE",
            "tokenization.storedPaymentMethodId" : "M5N7TQ4TG5PFWR50",
            "tokenization.store.operationType" : "created"
          },
          "pspReference" : "YOUR_PSP_REFERENCE",
          "resultCode" : "Authorised",
          "merchantReference" : "YOUR_MERCHANT_REFERENCE"
        }
      },
      "post-payments-googlepay" : {
        "summary" : "Make a Google Pay payment",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "googlepay",
            "googlePayToken" : "==Payload as retrieved from Google Pay response=="
          },
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YourMerchantAccount"
        }
      },
      "post-payments-ideal" : {
        "summary" : "Make an iDEAL payment",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "ideal"
          },
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-ideal-200" : {
        "summary" : "Successful iDEAL payment",
        "value" : {
          "resultCode" : "RedirectShopper",
          "action" : {
            "paymentMethodType" : "ideal",
            "url" : "https://test.adyen.com/hpp/checkout.shtml?u=redirectIdeal&p=eJxtUl1zmzAQ-DXwZgaB*XrQg0Nwg2s3DTVtJy8ZRbqAYlsikmCMf30FddNMpzOak2bvZm-3Ts*KCJZLBpgzIEeX9kqBoOMMFXXlcq17UCXDCAXIPYGiLRFmRanshcF70GZ3xd6TpTDQKGK4FJ4ZO8D5XZF-vq-3T5*KL0VV5v*tHEBpe*Pob5cKXmBSA1gbxUXzIWF6JW6JITjLUIySNItQliVxsH6v*cYbnNSHZsMfcydYr8SrE9yY7HRjavMAlyyIjhuK*tzszj9ew-uHrN854a3bkfEE1uBp9od833cV6Lra4taYzglXlsueo6Tk2EptLJL6qW8h2gI9yN7oVnYdKItoUAOnoO3z62-aUlB5sk4qYFwBNTYzoD9015odmFYyJ1z-M2yr7uO4nSBW8xisNpua1NlG0SQwmiTaMMpeLWzDjojRs-cMep7natDTrL*TI2fcjDjwA7Twlws-3aPYOkKZDVH26F69THtShE57woUlmpSBqw9czP*k65*9IfCuq0jiJElQGi69Szn8DPebmKXDWATt6vxEWduea7*sLy-Lt*1bcbctGhgZk78A5S7dyQ",
            "method" : "GET",
            "type" : "redirect"
          }
        }
      },
      "post-payments-klarna" : {
        "summary" : "Make a Klarna payment",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "reference" : "YOUR_ORDER_REFERENCE",
          "paymentMethod" : {
            "type" : "klarna"
          },
          "amount" : {
            "currency" : "SEK",
            "value" : 1000
          },
          "shopperLocale" : "en_US",
          "countryCode" : "SE",
          "telephoneNumber" : "+46 840 839 298",
          "shopperEmail" : "youremail@email.com",
          "shopperName" : {
            "firstName" : "Testperson-se",
            "lastName" : "Approved"
          },
          "shopperReference" : "YOUR_UNIQUE_SHOPPER_ID",
          "billingAddress" : {
            "city" : "Ankeborg",
            "country" : "SE",
            "houseNumberOrName" : "1",
            "postalCode" : "12345",
            "street" : "Stargatan"
          },
          "deliveryAddress" : {
            "city" : "Ankeborg",
            "country" : "SE",
            "houseNumberOrName" : "1",
            "postalCode" : "12345",
            "street" : "Stargatan"
          },
          "returnUrl" : "https://www.your-company.example.com/...",
          "lineItems" : [ {
            "quantity" : 1,
            "amountExcludingTax" : 331,
            "taxPercentage" : 2100,
            "description" : "Shoes",
            "id" : "Item #1",
            "taxAmount" : 69,
            "amountIncludingTax" : 400,
            "productUrl" : "URL_TO_PURCHASED_ITEM",
            "imageUrl" : "URL_TO_PICTURE_OF_PURCHASED_ITEM"
          }, {
            "quantity" : 2,
            "amountExcludingTax" : 248,
            "taxPercentage" : 2100,
            "description" : "Socks",
            "id" : "Item #2",
            "taxAmount" : 52,
            "amountIncludingTax" : 300,
            "productUrl" : "URL_TO_PURCHASED_ITEM",
            "imageUrl" : "URL_TO_PICTURE_OF_PURCHASED_ITEM"
          } ]
        }
      },
      "post-payments-oneclick-direct" : {
        "summary" : "Make a one-off payment with a token and CVV",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "scheme",
            "storedPaymentMethodId" : "8416038790273850",
            "cvc" : "737"
          },
          "shopperReference" : "YOUR_UNIQUE_SHOPPER_ID_6738oneoff",
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-oneclick-securedfields" : {
        "summary" : "Make a one-off payment with a token and CVV, using encrypted card details",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "scheme",
            "storedPaymentMethodId" : "8416038790273850",
            "encryptedSecurityCode" : "adyenjs_0_1_18$MT6ppy0FAMVMLH..."
          },
          "shopperReference" : "YOUR_UNIQUE_SHOPPER_ID_6738oneoff",
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "shopperInteraction" : "ContAuth",
          "recurringProcessingModel" : "CardOnFile"
        }
      },
      "post-payments-paymentPspReference-amountUpdates-amount-update" : {
        "summary" : "Update the amount of an authorized payment",
        "description" : "Example request to update the amount of a payment",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "amount" : {
            "currency" : "EUR",
            "value" : 2500
          },
          "reference" : "YOUR_UNIQUE_REFERENCE"
        }
      },
      "post-payments-paymentPspReference-amountUpdates-amount-update-201" : {
        "summary" : "Amount update requested",
        "description" : "Example response when an amount update was requested",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "paymentPspReference" : "993617894903480A",
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "pspReference" : "993617894906488A",
          "status" : "received",
          "amount" : {
            "currency" : "EUR",
            "value" : 2500
          }
        }
      },
      "post-payments-paymentPspReference-cancels-cancel-with-psp-reference" : {
        "summary" : "Cancel payment using a PSP reference",
        "description" : "Example cancel request with a PSP reference",
        "value" : {
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-paymentPspReference-cancels-cancel-with-psp-reference-201" : {
        "summary" : "Refund requested",
        "description" : "Example response when a refund was requested",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "paymentPspReference" : "993617894903480A",
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "pspReference" : "993617894906488A",
          "status" : "received"
        }
      },
      "post-payments-paymentPspReference-captures-capture" : {
        "summary" : "Capture an authorized payment",
        "description" : "Example capture request",
        "value" : {
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "amount" : {
            "value" : 2000,
            "currency" : "EUR"
          }
        }
      },
      "post-payments-paymentPspReference-captures-capture-201" : {
        "summary" : "Capture requested",
        "description" : "Example response when a capture was requested",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "paymentPspReference" : "993617894903480A",
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "pspReference" : "993617894906488A",
          "status" : "received",
          "amount" : {
            "value" : 2000,
            "currency" : "EUR"
          }
        }
      },
      "post-payments-paymentPspReference-captures-split-balanceplatform" : {
        "summary" : "Capture and split an authorized payment between balance accounts",
        "description" : "Example capture request",
        "value" : {
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "amount" : {
            "value" : 2000,
            "currency" : "USD"
          },
          "splits" : [ {
            "amount" : {
              "value" : 1500
            },
            "type" : "BalanceAccount",
            "account" : "BA00000000000000000000001",
            "reference" : "Your reference for the sale amount",
            "description" : "Your description for the sale amount"
          }, {
            "amount" : {
              "value" : 500
            },
            "type" : "Commission",
            "reference" : "Your reference for the commission",
            "description" : "Your description for the commission"
          }, {
            "type" : "PaymentFee",
            "account" : "BA00000000000000000000001",
            "reference" : "Your reference for the fees",
            "description" : "Your description for the fees"
          } ]
        }
      },
      "post-payments-paymentPspReference-captures-split-balanceplatform-201" : {
        "summary" : "Capture requested and split between balance accounts",
        "description" : "Example response when a capture was requested and split between balance accounts",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "paymentPspReference" : "993617894903480A",
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "pspReference" : "993617894906488A",
          "status" : "received",
          "amount" : {
            "value" : 2000,
            "currency" : "USD"
          },
          "splits" : [ {
            "amount" : {
              "value" : 1500
            },
            "type" : "BalanceAccount",
            "account" : "BA00000000000000000000001",
            "reference" : "Your reference for the sale amount",
            "description" : "Your description for the sale amount"
          }, {
            "amount" : {
              "value" : 500
            },
            "type" : "Commission",
            "reference" : "Your reference for the commission",
            "description" : "Your description for the commission"
          }, {
            "type" : "PaymentFee",
            "account" : "BA00000000000000000000001",
            "reference" : "Your reference for the fees",
            "description" : "Your description for the fees"
          } ]
        }
      },
      "post-payments-paymentPspReference-captures-split-classic" : {
        "summary" : "Capture and split an authorized payment in the Classic Platforms integration",
        "description" : "Example capture request",
        "value" : {
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "amount" : {
            "value" : 2000,
            "currency" : "USD"
          },
          "splits" : [ {
            "account" : "8816080397613514",
            "amount" : {
              "value" : 1500
            },
            "reference" : "Your reference for the sale amount.",
            "type" : "MarketPlace"
          }, {
            "amount" : {
              "value" : 500
            },
            "reference" : "Your reference for the commission.",
            "type" : "Commission"
          } ]
        }
      },
      "post-payments-paymentPspReference-captures-split-classic-201" : {
        "summary" : "Capture requested and split in the Classic Platforms integration",
        "description" : "Example response when a capture was requested in the Classic Platforms integration",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "paymentPspReference" : "993617894903480A",
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "pspReference" : "993617894906488A",
          "status" : "received",
          "amount" : {
            "value" : 2000,
            "currency" : "USD"
          },
          "splits" : [ {
            "account" : "8816080397613514",
            "amount" : {
              "value" : 1500
            },
            "reference" : "Your reference for the sale amount.",
            "type" : "MarketPlace"
          }, {
            "amount" : {
              "value" : 500
            },
            "reference" : "Your reference for the commission.",
            "type" : "Commission"
          } ]
        }
      },
      "post-payments-paymentPspReference-refunds-refund" : {
        "summary" : "Refund a payment",
        "description" : "Example refund request",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 2500
          },
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-paymentPspReference-refunds-refund-201" : {
        "summary" : "Refund requested",
        "description" : "Example response when a refund was requested",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "paymentPspReference" : "993617894903480A",
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "pspReference" : "993617894906488A",
          "status" : "received",
          "amount" : {
            "currency" : "EUR",
            "value" : 2500
          }
        }
      },
      "post-payments-paymentPspReference-reversals-reversal" : {
        "summary" : "Reverse (cancel or refund) a payment",
        "description" : "Example request to reverse a payment",
        "value" : {
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-paymentPspReference-reversals-reversal-201" : {
        "summary" : "Payment reversal requested",
        "description" : "Example response when a payment reversal was requested",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "paymentPspReference" : "993617894903480A",
          "reference" : "YOUR_UNIQUE_REFERENCE",
          "pspReference" : "993617894906488A",
          "status" : "received"
        }
      },
      "post-payments-recurring" : {
        "summary" : "Make a card payment with a token",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "scheme",
            "storedPaymentMethodId" : "8316038796685850"
          },
          "shopperReference" : "YOUR_UNIQUE_SHOPPER_ID_IOfW3subscription",
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "shopperInteraction" : "ContAuth",
          "recurringProcessingModel" : "Subscription"
        }
      },
      "post-payments-split" : {
        "summary" : "Split a payment in a Classic Platforms integration",
        "value" : {
          "paymentMethod" : {
            "type" : "scheme",
            "number" : "4111111111111111",
            "cvc" : "737",
            "expiryMonth" : "03",
            "expiryYear" : "2030",
            "holderName" : "John Smith"
          },
          "amount" : {
            "value" : 6200,
            "currency" : "EUR"
          },
          "reference" : "YOUR_ORDER_NUMBER",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "returnUrl" : "https://your-company.example.com/...",
          "splits" : [ {
            "amount" : {
              "value" : 6000
            },
            "type" : "MarketPlace",
            "account" : "151272963",
            "reference" : "6124145",
            "description" : "Porcelain Doll: Eliza (20cm)"
          }, {
            "amount" : {
              "value" : 200
            },
            "type" : "Commission",
            "reference" : "6124146"
          } ]
        }
      },
      "post-payments-split-balanceplatform" : {
        "summary" : "Split a payment between balance accounts",
        "value" : {
          "paymentMethod" : {
            "type" : "scheme",
            "number" : "4111111111111111",
            "cvc" : "737",
            "expiryMonth" : "03",
            "expiryYear" : "2030",
            "holderName" : "John Smith"
          },
          "amount" : {
            "value" : 40000,
            "currency" : "USD"
          },
          "reference" : "YOUR_ORDER_NUMBER",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "returnUrl" : "https://your-company.example.com/...",
          "platformChargebackLogic" : {
            "behavior" : "deductFromOneBalanceAccount",
            "targetAccount" : "BA00000000000000000000001",
            "costAllocationAccount" : "BA00000000000000000000001"
          },
          "splits" : [ {
            "amount" : {
              "value" : 39600
            },
            "type" : "BalanceAccount",
            "account" : "BA00000000000000000000001",
            "reference" : "Your reference for the sale amount",
            "description" : "Your description for the sale amount"
          }, {
            "amount" : {
              "value" : 400
            },
            "type" : "Commission",
            "reference" : "Your reference for the commission",
            "description" : "Your description for the commission"
          }, {
            "account" : "BA00000000000000000000001",
            "reference" : "Your reference for the fees",
            "description" : "Your description for the fees",
            "type" : "PaymentFee"
          } ]
        }
      },
      "post-payments-split-balanceplatform-200" : {
        "summary" : "Payment split between balance accounts",
        "value" : {
          "additionalData" : {
            "authCode" : "008304",
            "avsResult" : "5 No AVS data provided",
            "cardHolderName" : "John Smith",
            "refusalReasonRaw" : "AUTHORISED",
            "issuerCountry" : "NL",
            "cvcResult" : "1 Matches",
            "avsResultRaw" : "5",
            "cvcResultRaw" : "M",
            "acquirerCode" : "TestPmmAcquirer",
            "acquirerReference" : "YOUR_ACQUIRER_REFERENCE"
          },
          "pspReference" : "993617895204576J",
          "resultCode" : "Authorised",
          "amount" : {
            "currency" : "USD",
            "value" : 40000
          },
          "merchantReference" : "YOUR_ORDER_NUMBER"
        }
      },
      "post-payments-subscription-first-transaction" : {
        "summary" : "Tokenize card details for a subscription",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 1000
          },
          "reference" : "Your order number",
          "paymentMethod" : {
            "type" : "scheme",
            "number" : "4111111111111111",
            "expiryMonth" : "03",
            "expiryYear" : "2030",
            "holderName" : "John Smith",
            "cvc" : "737"
          },
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "storePaymentMethod" : true,
          "shopperInteraction" : "Ecommerce",
          "recurringProcessingModel" : "Subscription",
          "returnUrl" : "https://your-company.example.com/...",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
        }
      },
      "post-payments-subscription-first-transaction-200" : {
        "summary" : "Card details tokenized for a subscription",
        "value" : {
          "additionalData" : {
            "cvcResult" : "1 Matches",
            "authCode" : "098871",
            "avsResult" : "4 AVS not supported for this card type",
            "avsResultRaw" : "4",
            "cvcResultRaw" : "M",
            "refusalReasonRaw" : "AUTHORISED",
            "acquirerCode" : "TestPmmAcquirer",
            "acquirerReference" : "YOUR_ACQUIRER_REFERENCE",
            "tokenization.shopperReference" : "YOUR_SHOPPER_REFERENCE",
            "tokenization.storedPaymentMethodId" : "M5N7TQ4TG5PFWR50",
            "tokenization.store.operationType" : "created"
          },
          "pspReference" : "YOUR_PSP_REFERENCE",
          "resultCode" : "Authorised",
          "merchantReference" : "YOUR_MERCHANT_REFERENCE"
        }
      },
      "post-paypal-updateOrder-advanced-with-delivery" : {
        "summary" : "Update a PayPal order with delivery methods in an Advanced flow integration",
        "value" : {
          "pspReference" : "DZ4DPSHB4WD2WN82",
          "paymentData" : "po7XZ...",
          "amount" : {
            "currency" : "EUR",
            "value" : 12000
          },
          "deliveryMethods" : [ {
            "reference" : "1",
            "description" : "Express Shipping",
            "type" : "Shipping",
            "amount" : {
              "currency" : "EUR",
              "value" : 1000
            },
            "selected" : true
          }, {
            "reference" : "2",
            "description" : "Standard Ground",
            "type" : "Shipping",
            "amount" : {
              "currency" : "EUR",
              "value" : 500
            },
            "selected" : false
          } ]
        }
      },
      "post-paypal-updateOrder-advanced-with-delivery-200" : {
        "summary" : "Order updated with delivery methods in an Advanced flow integration",
        "value" : {
          "paymentData" : "po7XZ...",
          "status" : "success"
        }
      },
      "post-paypal-updateOrder-advanced-without-delivery" : {
        "summary" : "Update a PayPal order in an Advanced flow integration",
        "value" : {
          "pspReference" : "HWL5D5BDLSGLNK82",
          "paymentData" : "kly45P...",
          "amount" : {
            "currency" : "EUR",
            "value" : 1200
          }
        }
      },
      "post-paypal-updateOrder-advanced-without-delivery-200" : {
        "summary" : "Order updated with delivery methods in an Advanced flow integration",
        "value" : {
          "paymentData" : "kly45P...",
          "status" : "success"
        }
      },
      "post-paypal-updateOrder-sessions-with-delivery" : {
        "summary" : "Update a PayPal order with delivery methods in a Sessions flow integration",
        "value" : {
          "sessionId" : "CS12345679",
          "paymentData" : "ey4YZ...",
          "amount" : {
            "currency" : "EUR",
            "value" : 12000
          },
          "deliveryMethods" : [ {
            "reference" : "1",
            "description" : "Express Shipping",
            "type" : "Shipping",
            "amount" : {
              "currency" : "EUR",
              "value" : 1000
            },
            "selected" : true
          }, {
            "reference" : "2",
            "description" : "Standard Ground",
            "type" : "Shipping",
            "amount" : {
              "currency" : "EUR",
              "value" : 500
            },
            "selected" : false
          } ]
        }
      },
      "post-paypal-updateOrder-sessions-with-delivery-200" : {
        "summary" : "Order updated with delivery methods in a Sessions flow integration",
        "value" : {
          "paymentData" : "ey4YZ...",
          "status" : "success"
        }
      },
      "post-paypal-updateOrder-sessions-without-delivery" : {
        "summary" : "Update a PayPal order in a Sessions flow integration",
        "value" : {
          "sessionId" : "CS12345679",
          "paymentData" : "em9YZ...",
          "amount" : {
            "currency" : "EUR",
            "value" : 8700
          }
        }
      },
      "post-paypal-updateOrder-sessions-without-delivery-200" : {
        "summary" : "Order updated in a Sessions flow integration",
        "value" : {
          "paymentData" : "em9YZ...",
          "status" : "success"
        }
      },
      "post-sessions-00.success" : {
        "summary" : "Create a payment session",
        "description" : "Example request for creating a payment session",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "amount" : {
            "value" : 100,
            "currency" : "EUR"
          },
          "returnUrl" : "https://your-company.example.com/checkout?shopperOrder=12xy..",
          "reference" : "YOUR_PAYMENT_REFERENCE",
          "countryCode" : "NL"
        }
      },
      "post-sessions-00.success-201" : {
        "summary" : "Payment session created",
        "description" : "Example response for creating a payment session",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 100
          },
          "countryCode" : "NL",
          "expiresAt" : "2022-01-11T13:53:18+01:00",
          "id" : "CS451F2AB1ED897A94",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "reference" : "YOUR_PAYMENT_REFERENCE",
          "returnUrl" : "https://your-company.example.com/checkout?shopperOrder=12xy..",
          "sessionData" : "Ab02b4c0!BQABAgBfYI29..."
        }
      },
      "post-sessions-01.klarna" : {
        "summary" : "Create a payment session including Klarna fields",
        "description" : "Example request for creating a payment session when Klarna is one of the available payment methods",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "reference" : "YOUR_ORDER_REFERENCE",
          "amount" : {
            "currency" : "SEK",
            "value" : 1000
          },
          "shopperLocale" : "en_US",
          "countryCode" : "SE",
          "telephoneNumber" : "+46 840 839 298",
          "shopperEmail" : "youremail@email.com",
          "shopperName" : {
            "firstName" : "Testperson-se",
            "lastName" : "Approved"
          },
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "billingAddress" : {
            "city" : "Ankeborg",
            "country" : "SE",
            "houseNumberOrName" : "1",
            "postalCode" : "12345",
            "street" : "Stargatan"
          },
          "deliveryAddress" : {
            "city" : "Ankeborg",
            "country" : "SE",
            "houseNumberOrName" : "1",
            "postalCode" : "12345",
            "street" : "Stargatan"
          },
          "dateOfBirth" : "1996-09-04",
          "socialSecurityNumber" : "0108",
          "returnUrl" : "https://example.org",
          "lineItems" : [ {
            "quantity" : 1,
            "amountExcludingTax" : 331,
            "taxPercentage" : 2100,
            "description" : "Shoes",
            "id" : "Item #1",
            "taxAmount" : 69,
            "amountIncludingTax" : 400,
            "productUrl" : "URL_TO_PURCHASED_ITEM",
            "imageUrl" : "URL_TO_PICTURE_OF_PURCHASED_ITEM"
          }, {
            "quantity" : 2,
            "amountExcludingTax" : 248,
            "taxPercentage" : 2100,
            "description" : "Socks",
            "id" : "Item #2",
            "taxAmount" : 52,
            "amountIncludingTax" : 300,
            "productUrl" : "URL_TO_PURCHASED_ITEM",
            "imageUrl" : "URL_TO_PICTURE_OF_PURCHASED_ITEM"
          } ]
        }
      },
      "post-sessions-01.klarna-201" : {
        "summary" : "Payment session created for a Klarna payment",
        "description" : "Example ",
        "value" : {
          "amount" : {
            "currency" : "SEK",
            "value" : 1000
          },
          "billingAddress" : {
            "city" : "Ankeborg",
            "country" : "SE",
            "houseNumberOrName" : "1",
            "postalCode" : "12345",
            "street" : "Stargatan"
          },
          "countryCode" : "SE",
          "dateOfBirth" : "1996-09-04T02:00:00+02:00",
          "deliveryAddress" : {
            "city" : "Ankeborg",
            "country" : "SE",
            "houseNumberOrName" : "1",
            "postalCode" : "12345",
            "street" : "Stargatan"
          },
          "expiresAt" : "2022-01-11T13:57:52+01:00",
          "id" : "CSC52E9932D39ADAF3",
          "lineItems" : [ {
            "amountExcludingTax" : 331,
            "amountIncludingTax" : 400,
            "description" : "Shoes",
            "id" : "Item #1",
            "imageUrl" : "URL_TO_PICTURE_OF_PURCHASED_ITEM",
            "productUrl" : "URL_TO_PURCHASED_ITEM",
            "quantity" : 1,
            "taxAmount" : 69,
            "taxPercentage" : 2100
          }, {
            "amountExcludingTax" : 248,
            "amountIncludingTax" : 300,
            "description" : "Socks",
            "id" : "Item #2",
            "imageUrl" : "URL_TO_PICTURE_OF_PURCHASED_ITEM",
            "productUrl" : "URL_TO_PURCHASED_ITEM",
            "quantity" : 2,
            "taxAmount" : 52,
            "taxPercentage" : 2100
          } ],
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "reference" : "YOUR_ORDER_REFERENCE",
          "returnUrl" : "https://example.org",
          "shopperEmail" : "youremail@email.com",
          "shopperLocale" : "en_US",
          "shopperName" : {
            "firstName" : "Testperson-se",
            "lastName" : "Approved"
          },
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "socialSecurityNumber" : "0108",
          "telephoneNumber" : "+46 840 839 298",
          "sessionData" : "Ab02b4c0!BQABAgBfYI29..."
        }
      },
      "post-sessions-enableOneClick" : {
        "summary" : "Tokenize card details for one-off payments",
        "description" : "Example request for tokenizing card details for one-off payments",
        "value" : {
          "merchantAccount" : "TestMerchantCheckout",
          "amount" : {
            "value" : 100,
            "currency" : "EUR"
          },
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "returnUrl" : "https://your-company.example.com/checkout?shopperOrder=12xy..",
          "reference" : "YOUR_PAYMENT_REFERENCE",
          "countryCode" : "NL",
          "storePaymentMethod" : true,
          "shopperInteraction" : "Ecommerce",
          "recurringProcessingModel" : "CardOnFile"
        }
      },
      "post-sessions-enableOneClick-201" : {
        "summary" : "Card details tokenized for one-off payments",
        "description" : "Example ",
        "value" : {
          "amount" : {
            "currency" : "EUR",
            "value" : 100
          },
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "countryCode" : "NL",
          "expiresAt" : "2022-01-11T13:56:05+01:00",
          "id" : "CSEE37DC1DD751A01F",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "recurringProcessingModel" : "CardOnFile",
          "reference" : "YOUR_PAYMENT_REFERENCE",
          "returnUrl" : "https://your-company.example.com/checkout?shopperOrder=12xy..",
          "shopperInteraction" : "Ecommerce",
          "storePaymentMethod" : true,
          "sessionData" : "Ab02b4c0!BQABAgBfYI29..."
        }
      },
      "post-sessions-split" : {
        "summary" : "Split a payment between balance accounts",
        "value" : {
          "amount" : {
            "value" : 40000,
            "currency" : "USD"
          },
          "reference" : "YOUR_ORDER_NUMBER",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "returnUrl" : "https://your-company.example.com/...",
          "splits" : [ {
            "amount" : {
              "value" : 39200
            },
            "type" : "BalanceAccount",
            "account" : "BA00000000000000000000001",
            "reference" : "Your reference for the sale amount",
            "description" : "Your description for the sale amount"
          }, {
            "amount" : {
              "value" : 400
            },
            "type" : "Commission",
            "reference" : "Your reference for the commission",
            "description" : "Your description for the commission"
          }, {
            "amount" : {
              "value" : 400
            },
            "account" : "BA00000000000000000000001",
            "reference" : "Your reference for the fees",
            "description" : "Your description for the fees",
            "type" : "PaymentFee"
          } ]
        }
      },
      "post-sessions-split-201" : {
        "summary" : "Payment split between balance accounts",
        "value" : {
          "amount" : {
            "currency" : "USD",
            "value" : 40000
          },
          "expiresAt" : "2023-06-26T11:01:55+02:00",
          "id" : "CSFCBC80570618EF2C",
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "reference" : "YOUR_ORDER_NUMBER",
          "returnUrl" : "https://your-company.example.com/...",
          "shopperLocale" : "en-US",
          "splits" : [ {
            "account" : "BA00000000000000000000001",
            "amount" : {
              "value" : 39200
            },
            "description" : "Your description for the sale amount",
            "reference" : "Your reference for the sale amount",
            "type" : "BalanceAccount"
          }, {
            "amount" : {
              "value" : 400
            },
            "description" : "Your description for the commission",
            "reference" : "Your reference for the commission",
            "type" : "Commission"
          }, {
            "amount" : {
              "value" : 400
            },
            "account" : "BA00000000000000000000001",
            "description" : "Your description for the fees",
            "reference" : "Your reference for the fees",
            "type" : "PaymentFee"
          } ],
          "sessionData" : "Ab02b4c0!BQABAgCjTErwAztqXSFTiZtxZMjRLYkoGbPkmvCvDX1"
        }
      },
      "post-storedPaymentMethods-encrypted-card-details" : {
        "summary" : "Store encrypted card details for subscription payments",
        "description" : "Example request for storing encrypted card details for subscription payments",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "paymentMethod" : {
            "type" : "scheme",
            "encryptedCardNumber" : "test_4111111111111111",
            "encryptedExpiryMonth" : "test_03",
            "encryptedExpiryYear" : "test_2030",
            "encryptedSecurityCode" : "test_737",
            "holderName" : "John Smith"
          },
          "shopperEmail" : "s.hopper@test.com",
          "shopperIP" : "192.0.2.1"
        }
      },
      "post-storedPaymentMethods-encrypted-card-details-201" : {
        "summary" : "Card details stored",
        "description" : "Example for a successful response to store encrypted card details",
        "value" : {
          "expiryMonth" : "03",
          "expiryYear" : "2030",
          "holderName" : "John Smith",
          "id" : "KHQC5N7G84BLNK43",
          "lastFour" : "1111",
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "type" : "scheme"
        }
      },
      "post-storedPaymentMethods-unencrypted-card-details" : {
        "summary" : "Store unencrypted card details for subscription payments",
        "description" : "Example request for storing encrypted card details for subscription payments",
        "value" : {
          "merchantAccount" : "YOUR_MERCHANT_ACCOUNT",
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "paymentMethod" : {
            "type" : "scheme",
            "number" : "4111111111111111",
            "expiryMonth" : "03",
            "expiryYear" : "2030",
            "cvc" : "737",
            "holderName" : "John Smith"
          },
          "shopperEmail" : "s.hopper@test.com",
          "shopperIP" : "192.0.2.1"
        }
      },
      "post-storedPaymentMethods-unencrypted-card-details-201" : {
        "summary" : "Card details stored",
        "description" : "Example for a successful response to store unencrypted card details",
        "value" : {
          "expiryMonth" : "03",
          "expiryYear" : "2030",
          "holderName" : "John Smith",
          "id" : "KHQC5N7G84BLNK43",
          "lastFour" : "1111",
          "shopperReference" : "YOUR_SHOPPER_REFERENCE",
          "type" : "scheme"
        }
      }
    },
    "headers" : {
      "Idempotency-Key" : {
        "description" : "The idempotency key used for processing the request. Present if the key was provided in the request.",
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "name" : "X-API-Key",
        "in" : "header"
      },
      "BasicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}