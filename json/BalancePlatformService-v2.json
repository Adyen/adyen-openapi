{
  "openapi" : "3.1.0",
  "info" : {
    "title" : "Configuration API",
    "description" : "The Configuration API allows you to manage your balance platform where you can create account holders, balance accounts, cards, and business accounts.\n\n## Authentication\nEach request to the Configuration API must be signed with an API key. Generate an API key in your Customer Area if you have a [platform setup](https://docs.adyen.com/platforms/manage-access/api-credentials-web-service/#generate-api-key) or [marketplace setup](https://docs.adyen.com/marketplaces/manage-access/api-credentials-web-service/#generate-api-key).\n\n If you have an Adyen Issuing integration, [generate an API key](https://docs.adyen.com/issuing/manage-access/api-credentials-web-service/#generate-api-key) in your Balance Platform Customer Area.\n\nTo connect to the API, add an `X-API-Key` header with the API key as the value, for example:\n\n ```\ncurl\n-H \"Content-Type: application/json\" \\\n-H \"X-API-Key: YOUR_API_KEY\" \\\n...\n```\n\n## Versioning\nThe Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.\n\nFor example:\n```\nhttps://balanceplatform-api-test.adyen.com/bcl/v2/accountHolders\n```\n## Going live\nWhen going live, generate an API key in your [live Customer Area](https://ca-live.adyen.com/ca/) if you have an Adyen for Platforms integration or [live Balance Platform Customer Area](https://balanceplatform-live.adyen.com/balanceplatform/) if you have an Adyen Issuing integration.You can then use the API key to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v2`.",
    "termsOfService" : "https://www.adyen.com/legal/terms-and-conditions",
    "contact" : {
      "name" : "Adyen Developer Experience team",
      "url" : "https://github.com/Adyen/adyen-openapi"
    },
    "version" : "2",
    "x-publicVersion" : true
  },
  "servers" : [ {
    "url" : "https://balanceplatform-api-test.adyen.com/bcl/v2"
  } ],
  "tags" : [ {
    "name" : "Platform"
  }, {
    "name" : "Account holders"
  }, {
    "name" : "Balance accounts"
  }, {
    "name" : "Balances"
  }, {
    "name" : "Payment instruments"
  }, {
    "name" : "Payment instrument groups"
  }, {
    "name" : "Transaction rules"
  }, {
    "name" : "Bank account validation"
  }, {
    "name" : "Network tokens"
  }, {
    "name" : "Grant accounts"
  }, {
    "name" : "Grant offers"
  }, {
    "name" : "Card orders"
  }, {
    "name" : "Manage card PIN"
  }, {
    "name" : "Transfer routes"
  }, {
    "name" : "SCA device management"
  }, {
    "name" : "Manage SCA devices"
  } ],
  "paths" : {
    "/accountHolders" : {
      "post" : {
        "tags" : [ "Account holders" ],
        "summary" : "Create an account holder",
        "description" : "Creates an account holder linked to a [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities).\n\n",
        "operationId" : "post-accountHolders",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHolderInfo"
              },
              "examples" : {
                "createAccountHolder" : {
                  "$ref" : "#/components/examples/post-accountHolders-createAccountHolder"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHolder"
                },
                "examples" : {
                  "createAccountHolder" : {
                    "$ref" : "#/components/examples/post-accountHolders-createAccountHolder-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "createAccountHolder"
      }
    },
    "/accountHolders/{id}" : {
      "get" : {
        "tags" : [ "Account holders" ],
        "summary" : "Get an account holder",
        "description" : "Returns an account holder.",
        "operationId" : "get-accountHolders-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the account holder.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHolder"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-accountHolders-id-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 3,
        "x-methodName" : "getAccountHolder"
      },
      "patch" : {
        "tags" : [ "Account holders" ],
        "summary" : "Update an account holder",
        "description" : "Updates an account holder. When updating an account holder resource, if a parameter is not provided in the request, it is left unchanged.",
        "operationId" : "patch-accountHolders-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the account holder.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountHolderUpdateRequest"
              },
              "examples" : {
                "requestAccountHolderCapability" : {
                  "$ref" : "#/components/examples/patch-accountHolders-id-requestAccountHolderCapability"
                },
                "updateAccountHolderStatus" : {
                  "$ref" : "#/components/examples/patch-accountHolders-id-updateAccountHolderStatus"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountHolder"
                },
                "examples" : {
                  "requestAccountHolderCapability" : {
                    "$ref" : "#/components/examples/patch-accountHolders-id-requestAccountHolderCapability-200"
                  },
                  "updateAccountHolderStatus" : {
                    "$ref" : "#/components/examples/patch-accountHolders-id-updateAccountHolderStatus-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "updateAccountHolder"
      }
    },
    "/accountHolders/{id}/balanceAccounts" : {
      "get" : {
        "tags" : [ "Account holders" ],
        "summary" : "Get all balance accounts of an account holder",
        "description" : "Returns a paginated list of the balance accounts associated with an account holder. To fetch multiple pages, use the query parameters. \n\nFor example, to limit the page to 5 balance accounts and skip the first 10, use `/accountHolders/{id}/balanceAccounts?limit=5&offset=10`.",
        "operationId" : "get-accountHolders-id-balanceAccounts",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the account holder.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items that you want to skip.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaginatedBalanceAccountsResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-accountHolders-id-balanceAccounts-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 4,
        "x-methodName" : "getAllBalanceAccountsOfAccountHolder"
      }
    },
    "/accountHolders/{id}/taxForms" : {
      "get" : {
        "tags" : [ "Account holders" ],
        "summary" : "Get a tax form",
        "description" : "Generates a tax form for account holders operating in the US. For more information, refer to US tax forms for [marketplaces](https://docs.adyen.com/marketplaces/us-tax-forms/) or [platforms](https://docs.adyen.com/platforms/us-tax-forms/) .",
        "operationId" : "get-accountHolders-id-taxForms",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the account holder.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "formType",
          "in" : "query",
          "description" : "The type of tax form you want to retrieve. Accepted values are **US1099k** and **US1099nec**",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "US1099k", "US1099nec" ],
            "x-enum" : [ {
              "value" : "US1099k"
            }, {
              "value" : "US1099nec"
            } ]
          }
        }, {
          "name" : "year",
          "in" : "query",
          "description" : "The tax year in YYYY format for the tax form you want to retrieve",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetTaxFormResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-accountHolders-id-taxForms-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "2",
        "x-sortIndex" : 5,
        "x-methodName" : "getTaxForm"
      }
    },
    "/accountHolders/{id}/transactionRules" : {
      "get" : {
        "tags" : [ "Account holders" ],
        "summary" : "Get all transaction rules for an account holder",
        "description" : "Returns a list of transaction rules associated with an account holder.",
        "operationId" : "get-accountHolders-id-transactionRules",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the account holder.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionRulesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 18,
        "x-methodName" : "getAllTransactionRulesForAccountHolder"
      }
    },
    "/balanceAccounts" : {
      "post" : {
        "tags" : [ "Balance accounts" ],
        "summary" : "Create a balance account",
        "description" : "Creates a balance account that holds the funds of the associated account holder.",
        "operationId" : "post-balanceAccounts",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BalanceAccountInfo"
              },
              "examples" : {
                "createBalanceAccount" : {
                  "$ref" : "#/components/examples/post-balanceAccounts-createBalanceAccount"
                },
                "createBalanceAccountCAD" : {
                  "$ref" : "#/components/examples/post-balanceAccounts-createBalanceAccountCAD"
                },
                "createBalanceAccountGBP" : {
                  "$ref" : "#/components/examples/post-balanceAccounts-createBalanceAccountGBP"
                },
                "createBalanceAccountUSD" : {
                  "$ref" : "#/components/examples/post-balanceAccounts-createBalanceAccountUSD"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BalanceAccount"
                },
                "examples" : {
                  "createBalanceAccount" : {
                    "$ref" : "#/components/examples/post-balanceAccounts-createBalanceAccount-200"
                  },
                  "createBalanceAccountCAD" : {
                    "$ref" : "#/components/examples/post-balanceAccounts-createBalanceAccountCAD-200"
                  },
                  "createBalanceAccountGBP" : {
                    "$ref" : "#/components/examples/post-balanceAccounts-createBalanceAccountGBP-200"
                  },
                  "createBalanceAccountUSD" : {
                    "$ref" : "#/components/examples/post-balanceAccounts-createBalanceAccountUSD-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "createBalanceAccount"
      }
    },
    "/balanceAccounts/{balanceAccountId}/sweeps" : {
      "get" : {
        "tags" : [ "Balance accounts" ],
        "summary" : "Get all sweeps for a balance account",
        "description" : "Returns a list of the sweeps configured for a balance account.\n\nTo fetch multiple pages, use the query parameters. For example, to limit the page to 5 sweeps and to skip the first 10, use `/balanceAccounts/{balanceAccountId}/sweeps?limit=5&offset=10`.",
        "operationId" : "get-balanceAccounts-balanceAccountId-sweeps",
        "parameters" : [ {
          "name" : "balanceAccountId",
          "in" : "path",
          "description" : "The unique identifier of the balance account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items that you want to skip.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BalanceSweepConfigurationsResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-balanceAccounts-balanceAccountId-sweeps-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "2",
        "x-sortIndex" : 7,
        "x-methodName" : "getAllSweepsForBalanceAccount"
      },
      "post" : {
        "tags" : [ "Balance accounts" ],
        "summary" : "Create a sweep",
        "description" : "Creates a sweep that results in moving funds from or to a balance account.\n\nA sweep pulls in or pushes out funds based on a defined schedule, amount, currency, and a source or a destination.",
        "operationId" : "post-balanceAccounts-balanceAccountId-sweeps",
        "parameters" : [ {
          "name" : "balanceAccountId",
          "in" : "path",
          "description" : "The unique identifier of the balance account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateSweepConfigurationV2"
              },
              "examples" : {
                "createSweep-pull" : {
                  "$ref" : "#/components/examples/post-balanceAccounts-balanceAccountId-sweeps-createSweep-pull"
                },
                "createSweep-push" : {
                  "$ref" : "#/components/examples/post-balanceAccounts-balanceAccountId-sweeps-createSweep-push"
                },
                "createSweep-push-priorities" : {
                  "$ref" : "#/components/examples/post-balanceAccounts-balanceAccountId-sweeps-createSweep-push-priorities"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SweepConfigurationV2"
                },
                "examples" : {
                  "createSweep-pull" : {
                    "$ref" : "#/components/examples/post-balanceAccounts-balanceAccountId-sweeps-createSweep-pull-200"
                  },
                  "createSweep-push" : {
                    "$ref" : "#/components/examples/post-balanceAccounts-balanceAccountId-sweeps-createSweep-push-200"
                  },
                  "createSweep-push-priorities" : {
                    "$ref" : "#/components/examples/post-balanceAccounts-balanceAccountId-sweeps-createSweep-push-priorities-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "2",
        "x-sortIndex" : 5,
        "x-methodName" : "createSweep"
      }
    },
    "/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}" : {
      "get" : {
        "tags" : [ "Balance accounts" ],
        "summary" : "Get a sweep",
        "description" : "Returns a sweep.",
        "operationId" : "get-balanceAccounts-balanceAccountId-sweeps-sweepId",
        "parameters" : [ {
          "name" : "balanceAccountId",
          "in" : "path",
          "description" : "The unique identifier of the balance account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sweepId",
          "in" : "path",
          "description" : "The unique identifier of the sweep.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SweepConfigurationV2"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-balanceAccounts-balanceAccountId-sweeps-sweepId-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "2",
        "x-sortIndex" : 8,
        "x-methodName" : "getSweep"
      },
      "delete" : {
        "tags" : [ "Balance accounts" ],
        "summary" : "Delete a sweep",
        "description" : "Deletes a sweep for a balance account.",
        "operationId" : "delete-balanceAccounts-balanceAccountId-sweeps-sweepId",
        "parameters" : [ {
          "name" : "balanceAccountId",
          "in" : "path",
          "description" : "The unique identifier of the balance account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sweepId",
          "in" : "path",
          "description" : "The unique identifier of the sweep.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content - look at the actual response code for the status of the request. "
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "2",
        "x-sortIndex" : 9,
        "x-methodName" : "deleteSweep"
      },
      "patch" : {
        "tags" : [ "Balance accounts" ],
        "summary" : "Update a sweep",
        "description" : "Updates a sweep. When updating a sweep resource, note that if a request parameter is not provided, the parameter is left unchanged.",
        "operationId" : "patch-balanceAccounts-balanceAccountId-sweeps-sweepId",
        "parameters" : [ {
          "name" : "balanceAccountId",
          "in" : "path",
          "description" : "The unique identifier of the balance account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sweepId",
          "in" : "path",
          "description" : "The unique identifier of the sweep.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSweepConfigurationV2"
              },
              "examples" : {
                "updateSweep-status" : {
                  "$ref" : "#/components/examples/patch-balanceAccounts-balanceAccountId-sweeps-sweepId-updateSweep-status"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SweepConfigurationV2"
                },
                "examples" : {
                  "updateSweep-status" : {
                    "$ref" : "#/components/examples/patch-balanceAccounts-balanceAccountId-sweeps-sweepId-updateSweep-status-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "2",
        "x-sortIndex" : 6,
        "x-methodName" : "updateSweep"
      }
    },
    "/balanceAccounts/{id}" : {
      "get" : {
        "tags" : [ "Balance accounts" ],
        "summary" : "Get a balance account",
        "description" : "Returns a balance account and its balances for the default currency and other currencies with a non-zero balance.",
        "operationId" : "get-balanceAccounts-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the balance account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BalanceAccount"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-balanceAccounts-id-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 3,
        "x-methodName" : "getBalanceAccount"
      },
      "patch" : {
        "tags" : [ "Balance accounts" ],
        "summary" : "Update a balance account",
        "description" : "Updates a balance account.",
        "operationId" : "patch-balanceAccounts-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the balance account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BalanceAccountUpdateRequest"
              },
              "examples" : {
                "updateBalanceAccount" : {
                  "$ref" : "#/components/examples/patch-balanceAccounts-id-updateBalanceAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BalanceAccount"
                },
                "examples" : {
                  "updateBalanceAccount" : {
                    "$ref" : "#/components/examples/patch-balanceAccounts-id-updateBalanceAccount-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "updateBalanceAccount"
      }
    },
    "/balanceAccounts/{id}/paymentInstruments" : {
      "get" : {
        "tags" : [ "Balance accounts" ],
        "summary" : "Get payment instruments linked to a balance account",
        "description" : "Returns a paginated list of the payment instruments associated with a balance account. \n\nTo fetch multiple pages, use the query parameters.For example, to limit the page to 3 payment instruments which are in active status and to skip the first 6, use `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6&status=active`.",
        "operationId" : "get-balanceAccounts-id-paymentInstruments",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the balance account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items that you want to skip.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of the payment instruments that you want to get. By default, the response includes payment instruments with any status.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaginatedPaymentInstrumentsResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-balanceAccounts-id-paymentInstruments-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 4,
        "x-methodName" : "getPaymentInstrumentsLinkedToBalanceAccount"
      }
    },
    "/balanceAccounts/{id}/transactionRules" : {
      "get" : {
        "tags" : [ "Balance accounts" ],
        "summary" : "Get all transaction rules for a balance account",
        "description" : "Returns a list of transaction rules associated with a balance account.",
        "operationId" : "get-balanceAccounts-id-transactionRules",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the balance account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionRulesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 18,
        "x-methodName" : "getAllTransactionRulesForBalanceAccount"
      }
    },
    "/balancePlatforms/{id}" : {
      "get" : {
        "tags" : [ "Platform" ],
        "summary" : "Get a balance platform",
        "description" : "Returns a balance platform.",
        "operationId" : "get-balancePlatforms-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the balance platform.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BalancePlatform"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-balancePlatforms-id-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "getBalancePlatform"
      }
    },
    "/balancePlatforms/{id}/accountHolders" : {
      "get" : {
        "tags" : [ "Platform" ],
        "summary" : "Get all account holders under a balance platform",
        "description" : "Returns a paginated list of all the account holders that belong to the balance platform. To fetch multiple pages, use the query parameters. \n\nFor example, to limit the page to 5 account holders and to skip the first 20, use `/balancePlatforms/{id}/accountHolders?limit=5&offset=20`.",
        "operationId" : "get-balancePlatforms-id-accountHolders",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the balance platform.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items that you want to skip.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaginatedAccountHoldersResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-balancePlatforms-id-accountHolders-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "getAllAccountHoldersUnderBalancePlatform"
      }
    },
    "/balancePlatforms/{id}/transactionRules" : {
      "get" : {
        "tags" : [ "Platform" ],
        "summary" : "Get all transaction rules for a balance platform",
        "description" : "Returns a list of transaction rules associated with a balance platform.",
        "operationId" : "get-balancePlatforms-id-transactionRules",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the balance platform.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionRulesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 5,
        "x-methodName" : "getAllTransactionRulesForBalancePlatform"
      }
    },
    "/cardorders" : {
      "get" : {
        "tags" : [ "Card orders" ],
        "summary" : "Get a list of card orders",
        "description" : "Returns a paginated list of card orders.",
        "operationId" : "get-cardorders",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "The unique identifier of the card order. ",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "cardManufacturingProfileId",
          "in" : "query",
          "description" : "The unique identifier of the card manufacturer profile.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of the card order.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "txVariantCode",
          "in" : "query",
          "description" : "The unique code of the card manufacturer profile.\n\nPossible values: **mcmaestro**, **mc**, **visa**, **mcdebit**. ",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "createdSince",
          "in" : "query",
          "description" : "Only include card orders that have been created on or after this point in time. The value must be in ISO 8601 format. For example, **2021-05-30T15:07:40Z**.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdUntil",
          "in" : "query",
          "description" : "Only include card orders that have been created on or before this point in time. The value must be in ISO 8601 format. For example, **2021-05-30T15:07:40Z**.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lockedSince",
          "in" : "query",
          "description" : "Only include card orders that have been locked on or after this point in time. The value must be in ISO 8601 format. For example, **2021-05-30T15:07:40Z**.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "lockedUntil",
          "in" : "query",
          "description" : "Only include card orders that have been locked on or before this point in time. The value must be in ISO 8601 format. For example, **2021-05-30T15:07:40Z**.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "serviceCenter",
          "in" : "query",
          "description" : "The service center at which the card is issued. The value is case-sensitive. ",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Specifies the position of an element in a list of card orders. The response includes a list of card orders that starts at the specified offset.\n\n**Default:** 0, which means that the response contains all the elements in the list of card orders.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of card orders returned per page. **Default:** 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaginatedGetCardOrderResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-cardorders-success-200"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "listCardOrders"
      }
    },
    "/cardorders/{id}/items" : {
      "get" : {
        "tags" : [ "Card orders" ],
        "summary" : "Get card order items",
        "description" : "Returns the item list of a specific card order.",
        "operationId" : "get-cardorders-id-items",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the card order.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Specifies the position of an element in a list of card orders. The response includes a list of card order items that starts at the specified offset.\n\n**Default:** 0, which means that the response contains all the elements in the list of card order items.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of card order items returned per page. **Default:** 10.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaginatedGetCardOrderItemResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-cardorders-id-items-success-200"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "getCardOrderItems"
      }
    },
    "/grantAccounts/{id}" : {
      "get" : {
        "tags" : [ "Grant accounts" ],
        "summary" : "Get a grant account",
        "description" : "Returns the details of the [grant account](https://docs.adyen.com/platforms/capital#grant-account).",
        "operationId" : "get-grantAccounts-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the grant account.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CapitalGrantAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-deprecatedInVersion" : "2",
        "x-deprecatedMessage" : "Use the `/grantAccounts/{id}` endpoint from the [Capital API](https://docs.adyen.com/api-explorer/capital/latest/get/grantAccounts/(id)) instead.",
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "getGrantAccount"
      }
    },
    "/grantOffers" : {
      "get" : {
        "tags" : [ "Grant offers" ],
        "summary" : "Get all available grant offers",
        "description" : "Returns a list of all [grant offers](https://docs.adyen.com/platforms/capital#grant-offers) available for `accountHolderId` specified as a query parameter.",
        "operationId" : "get-grantOffers",
        "parameters" : [ {
          "name" : "accountHolderId",
          "in" : "query",
          "description" : "The unique identifier of the grant account.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrantOffers"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-deprecatedInVersion" : "2",
        "x-deprecatedMessage" : "Use the `/grantOffers` endpoint from the [Capital API](https://docs.adyen.com/api-explorer/capital/latest/get/grantOffers) instead.",
        "x-addedInVersion" : "2",
        "x-sortIndex" : 1,
        "x-methodName" : "getAllAvailableGrantOffers"
      }
    },
    "/grantOffers/{grantOfferId}" : {
      "get" : {
        "tags" : [ "Grant offers" ],
        "summary" : "Get a grant offer",
        "description" : "Returns the details of a single grant offer.",
        "operationId" : "get-grantOffers-grantOfferId",
        "parameters" : [ {
          "name" : "grantOfferId",
          "in" : "path",
          "description" : "The unique identifier of the grant offer.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GrantOffer"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "deprecated" : true,
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-deprecatedInVersion" : "2",
        "x-deprecatedMessage" : "Use the `/grantOffers/{id}` endpoint from the [Capital API](https://docs.adyen.com/api-explorer/capital/latest/get/grantOffers/(id)) instead.",
        "x-addedInVersion" : "2",
        "x-sortIndex" : 1,
        "x-methodName" : "getGrantOffer"
      }
    },
    "/networkTokens/{networkTokenId}" : {
      "get" : {
        "tags" : [ "Network tokens" ],
        "summary" : "Get a network token",
        "description" : "Returns the details of a network token.",
        "operationId" : "get-networkTokens-networkTokenId",
        "parameters" : [ {
          "name" : "networkTokenId",
          "in" : "path",
          "description" : "The unique identifier of the network token.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetNetworkTokenResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "getNetworkToken"
      },
      "patch" : {
        "tags" : [ "Network tokens" ],
        "summary" : "Update a network token",
        "description" : "Updates the status of the network token.",
        "operationId" : "patch-networkTokens-networkTokenId",
        "parameters" : [ {
          "name" : "networkTokenId",
          "in" : "path",
          "description" : "The unique identifier of the network token.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateNetworkTokenRequest"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "No Content - look at the actual response code for the status of the request. "
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "updateNetworkToken"
      }
    },
    "/paymentInstrumentGroups" : {
      "post" : {
        "tags" : [ "Payment instrument groups" ],
        "summary" : "Create a payment instrument group",
        "description" : "Creates a payment instrument group to associate and group payment instrument resources together. You can apply a transaction rule to a payment instrument group.",
        "operationId" : "post-paymentInstrumentGroups",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentInstrumentGroupInfo"
              },
              "examples" : {
                "createPaymentInstrumentGroups" : {
                  "$ref" : "#/components/examples/post-paymentInstrumentGroups-createPaymentInstrumentGroups"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentInstrumentGroup"
                },
                "examples" : {
                  "createPaymentInstrumentGroups" : {
                    "$ref" : "#/components/examples/post-paymentInstrumentGroups-createPaymentInstrumentGroups-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "createPaymentInstrumentGroup"
      }
    },
    "/paymentInstrumentGroups/{id}" : {
      "get" : {
        "tags" : [ "Payment instrument groups" ],
        "summary" : "Get a payment instrument group",
        "description" : "Returns the details of a payment instrument group.",
        "operationId" : "get-paymentInstrumentGroups-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the payment instrument group.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentInstrumentGroup"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-paymentInstrumentGroups-id-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "getPaymentInstrumentGroup"
      }
    },
    "/paymentInstrumentGroups/{id}/transactionRules" : {
      "get" : {
        "tags" : [ "Payment instrument groups" ],
        "summary" : "Get all transaction rules for a payment instrument group",
        "description" : "Returns a list of all the transaction rules associated with a payment instrument group.",
        "operationId" : "get-paymentInstrumentGroups-id-transactionRules",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the payment instrument group.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionRulesResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-paymentInstrumentGroups-id-transactionRules-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 3,
        "x-methodName" : "getAllTransactionRulesForPaymentInstrumentGroup"
      }
    },
    "/paymentInstruments" : {
      "post" : {
        "tags" : [ "Payment instruments" ],
        "summary" : "Create a payment instrument",
        "description" : "Creates a payment instrument to issue a physical card, a virtual card, or a business account to your user.\n\n For more information, refer to [Issue cards](https://docs.adyen.com/issuing/create-cards) or [Issue business accounts](https://docs.adyen.com/platforms/business-accounts).",
        "operationId" : "post-paymentInstruments",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentInstrumentInfo"
              },
              "examples" : {
                "createBusinessAccountNL" : {
                  "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccountNL"
                },
                "createBusinessAccountNL-DELocalIBAN" : {
                  "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccountNL-DELocalIBAN"
                },
                "createBusinessAccountNL-FRLocalIBAN" : {
                  "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccountNL-FRLocalIBAN"
                },
                "createBusinessAccountUK" : {
                  "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccountUK"
                },
                "createBusinessAccountUS" : {
                  "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccountUS"
                },
                "createPhysicalCard" : {
                  "$ref" : "#/components/examples/post-paymentInstruments-createPhysicalCard"
                },
                "createVirtualCard" : {
                  "$ref" : "#/components/examples/post-paymentInstruments-createVirtualCard"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentInstrument"
                },
                "examples" : {
                  "createBusinessAccountNL" : {
                    "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccountNL-200"
                  },
                  "createBusinessAccountNL-DELocalIBAN" : {
                    "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccountNL-DELocalIBAN-200"
                  },
                  "createBusinessAccountNL-FRLocalIBAN" : {
                    "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccountNL-FRLocalIBAN-200"
                  },
                  "createBusinessAccountUK" : {
                    "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccountUK-200"
                  },
                  "createBusinessAccountUS" : {
                    "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccountUS-200"
                  },
                  "createPhysicalCard" : {
                    "$ref" : "#/components/examples/post-paymentInstruments-createPhysicalCard-200"
                  },
                  "createVirtualCard" : {
                    "$ref" : "#/components/examples/post-paymentInstruments-createVirtualCard-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "createPaymentInstrument"
      }
    },
    "/paymentInstruments/reveal" : {
      "post" : {
        "tags" : [ "Payment instruments" ],
        "summary" : "Reveal the data of a payment instrument",
        "description" : "Returns the encrypted data of a specified payment instrument. These data include:\n\n- The primary account number (PAN)\n- The card verification code (CVC)\n- The expiry date\n\nYou can decrypt the data to reveal it in your user interface.\n\nTo make this request, your API credential must have the following role:\n* Bank Issuing PAN Reveal Webservice role",
        "operationId" : "post-paymentInstruments-reveal",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentInstrumentRevealRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentInstrumentRevealResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 4,
        "x-methodName" : "revealDataOfPaymentInstrument"
      }
    },
    "/paymentInstruments/{id}" : {
      "get" : {
        "tags" : [ "Payment instruments" ],
        "summary" : "Get a payment instrument",
        "description" : "Returns the details of a payment instrument.",
        "operationId" : "get-paymentInstruments-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the payment instrument.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentInstrument"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-paymentInstruments-id-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 3,
        "x-methodName" : "getPaymentInstrument"
      },
      "patch" : {
        "tags" : [ "Payment instruments" ],
        "summary" : "Update a payment instrument",
        "description" : "Updates a payment instrument. Once a payment instrument is already active, you can only update its status. However, for cards created with **inactive** status, you can still update the balance account associated with the card.",
        "operationId" : "patch-paymentInstruments-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the payment instrument.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentInstrumentUpdateRequest"
              },
              "examples" : {
                "updatePaymentInstrumentBalanceAccount" : {
                  "$ref" : "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount"
                },
                "updatePaymentInstrumentStatus" : {
                  "$ref" : "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentStatus"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdatePaymentInstrument"
                },
                "examples" : {
                  "updatePaymentInstrumentBalanceAccount" : {
                    "$ref" : "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount-200"
                  },
                  "updatePaymentInstrumentStatus" : {
                    "$ref" : "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentStatus-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "updatePaymentInstrument"
      }
    },
    "/paymentInstruments/{id}/networkTokens" : {
      "get" : {
        "tags" : [ "Payment instruments" ],
        "summary" : "List network tokens",
        "description" : "List the network tokens connected to a payment instrument.",
        "operationId" : "get-paymentInstruments-id-networkTokens",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the payment instrument.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ListNetworkTokensResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 6,
        "x-methodName" : "listNetworkTokens"
      }
    },
    "/paymentInstruments/{id}/reveal" : {
      "get" : {
        "tags" : [ "Payment instruments" ],
        "summary" : "Get the PAN of a payment instrument",
        "description" : "Returns the primary account number (PAN) of a payment instrument.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/issuing/manage-access/api-credentials-web-service#api-permissions):\n\n* Balance Platform BCL PCI role",
        "operationId" : "get-paymentInstruments-id-reveal",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the payment instrument.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PaymentInstrumentRevealInfo"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-paymentInstruments-id-reveal-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 5,
        "x-methodName" : "getPanOfPaymentInstrument"
      }
    },
    "/paymentInstruments/{id}/transactionRules" : {
      "get" : {
        "tags" : [ "Payment instruments" ],
        "summary" : "Get all transaction rules for a payment instrument",
        "description" : "Returns a list of transaction rules associated with a payment instrument.",
        "operationId" : "get-paymentInstruments-id-transactionRules",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the payment instrument.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionRulesResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-paymentInstruments-id-transactionRules-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 7,
        "x-methodName" : "getAllTransactionRulesForPaymentInstrument"
      }
    },
    "/pins/change" : {
      "post" : {
        "tags" : [ "Manage card PIN" ],
        "summary" : "Change a card PIN",
        "description" : "Changes the personal identification number (PIN) of a specified card.\n\nTo make this request, your API credential must have the following role:\n* Bank Issuing PIN Change Webservice role",
        "operationId" : "post-pins-change",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PinChangeRequest"
              },
              "examples" : {
                "requestPinChange" : {
                  "$ref" : "#/components/examples/post-pins-change-requestPinChange"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PinChangeResponse"
                },
                "examples" : {
                  "requestPinChange" : {
                    "$ref" : "#/components/examples/post-pins-change-requestPinChange-200"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "changeCardPin"
      }
    },
    "/pins/reveal" : {
      "post" : {
        "tags" : [ "Manage card PIN" ],
        "summary" : "Reveal a card PIN",
        "description" : "Returns an encrypted PIN block that contains the PIN of a specified card. You can use the decrypted data to reveal the PIN in your user interface.\n\nTo make this request, your API credential must have the following role:\n* Bank Issuing PIN Reveal Webservice role",
        "operationId" : "post-pins-reveal",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevealPinRequest"
              },
              "examples" : {
                "requestPinBlock" : {
                  "$ref" : "#/components/examples/post-pins-reveal-requestPinBlock"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RevealPinResponse"
                },
                "examples" : {
                  "requestPinBlock" : {
                    "$ref" : "#/components/examples/post-pins-reveal-requestPinBlock-200"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "revealCardPin"
      }
    },
    "/publicKey" : {
      "get" : {
        "tags" : [ "Manage card PIN" ],
        "summary" : "Get an RSA public key",
        "description" : "Get an [RSA](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) public key to encrypt or decrypt card data.\n\n You need the RSA public key to generate the `encryptedKey` required to:\n- [Change a PIN](https://docs.adyen.com/api-explorer/balanceplatform/2/post/pins/change).\n- [Reveal a PIN](https://docs.adyen.com/api-explorer/balanceplatform/2/post/pins/reveal).\n- [Reveal a PAN](https://docs.adyen.com/api-explorer/balanceplatform/2/post/paymentInstruments/reveal).",
        "operationId" : "get-publicKey",
        "parameters" : [ {
          "name" : "purpose",
          "in" : "query",
          "description" : "The purpose of the public key.\n\nPossible values: **pinChange**, **pinReveal**, **panReveal**.\n\nDefault value: **pinReveal**.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "format",
          "in" : "query",
          "description" : "The encoding format of public key.\n\nPossible values: **jwk**, **pem**.\n\nDefault value: **pem**.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PublicKeyResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-publicKey-success-200"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 3,
        "x-methodName" : "publicKey"
      }
    },
    "/registeredDevices" : {
      "get" : {
        "tags" : [ "Manage SCA devices" ],
        "summary" : "Get a list of registered SCA devices",
        "description" : "Get a paginated list of the SCA devices you have currently registered for a specific payment instrument.",
        "operationId" : "get-registeredDevices",
        "parameters" : [ {
          "name" : "paymentInstrumentId",
          "in" : "query",
          "description" : "The unique identifier of a payment instrument. It limits the returned list to SCA devices associated to this payment instrument.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "pageNumber",
          "in" : "query",
          "description" : "The index of the page to retrieve. The index of the first page is 0 (zero).\n\nDefault: 0.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "The number of items to have on a page.\n\nDefault: 20. Maximum: 100.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SearchRegisteredDevicesResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 3,
        "x-methodName" : "listRegisteredScaDevices"
      },
      "post" : {
        "tags" : [ "Manage SCA devices" ],
        "summary" : "Initiate the registration of an SCA device",
        "description" : "Initiates the registration of a user's device for Strong Customer Authentication (SCA). You can register SCA devices for [business accounts](https://docs.adyen.com/platforms/business-accounts/sca/register-devices) or [Adyen-issued cards](https://docs.adyen.com/issuing/3d-secure/oob-auth-sdk/register-devices).\n\nFor a successful request, the device must be eligible for SCA.",
        "operationId" : "post-registeredDevices",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegisterSCARequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegisterSCAResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "initiateRegistrationOfScaDevice"
      }
    },
    "/registeredDevices/{deviceId}/associations" : {
      "post" : {
        "tags" : [ "Manage SCA devices" ],
        "summary" : "Initiate an association between an SCA device and a resource",
        "description" : "Initiates an association between a user's registered SCA device and an Adyen resource. For example, you can associate an SCA device with additional [business accounts](https://docs.adyen.com/platforms/business-accounts/sca/register-devices) or [Adyen-issued cards](https://docs.adyen.com/issuing/3d-secure/oob-auth-sdk/register-devices).",
        "operationId" : "post-registeredDevices-deviceId-associations",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "The unique identifier of the SCA device that you are associating with a resource.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssociationInitiateRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssociationInitiateResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "2",
        "x-sortIndex" : 4,
        "x-methodName" : "initiateAssociationBetweenScaDeviceAndResource"
      },
      "patch" : {
        "tags" : [ "Manage SCA devices" ],
        "summary" : "Complete an association between an SCA device and a resource",
        "description" : "Completes an association between a user's registered SCA device and an Adyen resource. For example, you can associate an SCA device with additional [business accounts](https://docs.adyen.com/platforms/business-accounts/sca/register-devices) or [Adyen-issued cards](https://docs.adyen.com/issuing/3d-secure/oob-auth-sdk/register-devices).\n\nTo complete the association, this endpoint validates the authentication data of the registered device.",
        "operationId" : "patch-registeredDevices-deviceId-associations",
        "parameters" : [ {
          "name" : "deviceId",
          "in" : "path",
          "description" : "The unique identifier of the SCA device that you are associating with a resource.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssociationFinaliseRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssociationFinaliseResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "2",
        "x-sortIndex" : 5,
        "x-methodName" : "completeAssociationBetweenScaDeviceAndResource"
      }
    },
    "/registeredDevices/{id}" : {
      "delete" : {
        "tags" : [ "Manage SCA devices" ],
        "summary" : "Delete a registration of an SCA device",
        "description" : "Deletes an SCA device from the list of registered devices of a specific payment instrument.",
        "operationId" : "delete-registeredDevices-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the SCA device.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "paymentInstrumentId",
          "in" : "query",
          "description" : "The unique identifier of the payment instrument linked to the SCA device.",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content - look at the actual response code for the status of the request. "
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 6,
        "x-methodName" : "deleteRegistrationOfScaDevice"
      },
      "patch" : {
        "tags" : [ "Manage SCA devices" ],
        "summary" : "Complete the registration of an SCA device",
        "description" : "Completes the registration of an SCA device by validating the authentication data of the device. You can register SCA devices for [business accounts](https://docs.adyen.com/platforms/business-accounts/sca) or [Adyen-issued cards](https://docs.adyen.com/issuing/3d-secure/oob-auth-sdk).\n\n",
        "operationId" : "patch-registeredDevices-id",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique identifier of the SCA device. You obtain this `id` in the response of a POST&nbsp;[/registeredDevices](https://docs.adyen.com/api-explorer/balanceplatform/2/post/registeredDevices#responses-200-id) request.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegisterSCARequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegisterSCAFinalResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "completeRegistrationOfScaDevice"
      }
    },
    "/transactionRules" : {
      "post" : {
        "tags" : [ "Transaction rules" ],
        "summary" : "Create a transaction rule",
        "description" : "Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules). When your user makes a transaction with their Adyen-issued card, the transaction is allowed or declined based on the conditions and outcome defined in the transaction rule. You can apply the transaction rule to several cards, such as all the cards in your platform, or to a specific card. For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples).",
        "operationId" : "post-transactionRules",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransactionRuleInfo"
              },
              "examples" : {
                "createTransactionRuleAllowPos" : {
                  "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleAllowPos"
                },
                "createTransactionRuleIncreaseScore" : {
                  "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleIncreaseScore"
                },
                "createTransactionRuleLimitSliding" : {
                  "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleLimitSliding"
                },
                "createTransactionRuleLimitTransaction" : {
                  "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleLimitTransaction"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionRule"
                },
                "examples" : {
                  "createTransactionRuleAllowPos" : {
                    "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleAllowPos-200"
                  },
                  "createTransactionRuleIncreaseScore" : {
                    "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleIncreaseScore-200"
                  },
                  "createTransactionRuleLimitSliding" : {
                    "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleLimitSliding-200"
                  },
                  "createTransactionRuleLimitTransaction" : {
                    "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleLimitTransaction-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "createTransactionRule"
      }
    },
    "/transactionRules/{transactionRuleId}" : {
      "get" : {
        "tags" : [ "Transaction rules" ],
        "summary" : "Get a transaction rule",
        "description" : "Returns the details of a transaction rule.",
        "operationId" : "get-transactionRules-transactionRuleId",
        "parameters" : [ {
          "name" : "transactionRuleId",
          "in" : "path",
          "description" : "The unique identifier of the transaction rule.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionRuleResponse"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/get-transactionRules-transactionRuleId-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 2,
        "x-methodName" : "getTransactionRule"
      },
      "delete" : {
        "tags" : [ "Transaction rules" ],
        "summary" : "Delete a transaction rule",
        "description" : "Deletes a transaction rule.",
        "operationId" : "delete-transactionRules-transactionRuleId",
        "parameters" : [ {
          "name" : "transactionRuleId",
          "in" : "path",
          "description" : "The unique identifier of the transaction rule.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionRule"
                },
                "examples" : {
                  "success" : {
                    "$ref" : "#/components/examples/delete-transactionRules-transactionRuleId-success-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 5,
        "x-methodName" : "deleteTransactionRule"
      },
      "patch" : {
        "tags" : [ "Transaction rules" ],
        "summary" : "Update a transaction rule",
        "description" : "Updates a transaction rule. \n\n* To update only the status of a transaction rule, send only the `status` parameter. All other parameters not provided in the request are left unchanged.\n\n* When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, that parameter is removed from the resource.",
        "operationId" : "patch-transactionRules-transactionRuleId",
        "parameters" : [ {
          "name" : "transactionRuleId",
          "in" : "path",
          "description" : "The unique identifier of the transaction rule.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransactionRuleInfo"
              },
              "examples" : {
                "updateTransactionRuleStatus" : {
                  "$ref" : "#/components/examples/patch-transactionRules-transactionRuleId-updateTransactionRuleStatus"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionRule"
                },
                "examples" : {
                  "updateTransactionRuleStatus" : {
                    "$ref" : "#/components/examples/patch-transactionRules-transactionRuleId-updateTransactionRuleStatus-200"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-400"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 3,
        "x-methodName" : "updateTransactionRule"
      }
    },
    "/transferRoutes/calculate" : {
      "post" : {
        "tags" : [ "Transfer routes" ],
        "summary" : "Calculate transfer routes",
        "description" : "Returns available transfer routes based on a combination of transfer `country`, `currency`, `counterparty`, and `priorities`. Use this endpoint to find optimal transfer priorities and associated requirements before you [make a transfer](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers).",
        "operationId" : "post-transferRoutes-calculate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TransferRouteRequest"
              },
              "examples" : {
                "transferRoutesCalculate" : {
                  "$ref" : "#/components/examples/post-transferRoutes-calculate-transferRoutesCalculate"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransferRouteResponse"
                },
                "examples" : {
                  "transferRoutesCalculate" : {
                    "$ref" : "#/components/examples/post-transferRoutes-calculate-transferRoutesCalculate-200"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "calculateTransferRoutes"
      }
    },
    "/validateBankAccountIdentification" : {
      "post" : {
        "tags" : [ "Bank account validation" ],
        "summary" : "Validate a bank account",
        "description" : "Validates bank account identification details. You can use this endpoint to validate bank account details before you [make a transfer](https://docs.adyen.com/api-explorer/transfers/latest/post/transfers) or [create a transfer instrument](https://docs.adyen.com/api-explorer/legalentity/latest/post/transferInstruments).",
        "operationId" : "post-validateBankAccountIdentification",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BankAccountIdentificationValidationRequest"
              },
              "examples" : {
                "validateBankAccountIdentificationIban" : {
                  "$ref" : "#/components/examples/post-validateBankAccountIdentification-validateBankAccountIdentificationIban"
                },
                "validateBankAccountIdentificationUs" : {
                  "$ref" : "#/components/examples/post-validateBankAccountIdentification-validateBankAccountIdentificationUs"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "No Content - look at the actual response code for the status of the request. "
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-401"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-403"
                  }
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-422"
                  },
                  "validateBankAccountIdentificationIban" : {
                    "$ref" : "#/components/examples/post-validateBankAccountIdentification-validateBankAccountIdentificationIban-422"
                  },
                  "validateBankAccountIdentificationUs" : {
                    "$ref" : "#/components/examples/post-validateBankAccountIdentification-validateBankAccountIdentificationUs-422"
                  }
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestServiceError"
                },
                "examples" : {
                  "generic" : {
                    "$ref" : "#/components/examples/generic-500"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "clientKey" : [ ]
        }, {
          "BasicAuth" : [ ]
        }, {
          "ApiKeyAuth" : [ ]
        } ],
        "x-addedInVersion" : "1",
        "x-sortIndex" : 1,
        "x-methodName" : "validateBankAccountIdentification"
      }
    },
    "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings" : {
      "get" : {
        "tags" : [ "Balances" ],
        "summary" : "Get all balance webhook settings",
        "description" : "Returns all balance webhook settings configured for triggering [balance webhooks](https://docs.adyen.com/api-explorer/balance-webhooks/latest/post/balanceAccount.balance.updated).",
        "operationId" : "get-balancePlatforms-balancePlatformId-webhooks-webhookId-settings",
        "parameters" : [ {
          "name" : "balancePlatformId",
          "in" : "path",
          "description" : "The unique identifier of the balance platform.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "The unique identifier of the balance webhook.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebhookSettings"
                },
                "examples" : {
                  "get-webhook-settings-200" : {
                    "summary" : "Get all webhook settings",
                    "description" : "Retrieve all settings of a webhook",
                    "value" : {
                      "webhookSettings" : [ {
                        "id" : "BWHS00000000000000000000000001",
                        "type" : "balance",
                        "target" : {
                          "type" : "balancePlatform",
                          "id" : "YOUR_BALANCE_PLATFORM"
                        },
                        "currency" : "USD",
                        "status" : "active",
                        "conditions" : [ {
                          "balanceType" : "available",
                          "conditionType" : "lessThan",
                          "value" : 500000
                        } ]
                      }, {
                        "id" : "BWHS00000000000000000000000002",
                        "type" : "balance",
                        "target" : {
                          "type" : "balanceAccount",
                          "id" : "BA00000000000000000LIABLE"
                        },
                        "currency" : "USD",
                        "status" : "active",
                        "conditions" : [ {
                          "balanceType" : "available",
                          "conditionType" : "greaterThan",
                          "value" : 1000000
                        } ]
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - the payment was not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          }
        },
        "x-methodName" : "getAllWebhookSettings",
        "x-sortIndex" : 4
      },
      "post" : {
        "tags" : [ "Balances" ],
        "summary" : "Create a balance webhook setting",
        "description" : "Configures the criteria for triggering [balance webhooks](https://docs.adyen.com/api-explorer/balance-webhooks/1/post/balancePlatform.balanceAccount.balance.updated).\n\nAdyen sends balance webhooks to notify you of balance changes in your balance platform. They can be triggered when the balance reaches, exceeds, or drops below a specific value in a specific currency.\n\nYou can get notified about balance changes in your entire balance platform, in the balance accounts of a specific user, or a specific balance account. The hierarchy between the webhook settings are based on the following business logic:\n\n* Settings on a higher level apply to all lower level resources (balance platform > account holder > balance acocunt).\n\n* The most granular setting overrides higher level settings (balance account > account holder > balance platform).",
        "operationId" : "post-balancePlatforms-balancePlatformId-webhooks-webhookId-settings",
        "parameters" : [ {
          "name" : "balancePlatformId",
          "in" : "path",
          "description" : "The unique identifier of the balance platform.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "The unique identifier of the balance webhook.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BalanceWebhookSettingInfo"
              },
              "examples" : {
                "create-webhook-setting" : {
                  "summary" : "Create a webhook setting",
                  "description" : "Create a webhook setting",
                  "value" : {
                    "type" : "balance",
                    "target" : {
                      "type" : "balanceAccount",
                      "id" : "BA00000000000000000LIABLE"
                    },
                    "currency" : "USD",
                    "status" : "active",
                    "conditions" : [ {
                      "balanceType" : "available",
                      "conditionType" : "lessThan",
                      "value" : 500000
                    } ]
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebhookSetting"
                },
                "examples" : {
                  "create-webhook-setting" : {
                    "summary" : "Successfully created a webhook setting",
                    "description" : "Successfully created a webhook setting",
                    "value" : {
                      "id" : "BWHS00000000000000000000000001",
                      "type" : "balance",
                      "target" : {
                        "type" : "balanceAccount",
                        "id" : "BA00000000000000000LIABLE"
                      },
                      "currency" : "USD",
                      "status" : "active",
                      "conditions" : [ {
                        "balanceType" : "available",
                        "conditionType" : "lessThan",
                        "value" : 500000
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - the payment was not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          }
        },
        "x-methodName" : "createWebhookSetting",
        "x-sortIndex" : 1
      }
    },
    "/balancePlatforms/{balancePlatformId}/webhooks/{webhookId}/settings/{settingId}" : {
      "get" : {
        "tags" : [ "Balances" ],
        "summary" : "Get a balance webhook setting by id",
        "description" : "Returns the details of a specific balance webhook setting configured for triggering [balance webhooks](https://docs.adyen.com/api-explorer/balance-webhooks/latest/post/balanceAccount.balance.updated).",
        "operationId" : "get-balancePlatforms-balancePlatformId-webhooks-webhookId-settings-settingId",
        "parameters" : [ {
          "name" : "balancePlatformId",
          "in" : "path",
          "description" : "The unique identifier of the balance platform.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "The unique identifier of the balance webhook.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "settingId",
          "in" : "path",
          "description" : "The unique identifier of the balance webhook setting.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebhookSetting"
                },
                "examples" : {
                  "get-webhook-setting-by-id-200" : {
                    "summary" : "Get a webhook setting",
                    "description" : "Retrieve the details of a webhook setting",
                    "value" : {
                      "id" : "BWHS00000000000000000000000001",
                      "type" : "balance",
                      "target" : {
                        "type" : "balancePlatform",
                        "id" : "YOUR_BALANCE_PLATFORM"
                      },
                      "currency" : "USD",
                      "status" : "active",
                      "conditions" : [ {
                        "balanceType" : "available",
                        "conditionType" : "lessThan",
                        "value" : 500000
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - the payment was not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          }
        },
        "x-methodName" : "getWebhookSetting",
        "x-sortIndex" : 3
      },
      "delete" : {
        "tags" : [ "Balances" ],
        "summary" : "Delete a balance webhook setting by id",
        "description" : "Deletes a balance webhook setting that contains the conditions for triggering [balance webhooks](https://docs.adyen.com/api-explorer/balance-webhooks/latest/post/balanceAccount.balance.updated).",
        "operationId" : "delete-balancePlatforms-balancePlatformId-webhooks-webhookId-settings-settingId",
        "parameters" : [ {
          "name" : "balancePlatformId",
          "in" : "path",
          "description" : "The unique identifier of the balance platform.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "The unique identifier of the balance webhook.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "settingId",
          "in" : "path",
          "description" : "The unique identifier of the balance webhook setting.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content - the request has been successfully processed, but there is no additional content.",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - the payment was not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          }
        },
        "x-methodName" : "deleteWebhookSetting",
        "x-sortIndex" : 5
      },
      "patch" : {
        "tags" : [ "Balances" ],
        "summary" : "Update a balance webhook setting by id",
        "description" : "Updates the conditions the balance change needs to meet for Adyen to send a [balance webhook](https://docs.adyen.com/api-explorer/balance-webhooks/latest/post/balanceAccount.balance.updated).",
        "operationId" : "patch-balancePlatforms-balancePlatformId-webhooks-webhookId-settings-settingId",
        "parameters" : [ {
          "name" : "balancePlatformId",
          "in" : "path",
          "description" : "The unique identifier of the balance platform.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "webhookId",
          "in" : "path",
          "description" : "The unique identifier of the balance webhook.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "settingId",
          "in" : "path",
          "description" : "The unique identifier of the balance webhook setting.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BalanceWebhookSettingInfoUpdate"
              },
              "examples" : {
                "update-webhook-setting" : {
                  "summary" : "Update a webhook setting",
                  "description" : "Update a webhook setting",
                  "value" : {
                    "type" : "balance",
                    "target" : {
                      "type" : "balanceAccount",
                      "id" : "BA00000000000000000LIABLE"
                    },
                    "currency" : "USD",
                    "status" : "active",
                    "conditions" : [ {
                      "balanceType" : "available",
                      "conditionType" : "lessThan",
                      "value" : 500000
                    }, {
                      "balanceType" : "balance",
                      "conditionType" : "greaterThan",
                      "value" : 1000000
                    } ]
                  }
                },
                "deactivate-webhook-setting" : {
                  "summary" : "Deactivate a webhook setting",
                  "description" : "Deactivate a webhook setting",
                  "value" : {
                    "type" : "balance",
                    "status" : "inactive"
                  }
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK - the request has succeeded.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebhookSetting"
                },
                "examples" : {
                  "update-webhook-setting" : {
                    "summary" : "Successfully updated a webhook setting",
                    "description" : "Successfully updated a webhook setting",
                    "value" : {
                      "type" : "balance",
                      "id" : "BWHS00000000000000000000000001",
                      "target" : {
                        "type" : "balanceAccount",
                        "id" : "BA00000000000000000LIABLE"
                      },
                      "currency" : "USD",
                      "status" : "active",
                      "conditions" : [ {
                        "balanceType" : "available",
                        "conditionType" : "lessThan",
                        "value" : 500000
                      }, {
                        "balanceType" : "balance",
                        "conditionType" : "greaterThan",
                        "value" : 1000000
                      } ]
                    }
                  },
                  "deactivate-webhook-setting" : {
                    "summary" : "Successfully deactivated a webhook setting",
                    "description" : "Successfully deactivated a webhook setting",
                    "value" : {
                      "type" : "balance",
                      "id" : "BWHS00000000000000000000000001",
                      "target" : {
                        "type" : "balanceAccount",
                        "id" : "BA00000000000000000LIABLE"
                      },
                      "currency" : "USD",
                      "status" : "inactive",
                      "conditions" : [ {
                        "balanceType" : "available",
                        "conditionType" : "lessThan",
                        "value" : 500000
                      }, {
                        "balanceType" : "balance",
                        "conditionType" : "greaterThan",
                        "value" : 1000000
                      } ]
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request - a problem reading or understanding the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - authentication required.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden - insufficient permissions to process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - the payment was not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "422" : {
            "description" : "Unprocessable Entity - a request validation error.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error - the server could not process the request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultErrorResponseEntity"
                }
              }
            }
          }
        },
        "x-methodName" : "updateWebhookSetting",
        "x-sortIndex" : 2
      }
    }
  },
  "components" : {
    "schemas" : {
      "AULocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The bank account number, without separators or whitespace.",
            "maxLength" : 9,
            "minLength" : 5
          },
          "bsbCode" : {
            "type" : "string",
            "description" : "The 6-digit [Bank State Branch (BSB) code](https://en.wikipedia.org/wiki/Bank_state_branch), without separators or whitespace.",
            "maxLength" : 6,
            "minLength" : 6
          },
          "type" : {
            "type" : "string",
            "default" : "auLocal",
            "description" : "**auLocal**",
            "enum" : [ "auLocal" ]
          }
        },
        "required" : [ "accountNumber", "bsbCode", "type" ]
      },
      "AccountHolder" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balancePlatform" : {
            "type" : "string",
            "description" : "The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms."
          },
          "capabilities" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/AccountHolderCapability"
            },
            "description" : "Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability."
          },
          "contactDetails" : {
            "$ref" : "#/components/schemas/ContactDetails",
            "deprecated" : true,
            "description" : "Contact details of the account holder."
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the account holder.",
            "maxLength" : 300
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the account holder.",
            "readOnly" : true
          },
          "legalEntityId" : {
            "type" : "string",
            "description" : "The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder."
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A set of key and value pairs for general use.\nThe keys do not have specific names and may be used for storing miscellaneous data as desired.\n> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs."
          },
          "migratedAccountHolderCode" : {
            "type" : "string",
            "description" : "The unique identifier of the migrated account holder in the classic integration.",
            "readOnly" : true
          },
          "primaryBalanceAccount" : {
            "type" : "string",
            "description" : "The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the account holder.",
            "maxLength" : 150
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the account holder.\n\nPossible values: \n\n * **active**: The account holder is active and allowed to use its capabilities. This is the initial status for account holders and balance accounts. You can change this status to **suspended** or **closed**. \n\n * **suspended**: The account holder is temporarily disabled and payouts are blocked. You can change this status to **active** or **closed**. \n\n* **closed**: The account holder and all of its capabilities are permanently disabled. This is a final status and cannot be changed.",
            "enum" : [ "active", "closed", "suspended" ]
          },
          "timeZone" : {
            "type" : "string",
            "description" : "The time zone of the account holder. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
          },
          "verificationDeadlines" : {
            "type" : "array",
            "description" : "List of verification deadlines and the capabilities that will be disallowed if verification errors are not resolved.",
            "items" : {
              "$ref" : "#/components/schemas/VerificationDeadline"
            },
            "readOnly" : true
          }
        },
        "required" : [ "id", "legalEntityId" ]
      },
      "AccountHolderCapability" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "allowed" : {
            "type" : "boolean",
            "description" : "Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.",
            "readOnly" : true
          },
          "allowedLevel" : {
            "type" : "string",
            "description" : "The capability level that is allowed for the account holder.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.",
            "enum" : [ "high", "low", "medium", "notApplicable" ],
            "readOnly" : true
          },
          "allowedSettings" : {
            "$ref" : "#/components/schemas/CapabilitySettings",
            "description" : "A JSON object containing the settings that are allowed for the account holder.",
            "readOnly" : true
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder."
          },
          "problems" : {
            "type" : "array",
            "description" : "Contains verification errors and the actions that you can take to resolve them.",
            "items" : {
              "$ref" : "#/components/schemas/CapabilityProblem"
            },
            "readOnly" : true
          },
          "requested" : {
            "type" : "boolean",
            "description" : "Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field."
          },
          "requestedLevel" : {
            "type" : "string",
            "description" : "The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.",
            "enum" : [ "high", "low", "medium", "notApplicable" ]
          },
          "requestedSettings" : {
            "$ref" : "#/components/schemas/CapabilitySettings",
            "description" : "A JSON object containing the settings that were requested for the account holder.",
            "readOnly" : true
          },
          "transferInstruments" : {
            "type" : "array",
            "description" : "Contains the status of the transfer instruments associated with this capability. ",
            "items" : {
              "$ref" : "#/components/schemas/AccountSupportingEntityCapability"
            },
            "readOnly" : true
          },
          "verificationStatus" : {
            "type" : "string",
            "description" : "The status of the verification checks for the capability.\n\nPossible values:\n\n* **pending**: Adyen is running the verification.\n\n* **invalid**: The verification failed. Check if the `errors` array contains more information.\n\n* **valid**: The verification has been successfully completed.\n\n* **rejected**: Adyen has verified the information, but found reasons to not allow the capability.\n",
            "enum" : [ "invalid", "pending", "rejected", "valid" ],
            "readOnly" : true
          }
        }
      },
      "AccountHolderInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balancePlatform" : {
            "type" : "string",
            "description" : "The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms."
          },
          "capabilities" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/AccountHolderCapability"
            },
            "description" : "Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability."
          },
          "contactDetails" : {
            "$ref" : "#/components/schemas/ContactDetails",
            "deprecated" : true,
            "description" : "Contact details of the account holder."
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the account holder.",
            "maxLength" : 300
          },
          "legalEntityId" : {
            "type" : "string",
            "description" : "The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder."
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A set of key and value pairs for general use.\nThe keys do not have specific names and may be used for storing miscellaneous data as desired.\n> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs."
          },
          "migratedAccountHolderCode" : {
            "type" : "string",
            "description" : "The unique identifier of the migrated account holder in the classic integration.",
            "readOnly" : true
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the account holder.",
            "maxLength" : 150
          },
          "timeZone" : {
            "type" : "string",
            "description" : "The time zone of the account holder. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
          }
        },
        "required" : [ "legalEntityId" ]
      },
      "AccountHolderUpdateRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balancePlatform" : {
            "type" : "string",
            "description" : "The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms."
          },
          "capabilities" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/AccountHolderCapability"
            },
            "description" : "Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability."
          },
          "contactDetails" : {
            "$ref" : "#/components/schemas/ContactDetails",
            "deprecated" : true,
            "description" : "Contact details of the account holder."
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the account holder.",
            "maxLength" : 300
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A set of key and value pairs for general use.\nThe keys do not have specific names and may be used for storing miscellaneous data as desired.\n> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs."
          },
          "migratedAccountHolderCode" : {
            "type" : "string",
            "description" : "The unique identifier of the migrated account holder in the classic integration.",
            "readOnly" : true
          },
          "primaryBalanceAccount" : {
            "type" : "string",
            "description" : "The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the account holder.",
            "maxLength" : 150
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the account holder.\n\nPossible values: \n\n * **active**: The account holder is active and allowed to use its capabilities. This is the initial status for account holders and balance accounts. You can change this status to **suspended** or **closed**. \n\n * **suspended**: The account holder is temporarily disabled and payouts are blocked. You can change this status to **active** or **closed**. \n\n* **closed**: The account holder and all of its capabilities are permanently disabled. This is a final status and cannot be changed.",
            "enum" : [ "active", "closed", "suspended" ]
          },
          "timeZone" : {
            "type" : "string",
            "description" : "The time zone of the account holder. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
          },
          "verificationDeadlines" : {
            "type" : "array",
            "description" : "List of verification deadlines and the capabilities that will be disallowed if verification errors are not resolved.",
            "items" : {
              "$ref" : "#/components/schemas/VerificationDeadline"
            },
            "readOnly" : true
          }
        }
      },
      "AccountSupportingEntityCapability" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "allowed" : {
            "type" : "boolean",
            "description" : "Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.",
            "readOnly" : true
          },
          "allowedLevel" : {
            "type" : "string",
            "description" : "The capability level that is allowed for the account holder.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.",
            "enum" : [ "high", "low", "medium", "notApplicable" ],
            "readOnly" : true
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder."
          },
          "id" : {
            "type" : "string",
            "description" : "The ID of the supporting entity.",
            "readOnly" : true
          },
          "requested" : {
            "type" : "boolean",
            "description" : "Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field."
          },
          "requestedLevel" : {
            "type" : "string",
            "description" : "The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.",
            "enum" : [ "high", "low", "medium", "notApplicable" ]
          },
          "verificationStatus" : {
            "type" : "string",
            "description" : "The status of the verification checks for the supporting entity capability.\n\nPossible values:\n\n* **pending**: Adyen is running the verification.\n\n* **invalid**: The verification failed. Check if the `errors` array contains more information.\n\n* **valid**: The verification has been successfully completed.\n\n* **rejected**: Adyen has verified the information, but found reasons to not allow the capability.\n",
            "enum" : [ "invalid", "pending", "rejected", "valid" ],
            "readOnly" : true
          }
        }
      },
      "ActiveNetworkTokensRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of tokens."
          }
        },
        "required" : [ "operation" ]
      },
      "AdditionalBankIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The value of the additional bank identification."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of additional bank identification, depending on the country.\n\nPossible values:\n\n * **gbSortCode**: The 6-digit [UK sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or spaces\n * **usRoutingNumber**: The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or spaces.",
            "enum" : [ "gbSortCode", "usRoutingNumber" ]
          }
        }
      },
      "Address" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "city" : {
            "type" : "string",
            "description" : "The name of the city. Maximum length: 3000 characters.",
            "maxLength" : 3000
          },
          "country" : {
            "type" : "string",
            "description" : "The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n> If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`."
          },
          "houseNumberOrName" : {
            "type" : "string",
            "description" : "The number or name of the house. Maximum length: 3000 characters.",
            "maxLength" : 3000
          },
          "postalCode" : {
            "type" : "string",
            "description" : "A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries."
          },
          "stateOrProvince" : {
            "type" : "string",
            "description" : "The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada."
          },
          "street" : {
            "type" : "string",
            "description" : "The name of the street. Maximum length: 3000 characters.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.",
            "maxLength" : 3000
          }
        },
        "required" : [ "city", "country", "houseNumberOrName", "postalCode", "street" ]
      },
      "AddressRequirement" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Specifies the required address related fields for a particular route."
          },
          "requiredAddressFields" : {
            "type" : "array",
            "description" : "List of address fields.",
            "items" : {
              "type" : "string",
              "enum" : [ "city", "country", "line1", "postalCode", "stateOrProvince" ]
            }
          },
          "type" : {
            "type" : "string",
            "default" : "addressRequirement",
            "description" : "**addressRequirement**",
            "enum" : [ "addressRequirement" ]
          }
        },
        "required" : [ "type" ]
      },
      "Amount" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes#currency-codes).",
            "maxLength" : 3,
            "minLength" : 3
          },
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes#minor-units)."
          }
        },
        "required" : [ "currency", "value" ]
      },
      "AmountMinMaxRequirement" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Specifies the eligible amounts for a particular route."
          },
          "max" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Maximum amount."
          },
          "min" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Minimum amount."
          },
          "type" : {
            "type" : "string",
            "default" : "amountMinMaxRequirement",
            "description" : "**amountMinMaxRequirement**",
            "enum" : [ "amountMinMaxRequirement" ]
          }
        },
        "required" : [ "type" ]
      },
      "AmountNonZeroDecimalsRequirement" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Specifies for which routes the amount in a transfer request must have no non-zero decimal places, so the transfer can only be processed if the amount consists of round numbers."
          },
          "type" : {
            "type" : "string",
            "default" : "amountNonZeroDecimalsRequirement",
            "description" : "**amountNonZeroDecimalsRequirement**",
            "enum" : [ "amountNonZeroDecimalsRequirement" ]
          }
        },
        "required" : [ "type" ]
      },
      "AssociationDelegatedAuthenticationData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "sdkOutput" : {
            "type" : "string",
            "description" : "A base64-encoded block with the data required to authenticate the request. You obtain this information by using our authentication SDK.",
            "maxLength" : 20000
          }
        },
        "required" : [ "sdkOutput" ]
      },
      "AssociationFinaliseRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "ids" : {
            "type" : "array",
            "description" : "The list of unique identifiers of the resources that you are associating with the SCA device.\n\nMaximum: 5 strings.",
            "items" : {
              "type" : "string"
            },
            "maxLength" : 5
          },
          "strongCustomerAuthentication" : {
            "$ref" : "#/components/schemas/AssociationDelegatedAuthenticationData",
            "description" : "Contains authentication information required to associate the resource with the SCA device."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of resource that you are associating with the SCA device.\n\nPossible value: **PaymentInstrument**",
            "enum" : [ "PaymentInstrument" ]
          }
        },
        "required" : [ "ids", "strongCustomerAuthentication", "type" ]
      },
      "AssociationFinaliseResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "deviceId" : {
            "type" : "string",
            "description" : "The unique identifier of the SCA device you associated with a resource."
          },
          "ids" : {
            "type" : "array",
            "description" : "The list of unique identifiers of the resources that you associated with the SCA device.",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The type of resource that you associated with the SCA device.",
            "enum" : [ "PAYMENT_INSTRUMENT" ]
          }
        },
        "required" : [ "type" ]
      },
      "AssociationInitiateRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "ids" : {
            "type" : "array",
            "description" : "The list of unique identifiers of the resources that you are associating with the SCA device.\n\nMaximum: 5 strings.",
            "items" : {
              "type" : "string"
            },
            "maxLength" : 5
          },
          "type" : {
            "type" : "string",
            "description" : "The type of resource that you are associating with the SCA device.\n\nPossible value: **PaymentInstrument**",
            "enum" : [ "PaymentInstrument" ]
          }
        },
        "required" : [ "ids", "type" ]
      },
      "AssociationInitiateResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "sdkInput" : {
            "type" : "string",
            "description" : "A string that you must pass to the authentication SDK to continue with the association process.",
            "maxLength" : 20000
          }
        }
      },
      "Authentication" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "The email address where the one-time password (OTP) is sent."
          },
          "password" : {
            "type" : "string",
            "description" : "The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.\n\n* Characters between **a-z**, **A-Z**, and **0-9**\n\n* Special characters: **äöüßÄÖÜ+-*/ç%()=?!~#'\",;:$&àùòâôûáúó**",
            "maxLength" : 30,
            "minLength" : 1
          },
          "phone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The phone number where the one-time password (OTP) is sent.\n\nThis object must have:\n\n* A `type` set to **mobile**.\n\n* A `number` with a valid country code.\n\n* A `number` with more than 4 digits, excluding the country code.\n\n>Make sure to verify that the card user owns the phone number."
          }
        }
      },
      "BRLocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The bank account number, without separators or whitespace.",
            "maxLength" : 10,
            "minLength" : 1
          },
          "bankCode" : {
            "type" : "string",
            "description" : "The 3-digit bank code, with leading zeros.",
            "maxLength" : 3,
            "minLength" : 3
          },
          "branchNumber" : {
            "type" : "string",
            "description" : "The bank account branch number, without separators or whitespace.",
            "maxLength" : 4,
            "minLength" : 1
          },
          "ispb" : {
            "type" : "string",
            "description" : "The 8-digit ISPB, with leading zeros.",
            "maxLength" : 8,
            "minLength" : 8
          },
          "type" : {
            "type" : "string",
            "default" : "brLocal",
            "description" : "**brLocal**",
            "enum" : [ "brLocal" ]
          }
        },
        "required" : [ "accountNumber", "bankCode", "branchNumber", "type" ]
      },
      "Balance" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "available" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The balance available for use."
          },
          "balance" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The sum of the transactions that have already been settled."
          },
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance."
          },
          "pending" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The sum of the transactions that will be settled in the future."
          },
          "reserved" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The balance currently held in reserve."
          }
        },
        "required" : [ "available", "balance", "currency", "reserved" ]
      },
      "BalanceAccount" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountHolderId" : {
            "type" : "string",
            "description" : "The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account."
          },
          "balances" : {
            "type" : "array",
            "description" : "List of balances with the amount and currency.",
            "items" : {
              "$ref" : "#/components/schemas/Balance"
            }
          },
          "defaultCurrencyCode" : {
            "type" : "string",
            "description" : "The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account. This is the currency displayed on the Balance Account overview page in your Customer Area.\nThe default value is **EUR**.\n> After a balance account is created, you cannot change its default currency."
          },
          "description" : {
            "type" : "string",
            "description" : "A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.",
            "maxLength" : 300
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the balance account."
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A set of key and value pairs for general use.\nThe keys do not have specific names and may be used for storing miscellaneous data as desired.\n> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs."
          },
          "migratedAccountCode" : {
            "type" : "string",
            "description" : "The unique identifier of the account of the migrated account holder in the classic integration.",
            "readOnly" : true
          },
          "platformPaymentConfiguration" : {
            "$ref" : "#/components/schemas/PlatformPaymentConfiguration",
            "description" : "Contains key-value pairs to the configure the settlement model in a balance account."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the balance account, maximum 150 characters.",
            "maxLength" : 150
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the balance account, set to **active** by default. \n",
            "enum" : [ "active", "closed", "inactive", "suspended" ]
          },
          "timeZone" : {
            "type" : "string",
            "description" : "The time zone of the balance account. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
          }
        },
        "required" : [ "accountHolderId", "id" ]
      },
      "BalanceAccountBase" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountHolderId" : {
            "type" : "string",
            "description" : "The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account."
          },
          "defaultCurrencyCode" : {
            "type" : "string",
            "description" : "The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account. This is the currency displayed on the Balance Account overview page in your Customer Area.\nThe default value is **EUR**.\n> After a balance account is created, you cannot change its default currency."
          },
          "description" : {
            "type" : "string",
            "description" : "A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.",
            "maxLength" : 300
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the balance account."
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A set of key and value pairs for general use.\nThe keys do not have specific names and may be used for storing miscellaneous data as desired.\n> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs."
          },
          "migratedAccountCode" : {
            "type" : "string",
            "description" : "The unique identifier of the account of the migrated account holder in the classic integration.",
            "readOnly" : true
          },
          "platformPaymentConfiguration" : {
            "$ref" : "#/components/schemas/PlatformPaymentConfiguration",
            "description" : "Contains key-value pairs to the configure the settlement model in a balance account."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the balance account, maximum 150 characters.",
            "maxLength" : 150
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the balance account, set to **active** by default. \n",
            "enum" : [ "active", "closed", "inactive", "suspended" ]
          },
          "timeZone" : {
            "type" : "string",
            "description" : "The time zone of the balance account. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
          }
        },
        "required" : [ "accountHolderId", "id" ]
      },
      "BalanceAccountInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountHolderId" : {
            "type" : "string",
            "description" : "The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account."
          },
          "defaultCurrencyCode" : {
            "type" : "string",
            "description" : "The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account. This is the currency displayed on the Balance Account overview page in your Customer Area.\nThe default value is **EUR**.\n> After a balance account is created, you cannot change its default currency."
          },
          "description" : {
            "type" : "string",
            "description" : "A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.",
            "maxLength" : 300
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A set of key and value pairs for general use.\nThe keys do not have specific names and may be used for storing miscellaneous data as desired.\n> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs."
          },
          "migratedAccountCode" : {
            "type" : "string",
            "description" : "The unique identifier of the account of the migrated account holder in the classic integration.",
            "readOnly" : true
          },
          "platformPaymentConfiguration" : {
            "$ref" : "#/components/schemas/PlatformPaymentConfiguration",
            "description" : "Contains key-value pairs to the configure the settlement model in a balance account."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the balance account, maximum 150 characters.",
            "maxLength" : 150
          },
          "timeZone" : {
            "type" : "string",
            "description" : "The time zone of the balance account. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
          }
        },
        "required" : [ "accountHolderId" ]
      },
      "BalanceAccountUpdateRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountHolderId" : {
            "type" : "string",
            "description" : "The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account."
          },
          "description" : {
            "type" : "string",
            "description" : "A human-readable description of the balance account. You can use this parameter to distinguish between multiple balance accounts under an account holder.",
            "maxLength" : 300
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A set of key and value pairs for general use.\nThe keys do not have specific names and may be used for storing miscellaneous data as desired.\n> Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs."
          },
          "platformPaymentConfiguration" : {
            "$ref" : "#/components/schemas/PlatformPaymentConfiguration",
            "description" : "Contains key-value pairs to the configure the settlement model in a balance account."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference to the balance account.",
            "maxLength" : 150
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the balance account. Payment instruments linked to the balance account can only be used if the balance account status is **active**.\n\nPossible values: **active**, **closed**, **suspended**.",
            "enum" : [ "active", "closed", "inactive", "suspended" ]
          },
          "timeZone" : {
            "type" : "string",
            "description" : "The time zone of the balance account. For example, **Europe/Amsterdam**.\nDefaults to the time zone of the account holder if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)."
          }
        }
      },
      "BalancePlatform" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Your description of the balance platform.",
            "maxLength" : 300
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the balance platform."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the balance platform.\n\nPossible values: **Active**, **Inactive**, **Closed**, **Suspended**."
          }
        },
        "required" : [ "id" ]
      },
      "BalanceSweepConfigurationsResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "hasNext" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the next page."
          },
          "hasPrevious" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the previous page."
          },
          "sweeps" : {
            "type" : "array",
            "description" : "List of sweeps associated with the balance account.",
            "items" : {
              "$ref" : "#/components/schemas/SweepConfigurationV2"
            }
          }
        },
        "required" : [ "hasNext", "hasPrevious", "sweeps" ]
      },
      "BankAccount" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountIdentification" : {
            "description" : "Contains the bank account details. The fields required in this object depend on the country of the bank account and the currency of the transfer.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/AULocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/BRLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/CALocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/CZLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/DKLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/HKLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/HULocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/IbanAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/NOLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/NZLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/NumberAndBicAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/PLLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/SELocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/SGLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/UKLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/USLocalAccountIdentification"
            } ]
          }
        },
        "required" : [ "accountIdentification" ]
      },
      "BankAccountDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The bank account number, without separators or whitespace."
          },
          "accountType" : {
            "type" : "string",
            "default" : "checking",
            "description" : "The bank account type.\n\nPossible values: **checking** or **savings**. Defaults to **checking**."
          },
          "branchNumber" : {
            "type" : "string",
            "description" : "The bank account branch number, without separators or whitespace"
          },
          "formFactor" : {
            "type" : "string",
            "default" : "physical",
            "description" : "Business accounts with a `formFactor` value of **physical** are business accounts issued under the central bank of that country. The default value is **physical** for NL, US, and UK business accounts. \n\nAdyen creates a local IBAN for business accounts when the `formFactor` value is set to **virtual**. The local IBANs that are supported are for DE and FR, which reference a physical NL account, with funds being routed through the central bank of NL."
          },
          "iban" : {
            "type" : "string",
            "description" : "The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard."
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "The [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace."
          },
          "sortCode" : {
            "type" : "string",
            "description" : "The [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace."
          },
          "type" : {
            "type" : "string",
            "default" : "iban",
            "description" : "**iban** or **usLocal** or **ukLocal**"
          }
        },
        "required" : [ "type" ]
      },
      "BankAccountIdentificationTypeRequirement" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "bankAccountIdentificationTypes" : {
            "type" : "array",
            "description" : "List of bank account identification types: eg.; [iban , numberAndBic]",
            "items" : {
              "type" : "string",
              "enum" : [ "auLocal", "brLocal", "caLocal", "czLocal", "dkLocal", "hkLocal", "huLocal", "iban", "legacy", "noLocal", "numberAndBic", "nzLocal", "plLocal", "seLocal", "sgLocal", "ukLocal", "usLocal" ]
            }
          },
          "description" : {
            "type" : "string",
            "description" : "Specifies the bank account details for a particular route per required field in this object depending on the country of the bank account and the currency of the transfer."
          },
          "type" : {
            "type" : "string",
            "default" : "bankAccountIdentificationTypeRequirement",
            "description" : "**bankAccountIdentificationTypeRequirement**",
            "enum" : [ "bankAccountIdentificationTypeRequirement" ]
          }
        },
        "required" : [ "type" ]
      },
      "BankAccountIdentificationValidationRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountIdentification" : {
            "description" : "Bank account identification.",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/AULocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/BRLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/CALocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/CZLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/DKLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/HKLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/HULocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/IbanAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/NOLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/NZLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/NumberAndBicAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/PLLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/SELocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/SGLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/UKLocalAccountIdentification"
            }, {
              "$ref" : "#/components/schemas/USLocalAccountIdentification"
            } ]
          }
        },
        "required" : [ "accountIdentification" ]
      },
      "BankAccountModel" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "formFactor" : {
            "type" : "string",
            "default" : "physical",
            "description" : "Business accounts with a `formFactor` value of **physical** are business accounts issued under the central bank of that country. The default value is **physical** for NL, US, and UK business accounts. \n\nAdyen creates a local IBAN for business accounts when the `formFactor` value is set to **virtual**. The local IBANs that are supported are for DE and FR, which reference a physical NL account, with funds being routed through the central bank of NL.",
            "enum" : [ "physical", "unknown", "virtual" ],
            "nullable" : true
          }
        }
      },
      "BankIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "country" : {
            "type" : "string",
            "description" : "Two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code."
          },
          "identification" : {
            "type" : "string",
            "description" : "The bank identification code."
          },
          "identificationType" : {
            "type" : "string",
            "description" : "The type of the identification.\n\nPossible values: **iban**, **routingNumber**, **sortCode**, **bic**.",
            "enum" : [ "bic", "iban", "routingNumber", "sortCode" ]
          }
        }
      },
      "BrandVariantsRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "description" : "List of card brand variants.\n\nPossible values: \n\n- **mc**, **mccredit**, **mccommercialcredit_b2b**, **mcdebit**, **mcbusinessdebit**, **mcbusinessworlddebit**, **mcprepaid**, **mcmaestro**\n\n - **visa**, **visacredit**, **visadebit**, **visaprepaid**.\n\nYou can specify a rule for a generic variant. For example, to create a rule for all Mastercard payment instruments, use **mc**. The rule is applied to all payment instruments under **mc**, such as **mcbusinessdebit** and **mcdebit**.\n\n",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "operation" ]
      },
      "BulkAddress" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "city" : {
            "type" : "string",
            "description" : "The name of the city."
          },
          "company" : {
            "type" : "string",
            "description" : "The name of the company."
          },
          "country" : {
            "type" : "string",
            "description" : "The two-character ISO-3166-1 alpha-2 country code. For example, **US**."
          },
          "email" : {
            "type" : "string",
            "description" : "The email address."
          },
          "houseNumberOrName" : {
            "type" : "string",
            "description" : "The house number or name."
          },
          "mobile" : {
            "type" : "string",
            "description" : "The full telephone number."
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code.\n\nMaximum length:\n\n* 5 digits for addresses in the US.\n\n* 10 characters for all other countries."
          },
          "stateOrProvince" : {
            "type" : "string",
            "description" : "The two-letter ISO 3166-2 state or province code.\n\nMaximum length: 2 characters for addresses in the US."
          },
          "street" : {
            "type" : "string",
            "description" : "The streetname of the house."
          }
        },
        "required" : [ "country" ]
      },
      "CALocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 5- to 12-digit bank account number, without separators or whitespace.",
            "maxLength" : 12,
            "minLength" : 5
          },
          "accountType" : {
            "type" : "string",
            "default" : "checking",
            "description" : "The bank account type.\n\nPossible values: **checking** or **savings**. Defaults to **checking**.",
            "enum" : [ "checking", "savings" ]
          },
          "institutionNumber" : {
            "type" : "string",
            "description" : "The 3-digit institution number, without separators or whitespace.",
            "maxLength" : 3,
            "minLength" : 3
          },
          "transitNumber" : {
            "type" : "string",
            "description" : "The 5-digit transit number, without separators or whitespace.",
            "maxLength" : 5,
            "minLength" : 5
          },
          "type" : {
            "type" : "string",
            "default" : "caLocal",
            "description" : "**caLocal**",
            "enum" : [ "caLocal" ]
          }
        },
        "required" : [ "accountNumber", "institutionNumber", "transitNumber", "type" ]
      },
      "CZLocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 2- to 16-digit bank account number (Číslo účtu) in the following format:\n\n- The optional prefix (předčíslí).\n\n- The required second part (základní část) which must be at least two non-zero digits.\n\nExamples:\n\n- **19-123457** (with prefix)\n\n- **123457** (without prefix)\n\n- **000019-0000123457** (with prefix, normalized)\n\n- **000000-0000123457** (without prefix, normalized)",
            "maxLength" : 17,
            "minLength" : 2
          },
          "bankCode" : {
            "type" : "string",
            "description" : "The 4-digit bank code (Kód banky), without separators or whitespace.",
            "maxLength" : 4,
            "minLength" : 4
          },
          "type" : {
            "type" : "string",
            "default" : "czLocal",
            "description" : "**czLocal**",
            "enum" : [ "czLocal" ]
          }
        },
        "required" : [ "accountNumber", "bankCode", "type" ]
      },
      "CapabilityProblem" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "entity" : {
            "$ref" : "#/components/schemas/CapabilityProblemEntity",
            "description" : "Contains the type of the entity and the corresponding ID."
          },
          "verificationErrors" : {
            "type" : "array",
            "description" : "Contains information about the verification error.",
            "items" : {
              "$ref" : "#/components/schemas/VerificationError"
            }
          }
        }
      },
      "CapabilityProblemEntity" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "documents" : {
            "type" : "array",
            "description" : "List of document IDs to which the verification errors related to the capabilities correspond to.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "The ID of the entity."
          },
          "owner" : {
            "$ref" : "#/components/schemas/CapabilityProblemEntity-recursive",
            "description" : "Contains details about the owner of the entity that has an error."
          },
          "type" : {
            "type" : "string",
            "description" : "Type of entity. \n\nPossible values: **LegalEntity**, **BankAccount**, **Document**.",
            "enum" : [ "BankAccount", "Document", "LegalEntity" ]
          }
        }
      },
      "CapabilityProblemEntity-recursive" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "documents" : {
            "type" : "array",
            "description" : "List of document IDs to which the verification errors related to the capabilities correspond to.",
            "items" : {
              "type" : "string"
            }
          },
          "id" : {
            "type" : "string",
            "description" : "The ID of the entity."
          },
          "type" : {
            "type" : "string",
            "description" : "Type of entity. \n\nPossible values: **LegalEntity**, **BankAccount**, **Document**.",
            "enum" : [ "BankAccount", "Document", "LegalEntity" ]
          }
        }
      },
      "CapabilitySettings" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amountPerIndustry" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Amount"
            },
            "description" : ""
          },
          "authorizedCardUsers" : {
            "type" : "boolean",
            "description" : ""
          },
          "fundingSource" : {
            "type" : "array",
            "description" : "",
            "items" : {
              "type" : "string",
              "enum" : [ "credit", "debit", "prepaid" ]
            }
          },
          "interval" : {
            "type" : "string",
            "description" : "",
            "enum" : [ "daily", "monthly", "weekly" ]
          },
          "maxAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : ""
          }
        }
      },
      "CapitalBalance" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)."
          },
          "fee" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Fee amount."
          },
          "principal" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Principal amount."
          },
          "total" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Total amount. A sum of principal amount and fee amount."
          }
        },
        "required" : [ "currency", "fee", "principal", "total" ]
      },
      "CapitalGrantAccount" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balances" : {
            "type" : "array",
            "description" : "The balances of the grant account.",
            "items" : {
              "$ref" : "#/components/schemas/CapitalBalance"
            }
          },
          "fundingBalanceAccountId" : {
            "type" : "string",
            "description" : "The unique identifier of the balance account used to fund the grant."
          },
          "id" : {
            "type" : "string",
            "description" : "The identifier of the grant account."
          },
          "limits" : {
            "type" : "array",
            "description" : "The limits of the grant account.",
            "items" : {
              "$ref" : "#/components/schemas/GrantLimit"
            }
          }
        }
      },
      "Card" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "authentication" : {
            "$ref" : "#/components/schemas/Authentication",
            "description" : "Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information."
          },
          "bin" : {
            "type" : "string",
            "description" : "The bank identification number (BIN) of the card number."
          },
          "brand" : {
            "type" : "string",
            "description" : "The brand of the physical or the virtual card.\nPossible values: **visa**, **mc**."
          },
          "brandVariant" : {
            "type" : "string",
            "description" : "The brand variant of the physical or the virtual card. For example, **visadebit** or **mcprepaid**.\n>Reach out to your Adyen contact to get the values relevant for your integration."
          },
          "cardholderName" : {
            "type" : "string",
            "description" : "The name of the cardholder.\n Maximum length: 26 characters.",
            "maxLength" : 26
          },
          "configuration" : {
            "$ref" : "#/components/schemas/CardConfiguration",
            "description" : "Settings required when creating a physical or a virtual card. \n\nReach out to your Adyen contact to get the values that you can send in this object."
          },
          "cvc" : {
            "type" : "string",
            "description" : "The CVC2 value of the card.\n> The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards."
          },
          "deliveryContact" : {
            "$ref" : "#/components/schemas/DeliveryContact",
            "description" : "The delivery contact (name and address) for physical card delivery.",
            "x-addedInVersion" : "2"
          },
          "expiration" : {
            "$ref" : "#/components/schemas/Expiry",
            "description" : "The expiration date of the card."
          },
          "formFactor" : {
            "type" : "string",
            "description" : "The form factor of the card.\nPossible values: **virtual**, **physical**.",
            "enum" : [ "physical", "unknown", "virtual" ]
          },
          "lastFour" : {
            "type" : "string",
            "description" : "Last last four digits of the card number."
          },
          "number" : {
            "type" : "string",
            "description" : "The primary account number (PAN) of the card.\n> The PAN is masked by default and returned only for single-use virtual cards.",
            "readOnly" : true
          },
          "threeDSecure" : {
            "type" : "string",
            "description" : "Allocates a specific product range for either a physical or a virtual card. Possible values: **fullySupported**, **secureCorporate**.\n>Reach out to your Adyen contact to get the values relevant for your integration."
          }
        },
        "required" : [ "brand", "brandVariant", "cardholderName", "formFactor", "number" ]
      },
      "CardConfiguration" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "activation" : {
            "type" : "string",
            "description" : "Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions."
          },
          "activationUrl" : {
            "type" : "string",
            "description" : "Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process. \n\nMaximum length: 255 characters.",
            "maxLength" : 255
          },
          "bulkAddress" : {
            "$ref" : "#/components/schemas/BulkAddress",
            "description" : "Overrides the shipment bulk address defined in the `configurationProfileId`."
          },
          "cardImageId" : {
            "type" : "string",
            "description" : "The ID of the card image. This is the image that will be printed on the full front of the card."
          },
          "carrier" : {
            "type" : "string",
            "description" : "Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached."
          },
          "carrierImageId" : {
            "type" : "string",
            "description" : "The ID of the carrier image. This is the image that will printed on the letter to which the card is attached."
          },
          "configurationProfileId" : {
            "type" : "string",
            "description" : "The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.\n\nFor example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile."
          },
          "currency" : {
            "type" : "string",
            "description" : "The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**."
          },
          "envelope" : {
            "type" : "string",
            "description" : "Overrides the envelope design ID defined in the `configurationProfileId`. "
          },
          "insert" : {
            "type" : "string",
            "description" : "Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card."
          },
          "language" : {
            "type" : "string",
            "description" : "The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**."
          },
          "logoImageId" : {
            "type" : "string",
            "description" : "The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner."
          },
          "pinMailer" : {
            "type" : "string",
            "description" : "Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed."
          },
          "shipmentMethod" : {
            "type" : "string",
            "description" : "Overrides the logistics company defined in the `configurationProfileId`."
          }
        },
        "required" : [ "configurationProfileId" ]
      },
      "CardInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "authentication" : {
            "$ref" : "#/components/schemas/Authentication",
            "description" : "Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information."
          },
          "brand" : {
            "type" : "string",
            "description" : "The brand of the physical or the virtual card.\nPossible values: **visa**, **mc**."
          },
          "brandVariant" : {
            "type" : "string",
            "description" : "The brand variant of the physical or the virtual card. For example, **visadebit** or **mcprepaid**.\n>Reach out to your Adyen contact to get the values relevant for your integration."
          },
          "cardholderName" : {
            "type" : "string",
            "description" : "The name of the cardholder.\n Maximum length: 26 characters.",
            "maxLength" : 26
          },
          "configuration" : {
            "$ref" : "#/components/schemas/CardConfiguration",
            "description" : "Settings required when creating a physical or a virtual card. \n\nReach out to your Adyen contact to get the values that you can send in this object."
          },
          "deliveryContact" : {
            "$ref" : "#/components/schemas/DeliveryContact",
            "description" : "The delivery contact (name and address) for physical card delivery.",
            "x-addedInVersion" : "2"
          },
          "formFactor" : {
            "type" : "string",
            "description" : "The form factor of the card.\nPossible values: **virtual**, **physical**.",
            "enum" : [ "physical", "unknown", "virtual" ]
          },
          "threeDSecure" : {
            "type" : "string",
            "description" : "Allocates a specific product range for either a physical or a virtual card. Possible values: **fullySupported**, **secureCorporate**.\n>Reach out to your Adyen contact to get the values relevant for your integration."
          }
        },
        "required" : [ "brand", "brandVariant", "cardholderName", "formFactor" ]
      },
      "CardOrder" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "beginDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date when the card order is created."
          },
          "cardManufacturingProfileId" : {
            "type" : "string",
            "description" : "The unique identifier of the card manufacturer profile."
          },
          "closedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date when the card order processing ends."
          },
          "endDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date when you manually closed the card order.\n\nCard orders are automatically closed by the end of the day it was created. If you manually closed it beforehand, the closing date is shown as the `endDate`."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the card order."
          },
          "lockDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date when the card order processing begins."
          },
          "serviceCenter" : {
            "type" : "string",
            "description" : "The service center."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the card order.\n\nPossible values: **Open**, **Closed**.",
            "enum" : [ "closed", "open" ]
          }
        }
      },
      "CardOrderItem" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balancePlatform" : {
            "type" : "string",
            "description" : "The unique identifier of the balance platform."
          },
          "card" : {
            "$ref" : "#/components/schemas/CardOrderItemDeliveryStatus",
            "description" : "The status of the card delivery.\n\nPossible values: **created**, **rejected**, **processing**, **produced**, **shipped**, **delivered**, **notApplicable**, **unknown**. "
          },
          "cardOrderItemId" : {
            "type" : "string",
            "description" : "The unique identifier of the card order item."
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**."
          },
          "id" : {
            "type" : "string",
            "description" : "The ID of the resource.",
            "readOnly" : true
          },
          "paymentInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument related to the card order item."
          },
          "pin" : {
            "$ref" : "#/components/schemas/CardOrderItemDeliveryStatus",
            "description" : "Contains information about the status of the PIN delivery."
          },
          "shippingMethod" : {
            "type" : "string",
            "description" : "The shipping method used to deliver the card or the PIN."
          }
        }
      },
      "CardOrderItemDeliveryStatus" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "errorMessage" : {
            "type" : "string",
            "description" : "An error message."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the PIN delivery.",
            "enum" : [ "created", "delivered", "notApplicable", "processing", "produced", "rejected", "shipped", "unknown" ]
          },
          "trackingNumber" : {
            "type" : "string",
            "description" : "The tracking number of the PIN delivery."
          }
        }
      },
      "ContactDetails" : {
        "type" : "object",
        "additionalProperties" : false,
        "deprecated" : true,
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/Address",
            "description" : "The address of the account holder."
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the account holder."
          },
          "phone" : {
            "$ref" : "#/components/schemas/Phone",
            "description" : "The phone number of the account holder."
          },
          "webAddress" : {
            "type" : "string",
            "description" : "The URL of the account holder's website."
          }
        },
        "required" : [ "address", "email", "phone" ]
      },
      "Counterparty" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccount",
            "description" : "Contains information about the bank account."
          },
          "transferInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id)."
          }
        }
      },
      "CounterpartyBankRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "description" : "The list of counterparty bank institutions to be evaluated.",
            "items" : {
              "$ref" : "#/components/schemas/BankIdentification"
            }
          }
        },
        "required" : [ "operation" ]
      },
      "CounterpartyTypesRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "description" : "The list of counterparty types to be evaluated.",
            "items" : {
              "type" : "string",
              "enum" : [ "balanceAccount", "bankAccount", "card", "transferInstrument" ]
            }
          }
        },
        "required" : [ "operation" ]
      },
      "CountriesRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "description" : "List of two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes.",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "operation" ]
      },
      "CreateSweepConfigurationV2" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "category" : {
            "type" : "string",
            "description" : "The type of transfer that results from the sweep.\n\nPossible values:\n\n - **bank**: Sweep to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).\n\n- **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.\n\nRequired when setting `priorities`.",
            "enum" : [ "bank", "internal", "platformPayment" ],
            "x-addedInVersion" : "2"
          },
          "counterparty" : {
            "$ref" : "#/components/schemas/SweepCounterparty",
            "description" : "The destination or the source of the funds, depending on the sweep `type`.\n\nEither a `balanceAccountId`, `transferInstrumentId`, or `merchantAccount` is required."
          },
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.\n\nThe sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances)."
          },
          "description" : {
            "type" : "string",
            "description" : "The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.\n\nIf the message is longer after replacing placeholders, the message will be cut off at 140 characters."
          },
          "priorities" : {
            "type" : "array",
            "description" : "The list of priorities for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. You can provide multiple priorities, ordered by your preference. Adyen will try to pay out using the priorities in the given order. If the first priority is not currently supported or enabled for your platform, the system will try the next one, and so on.\n\nThe request will be accepted as long as **at least one** of the provided priorities is valid (i.e., supported by Adyen and activated for your platform). For example, if you provide `[\"wire\",\"regular\"]`, and `wire` is not supported but `regular` is, the request will still be accepted and processed.\n\nPossible values:\n\n* **regular**: for normal, low-value transactions.\n\n* **fast**: a faster way to transfer funds, but the fees are higher. Recommended for high-priority, low-value transactions.\n\n* **wire**: the fastest way to transfer funds, but this has the highest fees. Recommended for high-priority, high-value transactions.\n\n* **instant**: for instant funds transfers in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).\n\n* **crossBorder**: for high-value transfers to a recipient in a different country.\n\n* **internal**: for transfers to an Adyen-issued business bank account (by bank account number/IBAN).\n\nSet `category` to **bank**. For more details, see optional priorities setup for [marketplaces](https://docs.adyen.com/marketplaces/payout-to-users/scheduled-payouts#optional-priorities-setup) or [platforms](https://docs.adyen.com/platforms/payout-to-users/scheduled-payouts#optional-priorities-setup).",
            "items" : {
              "type" : "string",
              "enum" : [ "crossBorder", "fast", "instant", "internal", "regular", "wire" ]
            },
            "x-addedInVersion" : "2"
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for disabling the sweep.",
            "enum" : [ "accountHierarchyNotActive", "amountLimitExceeded", "approved", "balanceAccountTemporarilyBlockedByTransactionRule", "counterpartyAccountBlocked", "counterpartyAccountClosed", "counterpartyAccountNotFound", "counterpartyAddressRequired", "counterpartyBankTimedOut", "counterpartyBankUnavailable", "declined", "declinedByTransactionRule", "directDebitNotSupported", "error", "notEnoughBalance", "pending", "pendingApproval", "pendingExecution", "refusedByCounterpartyBank", "refusedByCustomer", "routeNotFound", "scaFailed", "transferInstrumentDoesNotExist", "unknown" ],
            "readOnly" : true
          },
          "reasonDetail" : {
            "type" : "string",
            "description" : "The human readable reason for disabling the sweep.",
            "readOnly" : true
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the sweep configuration.",
            "maxLength" : 80
          },
          "referenceForBeneficiary" : {
            "type" : "string",
            "description" : "The reference sent to or received from the counterparty. Only alphanumeric characters are allowed.",
            "maxLength" : 80
          },
          "schedule" : {
            "$ref" : "#/components/schemas/SweepSchedule",
            "description" : "The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the sweep. If not provided, by default, this is set to **active**.\n\nPossible values: \n\n * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration. \n\n * **inactive**: the sweep is disabled and cannot be triggered. \n\n",
            "enum" : [ "active", "inactive" ]
          },
          "sweepAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both."
          },
          "targetAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both."
          },
          "triggerAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.\n\n* For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.\n\n* For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account."
          },
          "type" : {
            "type" : "string",
            "default" : "push",
            "description" : "The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.\n\nPossible values:\n\n * **push**: _push out funds_ to a destination balance account or transfer instrument.\n\n * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.",
            "enum" : [ "pull", "push" ]
          }
        },
        "required" : [ "counterparty", "currency", "schedule" ]
      },
      "DKLocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 4-10 digits bank account number (Kontonummer) (without separators or whitespace).",
            "maxLength" : 10,
            "minLength" : 4
          },
          "bankCode" : {
            "type" : "string",
            "description" : "The 4-digit bank code (Registreringsnummer) (without separators or whitespace).",
            "maxLength" : 4,
            "minLength" : 4
          },
          "type" : {
            "type" : "string",
            "default" : "dkLocal",
            "description" : "**dkLocal**",
            "enum" : [ "dkLocal" ]
          }
        },
        "required" : [ "accountNumber", "bankCode", "type" ]
      },
      "DayOfWeekRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "description" : "List of days of the week.\n\nPossible values: **monday**, **tuesday**, **wednesday**, **thursday**, **friday**, **saturday**, **sunday**.\n\n",
            "items" : {
              "type" : "string",
              "enum" : [ "friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday" ]
            }
          }
        },
        "required" : [ "operation" ]
      },
      "DelegatedAuthenticationData" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "sdkOutput" : {
            "type" : "string",
            "description" : "A base64-encoded block with the data required to register the SCA device. You obtain this information by using our authentication SDK.",
            "maxLength" : 20000
          }
        },
        "required" : [ "sdkOutput" ]
      },
      "DeliveryAddress" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "city" : {
            "type" : "string",
            "description" : "The name of the city."
          },
          "country" : {
            "type" : "string",
            "description" : "The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n>If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`."
          },
          "line1" : {
            "type" : "string",
            "description" : "The name of the street. Do not include the number of the building.\n\nFor example, if the address is Simon Carmiggeltstraat 6-50, provide **Simon Carmiggeltstraat**."
          },
          "line2" : {
            "type" : "string",
            "description" : "The number of the building.\n\nFor example, if the address is Simon Carmiggeltstraat 6-50, provide **6-50**."
          },
          "line3" : {
            "type" : "string",
            "description" : "Additional information about the delivery address."
          },
          "postalCode" : {
            "type" : "string",
            "description" : "The postal code.\nMaximum length:\n* 5 digits for an address in the US.\n* 10 characters for an address in all other countries."
          },
          "stateOrProvince" : {
            "type" : "string",
            "description" : "The two-letter ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada."
          }
        },
        "required" : [ "country" ]
      },
      "DeliveryContact" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/DeliveryAddress",
            "description" : "The address of the contact."
          },
          "company" : {
            "type" : "string",
            "description" : "The company name of the contact.",
            "x-addedInVersion" : "2"
          },
          "email" : {
            "type" : "string",
            "description" : "The email address of the contact."
          },
          "fullPhoneNumber" : {
            "type" : "string",
            "description" : "The full phone number of the contact provided as a single string. It will be handled as a landline phone.\n**Examples:** \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\""
          },
          "name" : {
            "$ref" : "#/components/schemas/Name",
            "description" : "The name of the contact."
          },
          "phoneNumber" : {
            "$ref" : "#/components/schemas/PhoneNumber",
            "description" : "The phone number of the contact."
          },
          "webAddress" : {
            "type" : "string",
            "description" : "The URL of the contact's website."
          }
        },
        "required" : [ "address", "name" ]
      },
      "Device" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the SCA device."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the SCA device. You can show this name to your user to help them identify the device."
          },
          "paymentInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument that is associated with the SCA device."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of device.\n\nPossible values: **ios**, **android**, **browser**.",
            "enum" : [ "ios", "android", "browser" ]
          }
        }
      },
      "DeviceInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "cardCaptureTechnology" : {
            "type" : "string",
            "description" : "The technology used to capture the card details."
          },
          "deviceName" : {
            "type" : "string",
            "description" : "The name of the device."
          },
          "formFactor" : {
            "type" : "string",
            "description" : "The form factor of the device to be provisioned."
          },
          "imei" : {
            "type" : "string",
            "description" : "The IMEI number of the device being provisioned."
          },
          "isoDeviceType" : {
            "type" : "string",
            "description" : "The 2-digit device type provided on the ISO messages that the token is being provisioned to."
          },
          "msisdn" : {
            "type" : "string",
            "description" : "The MSISDN of the device being provisioned."
          },
          "osName" : {
            "type" : "string",
            "description" : "The name of the device operating system."
          },
          "osVersion" : {
            "type" : "string",
            "description" : "The version of the device operating system."
          },
          "paymentTypes" : {
            "type" : "array",
            "description" : "Different types of payments supported for the network token.",
            "items" : {
              "type" : "string"
            }
          },
          "serialNumber" : {
            "type" : "string",
            "description" : "The serial number of the device."
          },
          "storageTechnology" : {
            "type" : "string",
            "description" : "The architecture or technology used for network token storage."
          }
        }
      },
      "DifferentCurrenciesRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "boolean",
            "description" : "Checks the currency of the payment against the currency of the payment instrument.\n\nPossible values:\n\n- **true**: The currency of the payment is different from the currency of the payment instrument.\n\n- **false**: The currencies are the same.\n\n"
          }
        },
        "required" : [ "operation" ]
      },
      "Duration" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "unit" : {
            "type" : "string",
            "description" : "The unit of time. You can only use **minutes** and **hours** if the `interval.type` is **sliding**.\n\nPossible values: **minutes**, **hours**, **days**, **weeks**, or **months**",
            "enum" : [ "days", "hours", "minutes", "months", "weeks" ]
          },
          "value" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The length of time by the unit. For example, 5 days.\n\nThe maximum duration is 90 days or an equivalent in other units. For example, 3 months."
          }
        }
      },
      "EntryModesRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "description" : "List of point-of-sale entry modes.\n\nPossible values: **barcode**, **chip**, **cof**, **contactless**, **magstripe**, **manual**, **ocr**, **server**.\n\n",
            "items" : {
              "type" : "string",
              "enum" : [ "barcode", "chip", "cof", "contactless", "magstripe", "manual", "ocr", "server", "unknown" ]
            }
          }
        },
        "required" : [ "operation" ]
      },
      "Expiry" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "month" : {
            "type" : "string",
            "description" : "The month in which the card will expire."
          },
          "year" : {
            "type" : "string",
            "description" : "The year in which the card will expire."
          }
        }
      },
      "Fee" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "An object containing the fee amount."
          }
        },
        "required" : [ "amount" ]
      },
      "GetNetworkTokenResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "token" : {
            "$ref" : "#/components/schemas/NetworkToken",
            "description" : "The details of the network token."
          }
        },
        "required" : [ "token" ]
      },
      "GetTaxFormResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "content" : {
            "type" : "string",
            "format" : "byte",
            "description" : "The content of the tax form in Base64 format."
          },
          "contentType" : {
            "type" : "string",
            "description" : "The content type of the tax form.\n\nPossible values:\n*  **application/pdf**\n\n",
            "enum" : [ "application/pdf" ]
          }
        },
        "required" : [ "content" ]
      },
      "GrantLimit" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount available on the grant account."
          }
        }
      },
      "GrantOffer" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountHolderId" : {
            "type" : "string",
            "description" : "The identifier of the account holder to which the grant is offered."
          },
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The principal amount of the grant."
          },
          "contractType" : {
            "type" : "string",
            "description" : "The contract type of the grant offer. Possible value: **cashAdvance**, **loan**.",
            "enum" : [ "cashAdvance", "loan" ]
          },
          "expiresAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The end date of the grant offer validity period."
          },
          "fee" : {
            "$ref" : "#/components/schemas/Fee",
            "description" : "Details of the fee configuration."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the grant offer."
          },
          "repayment" : {
            "$ref" : "#/components/schemas/Repayment",
            "description" : "Details of the repayment configuration."
          },
          "startsAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The starting date of the grant offer validity period."
          }
        },
        "required" : [ "accountHolderId" ]
      },
      "GrantOffers" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "grantOffers" : {
            "type" : "array",
            "description" : "A list of available grant offers.",
            "items" : {
              "$ref" : "#/components/schemas/GrantOffer"
            }
          }
        },
        "required" : [ "grantOffers" ]
      },
      "HKLocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 9- to 15-character bank account number (alphanumeric), without separators or whitespace. Starts with the 3-digit branch code.",
            "maxLength" : 15,
            "minLength" : 9
          },
          "clearingCode" : {
            "type" : "string",
            "description" : "The 3-digit clearing code, without separators or whitespace.",
            "maxLength" : 3,
            "minLength" : 3
          },
          "type" : {
            "type" : "string",
            "default" : "hkLocal",
            "description" : "**hkLocal**",
            "enum" : [ "hkLocal" ]
          }
        },
        "required" : [ "accountNumber", "clearingCode", "type" ]
      },
      "HULocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 24-digit bank account number, without separators or whitespace.",
            "maxLength" : 24,
            "minLength" : 24
          },
          "type" : {
            "type" : "string",
            "default" : "huLocal",
            "description" : "**huLocal**",
            "enum" : [ "huLocal" ]
          }
        },
        "required" : [ "accountNumber", "type" ]
      },
      "Href" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "href" : {
            "type" : "string"
          }
        }
      },
      "IbanAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "iban" : {
            "type" : "string",
            "description" : "The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard."
          },
          "type" : {
            "type" : "string",
            "default" : "iban",
            "description" : "**iban**",
            "enum" : [ "iban" ]
          }
        },
        "required" : [ "iban", "type" ]
      },
      "IbanAccountIdentificationRequirement" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Specifies the allowed prefixes for the international bank account number as defined in the ISO-13616 standard."
          },
          "ibanPrefixes" : {
            "type" : "array",
            "description" : "Contains the list of allowed prefixes for international bank accounts. For example: NL, US, UK.",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string",
            "default" : "ibanAccountIdentificationRequirement",
            "description" : "**ibanAccountIdentificationRequirement**",
            "enum" : [ "ibanAccountIdentificationRequirement" ]
          }
        },
        "required" : [ "type" ]
      },
      "InternationalTransactionRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "boolean",
            "description" : "Boolean indicating whether transaction is an international transaction.\n\nPossible values:\n\n- **true**: The transaction is an international transaction.\n\n- **false**: The transaction is a domestic transaction.\n\n"
          }
        },
        "required" : [ "operation" ]
      },
      "InvalidField" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The field that has an invalid value."
          },
          "value" : {
            "type" : "string",
            "description" : "The invalid value."
          },
          "message" : {
            "type" : "string",
            "description" : "Description of the validation error."
          }
        },
        "required" : [ "message", "name", "value" ]
      },
      "JSONObject" : {
        "type" : "object"
      },
      "Link" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "first" : {
            "$ref" : "#/components/schemas/Href",
            "description" : "The link to the first page of the list."
          },
          "last" : {
            "$ref" : "#/components/schemas/Href",
            "description" : "The link to the last page of the list."
          },
          "next" : {
            "$ref" : "#/components/schemas/Href",
            "description" : "The link to the next page of the list."
          },
          "previous" : {
            "$ref" : "#/components/schemas/Href",
            "description" : "The link to the previous page of the list."
          },
          "self" : {
            "$ref" : "#/components/schemas/Href",
            "description" : "The link to the list page you are currently viewing."
          }
        }
      },
      "ListNetworkTokensResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "networkTokens" : {
            "type" : "array",
            "description" : "List of network tokens.",
            "items" : {
              "$ref" : "#/components/schemas/NetworkToken"
            }
          }
        }
      },
      "MatchingTransactionsRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of transactions."
          }
        },
        "required" : [ "operation" ]
      },
      "MatchingValuesRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "acquirerId", "amount", "currency", "merchantId", "merchantName" ]
            }
          }
        },
        "required" : [ "operation" ]
      },
      "MccsRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "description" : "List of merchant category codes (MCCs).",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "operation" ]
      },
      "MerchantAcquirerPair" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "acquirerId" : {
            "type" : "string",
            "description" : "The acquirer ID."
          },
          "merchantId" : {
            "type" : "string",
            "description" : "The merchant identification number (MID)."
          }
        }
      },
      "MerchantNamesRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StringMatch"
            }
          }
        },
        "required" : [ "operation" ]
      },
      "MerchantsRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "description" : "List of merchant ID and acquirer ID pairs.",
            "items" : {
              "$ref" : "#/components/schemas/MerchantAcquirerPair"
            }
          }
        },
        "required" : [ "operation" ]
      },
      "NOLocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 11-digit bank account number, without separators or whitespace.",
            "maxLength" : 11,
            "minLength" : 11
          },
          "type" : {
            "type" : "string",
            "default" : "noLocal",
            "description" : "**noLocal**",
            "enum" : [ "noLocal" ]
          }
        },
        "required" : [ "accountNumber", "type" ]
      },
      "NZLocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 15-16 digit bank account number. The first 2 digits are the bank number, the next 4 digits are the branch number, the next 7 digits are the account number, and the final 2-3 digits are the suffix.",
            "maxLength" : 16,
            "minLength" : 15
          },
          "type" : {
            "type" : "string",
            "default" : "nzLocal",
            "description" : "**nzLocal**",
            "enum" : [ "nzLocal" ]
          }
        },
        "required" : [ "accountNumber", "type" ]
      },
      "Name" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "firstName" : {
            "type" : "string",
            "description" : "The first name.",
            "maxLength" : 80
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name.",
            "maxLength" : 80
          }
        },
        "required" : [ "firstName", "lastName" ]
      },
      "NetworkToken" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "brandVariant" : {
            "type" : "string",
            "description" : "The card brand variant of the payment instrument associated with the network token. For example, **mc_prepaid_mrw**."
          },
          "creationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time when the network token was created, in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) extended format. For example, **2020-12-18T10:15:30+01:00**.."
          },
          "device" : {
            "$ref" : "#/components/schemas/DeviceInfo",
            "description" : "Device details."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the network token."
          },
          "paymentInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument to which this network token belongs to."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the network token. Possible values: **active**, **inactive**, **suspended**, **closed**.",
            "enum" : [ "active", "inactive", "suspended", "closed" ]
          },
          "tokenLastFour" : {
            "type" : "string",
            "description" : "The last four digits of the network token `id`."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of network token. For example, **wallet**, **cof**."
          }
        }
      },
      "NumberAndBicAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The bank account number, without separators or whitespace. The length and format depends on the bank or country.",
            "maxLength" : 34
          },
          "additionalBankIdentification" : {
            "$ref" : "#/components/schemas/AdditionalBankIdentification",
            "description" : "Additional identification codes of the bank. Some banks may require these identifiers for cross-border transfers."
          },
          "bic" : {
            "type" : "string",
            "description" : "The bank's 8- or 11-character BIC or SWIFT code.",
            "maxLength" : 11,
            "minLength" : 8
          },
          "type" : {
            "type" : "string",
            "default" : "numberAndBic",
            "description" : "**numberAndBic**",
            "enum" : [ "numberAndBic" ]
          }
        },
        "required" : [ "accountNumber", "bic", "type" ]
      },
      "PLLocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 26-digit bank account number ([Numer rachunku](https://pl.wikipedia.org/wiki/Numer_Rachunku_Bankowego)), without separators or whitespace.",
            "maxLength" : 26,
            "minLength" : 26
          },
          "type" : {
            "type" : "string",
            "default" : "plLocal",
            "description" : "**plLocal**",
            "enum" : [ "plLocal" ]
          }
        },
        "required" : [ "accountNumber", "type" ]
      },
      "PaginatedAccountHoldersResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountHolders" : {
            "type" : "array",
            "description" : "List of account holders.",
            "items" : {
              "$ref" : "#/components/schemas/AccountHolder"
            }
          },
          "hasNext" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the next page."
          },
          "hasPrevious" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the previous page."
          }
        },
        "required" : [ "accountHolders", "hasNext", "hasPrevious" ]
      },
      "PaginatedBalanceAccountsResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balanceAccounts" : {
            "type" : "array",
            "description" : "List of balance accounts.",
            "items" : {
              "$ref" : "#/components/schemas/BalanceAccountBase"
            }
          },
          "hasNext" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the next page."
          },
          "hasPrevious" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the previous page."
          }
        },
        "required" : [ "balanceAccounts", "hasNext", "hasPrevious" ]
      },
      "PaginatedGetCardOrderItemResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "List of card order items in the card order batch.",
            "items" : {
              "$ref" : "#/components/schemas/CardOrderItem"
            }
          },
          "hasNext" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the next page."
          },
          "hasPrevious" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the previous page."
          }
        },
        "required" : [ "data", "hasNext", "hasPrevious" ]
      },
      "PaginatedGetCardOrderResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "cardOrders" : {
            "type" : "array",
            "description" : "Contains objects with information about card orders.",
            "items" : {
              "$ref" : "#/components/schemas/CardOrder"
            }
          },
          "hasNext" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the next page."
          },
          "hasPrevious" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the previous page."
          }
        },
        "required" : [ "hasNext", "hasPrevious" ]
      },
      "PaginatedPaymentInstrumentsResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "hasNext" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the next page."
          },
          "hasPrevious" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items on the previous page."
          },
          "paymentInstruments" : {
            "type" : "array",
            "description" : "List of payment instruments associated with the balance account.",
            "items" : {
              "$ref" : "#/components/schemas/PaymentInstrument"
            }
          }
        },
        "required" : [ "hasNext", "hasPrevious", "paymentInstruments" ]
      },
      "PaymentInstrument" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "additionalBankAccountIdentifications" : {
            "type" : "array",
            "deprecated" : true,
            "description" : "Contains optional, additional business account details. Returned when you create a payment instrument with `type` **bankAccount**.",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/IbanAccountIdentification"
              } ]
            },
            "x-deprecatedInVersion" : "2",
            "x-deprecatedMessage" : "Please use `bankAccount` object instead"
          },
          "balanceAccountId" : {
            "type" : "string",
            "description" : "The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument."
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccountDetails",
            "description" : "Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**."
          },
          "card" : {
            "$ref" : "#/components/schemas/Card",
            "description" : "Contains information about the card payment instrument. Returned when you create a payment instrument with `type` **card**."
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the payment instrument, maximum 300 characters.",
            "maxLength" : 300
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument."
          },
          "issuingCountryCode" : {
            "type" : "string",
            "description" : "The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**."
          },
          "paymentInstrumentGroupId" : {
            "type" : "string",
            "description" : "The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the payment instrument, maximum 150 characters.",
            "maxLength" : 150
          },
          "replacedById" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument that replaced this payment instrument."
          },
          "replacementOfId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument that is replaced by this payment instrument."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n",
            "enum" : [ "active", "closed", "inactive", "suspended" ]
          },
          "statusComment" : {
            "type" : "string",
            "description" : "The status comment provides additional information for the statusReason of the payment instrument.",
            "x-addedInVersion" : "2"
          },
          "statusReason" : {
            "type" : "string",
            "description" : "The reason for the status of the payment instrument.\n\nPossible values: **accountClosure**, **damaged**, **endOfLife**, **expired**, **lost**, **stolen**, **suspectedFraud**, **transactionRule**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.",
            "enum" : [ "accountClosure", "damaged", "endOfLife", "expired", "lost", "other", "stolen", "suspectedFraud", "transactionRule" ],
            "x-addedInVersion" : "2"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of payment instrument.\n\nPossible values: **card**, **bankAccount**.",
            "enum" : [ "bankAccount", "card" ]
          }
        },
        "required" : [ "balanceAccountId", "id", "issuingCountryCode", "type" ]
      },
      "PaymentInstrumentGroup" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balancePlatform" : {
            "type" : "string",
            "description" : "The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the payment instrument group belongs."
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the payment instrument group.",
            "maxLength" : 300
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument group."
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Properties of the payment instrument group."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the payment instrument group.",
            "maxLength" : 150
          },
          "txVariant" : {
            "type" : "string",
            "description" : "The tx variant of the payment instrument group."
          }
        },
        "required" : [ "balancePlatform", "txVariant" ]
      },
      "PaymentInstrumentGroupInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balancePlatform" : {
            "type" : "string",
            "description" : "The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the payment instrument group belongs."
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the payment instrument group.",
            "maxLength" : 300
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Properties of the payment instrument group."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the payment instrument group.",
            "maxLength" : 150
          },
          "txVariant" : {
            "type" : "string",
            "description" : "The tx variant of the payment instrument group."
          }
        },
        "required" : [ "balancePlatform", "txVariant" ]
      },
      "PaymentInstrumentInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balanceAccountId" : {
            "type" : "string",
            "description" : "The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument."
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccountModel",
            "description" : "Contains the business account details."
          },
          "card" : {
            "$ref" : "#/components/schemas/CardInfo",
            "description" : "Contains information about the card. Required when you create a payment instrument of `type` **card**."
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the payment instrument, maximum 300 characters.",
            "maxLength" : 300
          },
          "issuingCountryCode" : {
            "type" : "string",
            "description" : "The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**."
          },
          "paymentInstrumentGroupId" : {
            "type" : "string",
            "description" : "The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the payment instrument, maximum 150 characters.",
            "maxLength" : 150
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n",
            "enum" : [ "active", "closed", "inactive", "suspended" ]
          },
          "statusComment" : {
            "type" : "string",
            "description" : "The status comment provides additional information for the statusReason of the payment instrument.",
            "x-addedInVersion" : "2"
          },
          "statusReason" : {
            "type" : "string",
            "description" : "The reason for the status of the payment instrument.\n\nPossible values: **accountClosure**, **damaged**, **endOfLife**, **expired**, **lost**, **stolen**, **suspectedFraud**, **transactionRule**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.",
            "enum" : [ "accountClosure", "damaged", "endOfLife", "expired", "lost", "other", "stolen", "suspectedFraud", "transactionRule" ],
            "x-addedInVersion" : "2"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of payment instrument.\n\nPossible values: **card**, **bankAccount**.",
            "enum" : [ "bankAccount", "card" ]
          }
        },
        "required" : [ "balanceAccountId", "issuingCountryCode", "type" ]
      },
      "PaymentInstrumentRequirement" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Specifies the requirements for the payment instrument that need to be included in the request for a particular route."
          },
          "issuingCountryCode" : {
            "type" : "string",
            "description" : "The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**."
          },
          "issuingCountryCodes" : {
            "type" : "array",
            "description" : "The two-character ISO-3166-1 alpha-2 country code list for payment instruments.",
            "items" : {
              "type" : "string"
            }
          },
          "onlyForCrossBalancePlatform" : {
            "type" : "boolean",
            "description" : "Specifies if the requirement only applies to transfers to another balance platform."
          },
          "paymentInstrumentType" : {
            "type" : "string",
            "description" : "The type of the payment instrument. For example, \"BankAccount\" or \"Card\".",
            "enum" : [ "BankAccount", "Card" ]
          },
          "type" : {
            "type" : "string",
            "default" : "paymentInstrumentRequirement",
            "description" : "**paymentInstrumentRequirement**",
            "enum" : [ "paymentInstrumentRequirement" ]
          }
        },
        "required" : [ "type" ]
      },
      "PaymentInstrumentRevealInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "cvc" : {
            "type" : "string",
            "description" : "The CVC2 value of the card."
          },
          "expiration" : {
            "$ref" : "#/components/schemas/Expiry",
            "description" : "The expiration date of the card."
          },
          "pan" : {
            "type" : "string",
            "description" : "The primary account number (PAN) of the card."
          }
        },
        "required" : [ "cvc", "expiration", "pan" ]
      },
      "PaymentInstrumentRevealRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "encryptedKey" : {
            "type" : "string",
            "description" : "The symmetric session key that you encrypted with the [public key](https://docs.adyen.com/api-explorer/balanceplatform/2/get/publicKey) that you received from Adyen."
          },
          "paymentInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument, which is the card for which you are managing the PIN."
          }
        },
        "required" : [ "encryptedKey", "paymentInstrumentId" ]
      },
      "PaymentInstrumentRevealResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "encryptedData" : {
            "type" : "string",
            "description" : "The data encrypted using the `encryptedKey`."
          }
        },
        "required" : [ "encryptedData" ]
      },
      "PaymentInstrumentUpdateRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balanceAccountId" : {
            "type" : "string",
            "description" : "The unique identifier of the balance account associated with this payment instrument.\n>You can only change the balance account ID if the payment instrument has **inactive** status."
          },
          "card" : {
            "$ref" : "#/components/schemas/CardInfo",
            "description" : "Object that contains information about the card payment instrument."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n",
            "enum" : [ "active", "closed", "inactive", "suspended" ]
          },
          "statusComment" : {
            "type" : "string",
            "description" : "Comment for the status of the payment instrument.\n\nRequired if `statusReason` is **other**."
          },
          "statusReason" : {
            "type" : "string",
            "description" : "The reason for updating the status of the payment instrument.\n\nPossible values: **lost**, **stolen**, **damaged**, **suspectedFraud**, **expired**, **endOfLife**, **accountClosure**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.",
            "enum" : [ "accountClosure", "damaged", "endOfLife", "expired", "lost", "other", "stolen", "suspectedFraud", "transactionRule" ],
            "x-addedInVersion" : "2"
          }
        }
      },
      "Phone" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "number" : {
            "type" : "string",
            "description" : "The full phone number provided as a single string. \nFor example, **\"0031 6 11 22 33 44\"**, **\"+316/1122-3344\"**, \n\n or **\"(0031) 611223344\"**."
          },
          "type" : {
            "type" : "string",
            "description" : "Type of phone number.\nPossible values: \n**Landline**, **Mobile**.\n",
            "enum" : [ "landline", "mobile" ]
          }
        },
        "required" : [ "number", "type" ]
      },
      "PhoneNumber" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "phoneCountryCode" : {
            "type" : "string",
            "description" : "The two-character ISO-3166-1 alpha-2 country code of the phone number.\nFor example, **US** or **NL**."
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "The phone number.\nThe inclusion of the phone number country code is not necessary."
          },
          "phoneType" : {
            "type" : "string",
            "description" : "The type of the phone number.\nPossible values: **Landline**, **Mobile**, **SIP**, **Fax**.",
            "enum" : [ "Fax", "Landline", "Mobile", "SIP" ]
          }
        }
      },
      "PinChangeRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "encryptedKey" : {
            "type" : "string",
            "description" : "The symmetric session key that you encrypted with the [public key](https://docs.adyen.com/api-explorer/balanceplatform/2/get/publicKey) that you received from Adyen."
          },
          "encryptedPinBlock" : {
            "type" : "string",
            "description" : "The encrypted [PIN block](https://www.pcisecuritystandards.org/glossary/pin-block)."
          },
          "paymentInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument, which is the card for which you are managing the PIN."
          },
          "token" : {
            "type" : "string",
            "description" : "The 16-digit token that you used to generate the `encryptedPinBlock`."
          }
        },
        "required" : [ "encryptedKey", "encryptedPinBlock", "paymentInstrumentId", "token" ]
      },
      "PinChangeResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "The status of the request for PIN change.\n\nPossible values: **completed**, **pending**, **unavailable**.",
            "enum" : [ "completed", "pending", "unavailable" ]
          }
        },
        "required" : [ "status" ]
      },
      "PlatformPaymentConfiguration" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "salesDayClosingTime" : {
            "type" : "string",
            "format" : "time",
            "description" : "Specifies at what time a [sales day](https://docs.adyen.com/platforms/settle-funds/sales-day-settlement#sales-day) ends for this account.\n\nPossible values: Time in **\"HH:MM\"** format. **HH** ranges from **00** to **07**. **MM** must be **00**.\n\nDefault value: **\"00:00\"**."
          },
          "settlementDelayDays" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Specifies after how many business days the funds in a [settlement batch](https://docs.adyen.com/platforms/settle-funds/sales-day-settlement#settlement-batch) are made available in this balance account.\n\nPossible values: **1** to **20**, or **null**.\n* Setting this value to an integer enables Sales day settlement in this balance account. See how Sales day settlement works in your [marketplace](https://docs.adyen.com/marketplaces/settle-funds/sales-day-settlement) or [platform](https://docs.adyen.com/platforms/settle-funds/sales-day-settlement).\n* Setting this value to **null** enables Pass-through settlement in this balance account. See how Pass-through settlement works in your [marketplace](https://docs.adyen.com/marketplaces/settle-funds/pass-through-settlement) or [platform](https://docs.adyen.com/platforms/settle-funds/pass-through-settlement).\n\nDefault value: **null**."
          }
        }
      },
      "ProcessingTypesRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "description" : "List of processing types.\n\nPossible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **recurring**, **token**.\n\n",
            "items" : {
              "type" : "string",
              "enum" : [ "atmWithdraw", "balanceInquiry", "ecommerce", "moto", "pos", "recurring", "token", "unknown" ]
            }
          }
        },
        "required" : [ "operation" ]
      },
      "PublicKeyResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "publicKey" : {
            "type" : "string",
            "description" : "The public key you need for encrypting a symmetric session key."
          },
          "publicKeyExpiryDate" : {
            "type" : "string",
            "description" : "The expiry date of the public key."
          }
        },
        "required" : [ "publicKey", "publicKeyExpiryDate" ]
      },
      "RegisterSCAFinalResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "success" : {
            "type" : "boolean",
            "description" : "Specifies if the registration was initiated successfully."
          }
        }
      },
      "RegisterSCARequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the SCA device that you are registering. You can use it to help your users identify the device.\n\nIf you do not specify a `name`, Adyen automatically generates one."
          },
          "paymentInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument for which you are registering the SCA device."
          },
          "strongCustomerAuthentication" : {
            "$ref" : "#/components/schemas/DelegatedAuthenticationData",
            "description" : "Contains information required to register the SCA device."
          }
        },
        "required" : [ "paymentInstrumentId", "strongCustomerAuthentication" ]
      },
      "RegisterSCAResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the SCA device you are registering."
          },
          "paymentInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument for which you are registering the SCA device."
          },
          "sdkInput" : {
            "type" : "string",
            "description" : "A string that you must pass to the authentication SDK to continue with the registration process.",
            "maxLength" : 20000
          },
          "success" : {
            "type" : "boolean",
            "description" : "Specifies if the registration was initiated successfully."
          }
        }
      },
      "RemediatingAction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The remediating action code."
          },
          "message" : {
            "type" : "string",
            "description" : "A description of how you can resolve the verification error."
          }
        }
      },
      "Repayment" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "basisPoints" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The repayment that is deducted daily from incoming net volume, in [basis points](https://www.investopedia.com/terms/b/basispoint.asp)."
          },
          "term" : {
            "$ref" : "#/components/schemas/RepaymentTerm",
            "description" : "An object containing the details of the configuration for repayment term."
          },
          "threshold" : {
            "$ref" : "#/components/schemas/ThresholdRepayment",
            "description" : "An object containing the details of the 30-day repayment threshold."
          }
        },
        "required" : [ "basisPoints" ]
      },
      "RepaymentTerm" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "estimatedDays" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The estimated term for repaying the grant, in days."
          },
          "maximumDays" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The maximum term for repaying the grant, in days. Only applies when `contractType` is **loan**."
          }
        },
        "required" : [ "estimatedDays" ]
      },
      "RestServiceError" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "detail" : {
            "type" : "string",
            "description" : "A human-readable explanation specific to this occurrence of the problem."
          },
          "errorCode" : {
            "type" : "string",
            "description" : "A code that identifies the problem type."
          },
          "instance" : {
            "type" : "string",
            "description" : "A unique URI that identifies the specific occurrence of the problem."
          },
          "invalidFields" : {
            "type" : "array",
            "description" : "Detailed explanation of each validation error, when applicable.",
            "items" : {
              "$ref" : "#/components/schemas/InvalidField"
            }
          },
          "requestId" : {
            "type" : "string",
            "description" : "A unique reference for the request, essentially the same as `pspReference`."
          },
          "response" : {
            "$ref" : "#/components/schemas/JSONObject",
            "description" : "JSON response payload."
          },
          "status" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The HTTP status code."
          },
          "title" : {
            "type" : "string",
            "description" : "A short, human-readable summary of the problem type."
          },
          "type" : {
            "type" : "string",
            "description" : "A URI that identifies the problem type, pointing to human-readable documentation on this problem type."
          }
        },
        "required" : [ "detail", "errorCode", "status", "title", "type" ]
      },
      "RevealPinRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "encryptedKey" : {
            "type" : "string",
            "description" : "The symmetric session key that you encrypted with the [public key](https://docs.adyen.com/api-explorer/balanceplatform/2/get/publicKey) that you received from Adyen."
          },
          "paymentInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument, which is the card for which you are managing the PIN."
          }
        },
        "required" : [ "encryptedKey", "paymentInstrumentId" ]
      },
      "RevealPinResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "encryptedPinBlock" : {
            "type" : "string",
            "description" : "The encrypted [PIN block](https://www.pcisecuritystandards.org/glossary/pin-block)."
          },
          "token" : {
            "type" : "string",
            "description" : "The 16-digit token that you need to extract the `encryptedPinBlock`."
          }
        },
        "required" : [ "encryptedPinBlock", "token" ]
      },
      "RiskScores" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "mastercard" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Transaction risk score provided by Mastercard. Values provided by Mastercard range between 0 (lowest risk) to 998 (highest risk)."
          },
          "visa" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Transaction risk score provided by Visa. Values provided by Visa range between 01 (lowest risk) to 99 (highest risk)."
          }
        }
      },
      "RiskScoresRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "$ref" : "#/components/schemas/RiskScores"
          }
        },
        "required" : [ "operation" ]
      },
      "SELocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 7- to 10-digit bank account number ([Bankkontonummer](https://sv.wikipedia.org/wiki/Bankkonto)), without the clearing number, separators, or whitespace.",
            "maxLength" : 10,
            "minLength" : 7
          },
          "clearingNumber" : {
            "type" : "string",
            "description" : "The 4- to 5-digit clearing number ([Clearingnummer](https://sv.wikipedia.org/wiki/Clearingnummer)), without separators or whitespace.",
            "maxLength" : 5,
            "minLength" : 4
          },
          "type" : {
            "type" : "string",
            "default" : "seLocal",
            "description" : "**seLocal**",
            "enum" : [ "seLocal" ]
          }
        },
        "required" : [ "accountNumber", "clearingNumber", "type" ]
      },
      "SGLocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 4- to 19-digit bank account number, without separators or whitespace.",
            "maxLength" : 19,
            "minLength" : 4
          },
          "bic" : {
            "type" : "string",
            "description" : "The bank's 8- or 11-character BIC or SWIFT code.",
            "maxLength" : 11,
            "minLength" : 8
          },
          "type" : {
            "type" : "string",
            "default" : "sgLocal",
            "description" : "**sgLocal**",
            "enum" : [ "sgLocal" ]
          }
        },
        "required" : [ "accountNumber", "bic" ]
      },
      "SameAmountRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "boolean"
          }
        },
        "required" : [ "operation" ]
      },
      "SameCounterpartyRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "boolean"
          }
        },
        "required" : [ "operation" ]
      },
      "SearchRegisteredDevicesResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "Contains a list of registered SCA devices and their corresponding details.",
            "items" : {
              "$ref" : "#/components/schemas/Device"
            }
          },
          "itemsTotal" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total amount of registered SCA devices that match the query parameters."
          },
          "link" : {
            "$ref" : "#/components/schemas/Link",
            "description" : "Contains links to the list pages."
          },
          "pagesTotal" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The total amount of list pages."
          }
        }
      },
      "SourceAccountTypesRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "description" : "The list of source account types to be evaluated.",
            "items" : {
              "type" : "string",
              "enum" : [ "balanceAccount", "businessAccount" ]
            }
          }
        },
        "required" : [ "operation" ]
      },
      "StringMatch" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "The type of string matching operation. Possible values:  **startsWith**, **endsWith**, **isEqualTo**, **contains**,",
            "enum" : [ "contains", "endsWith", "isEqualTo", "startsWith" ]
          },
          "value" : {
            "type" : "string",
            "description" : "The string to be matched."
          }
        }
      },
      "SweepConfigurationV2" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "category" : {
            "type" : "string",
            "description" : "The type of transfer that results from the sweep.\n\nPossible values:\n\n - **bank**: Sweep to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).\n\n- **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.\n\nRequired when setting `priorities`.",
            "enum" : [ "bank", "internal", "platformPayment" ],
            "x-addedInVersion" : "2"
          },
          "counterparty" : {
            "$ref" : "#/components/schemas/SweepCounterparty",
            "description" : "The destination or the source of the funds, depending on the sweep `type`.\n\nEither a `balanceAccountId`, `transferInstrumentId`, or `merchantAccount` is required."
          },
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.\n\nThe sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances)."
          },
          "description" : {
            "type" : "string",
            "description" : "The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.\n\nIf the message is longer after replacing placeholders, the message will be cut off at 140 characters."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the sweep.",
            "readOnly" : true
          },
          "priorities" : {
            "type" : "array",
            "description" : "The list of priorities for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. You can provide multiple priorities, ordered by your preference. Adyen will try to pay out using the priorities in the given order. If the first priority is not currently supported or enabled for your platform, the system will try the next one, and so on.\n\nThe request will be accepted as long as **at least one** of the provided priorities is valid (i.e., supported by Adyen and activated for your platform). For example, if you provide `[\"wire\",\"regular\"]`, and `wire` is not supported but `regular` is, the request will still be accepted and processed.\n\nPossible values:\n\n* **regular**: for normal, low-value transactions.\n\n* **fast**: a faster way to transfer funds, but the fees are higher. Recommended for high-priority, low-value transactions.\n\n* **wire**: the fastest way to transfer funds, but this has the highest fees. Recommended for high-priority, high-value transactions.\n\n* **instant**: for instant funds transfers in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).\n\n* **crossBorder**: for high-value transfers to a recipient in a different country.\n\n* **internal**: for transfers to an Adyen-issued business bank account (by bank account number/IBAN).\n\nSet `category` to **bank**. For more details, see optional priorities setup for [marketplaces](https://docs.adyen.com/marketplaces/payout-to-users/scheduled-payouts#optional-priorities-setup) or [platforms](https://docs.adyen.com/platforms/payout-to-users/scheduled-payouts#optional-priorities-setup).",
            "items" : {
              "type" : "string",
              "enum" : [ "crossBorder", "fast", "instant", "internal", "regular", "wire" ]
            },
            "x-addedInVersion" : "2"
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for disabling the sweep.",
            "enum" : [ "accountHierarchyNotActive", "amountLimitExceeded", "approved", "balanceAccountTemporarilyBlockedByTransactionRule", "counterpartyAccountBlocked", "counterpartyAccountClosed", "counterpartyAccountNotFound", "counterpartyAddressRequired", "counterpartyBankTimedOut", "counterpartyBankUnavailable", "declined", "declinedByTransactionRule", "directDebitNotSupported", "error", "notEnoughBalance", "pending", "pendingApproval", "pendingExecution", "refusedByCounterpartyBank", "refusedByCustomer", "routeNotFound", "scaFailed", "transferInstrumentDoesNotExist", "unknown" ],
            "readOnly" : true
          },
          "reasonDetail" : {
            "type" : "string",
            "description" : "The human readable reason for disabling the sweep.",
            "readOnly" : true
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the sweep configuration.",
            "maxLength" : 80
          },
          "referenceForBeneficiary" : {
            "type" : "string",
            "description" : "The reference sent to or received from the counterparty. Only alphanumeric characters are allowed.",
            "maxLength" : 80
          },
          "schedule" : {
            "$ref" : "#/components/schemas/SweepSchedule",
            "description" : "The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the sweep. If not provided, by default, this is set to **active**.\n\nPossible values: \n\n * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration. \n\n * **inactive**: the sweep is disabled and cannot be triggered. \n\n",
            "enum" : [ "active", "inactive" ]
          },
          "sweepAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both."
          },
          "targetAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both."
          },
          "triggerAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.\n\n* For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.\n\n* For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account."
          },
          "type" : {
            "type" : "string",
            "default" : "push",
            "description" : "The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.\n\nPossible values:\n\n * **push**: _push out funds_ to a destination balance account or transfer instrument.\n\n * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.",
            "enum" : [ "pull", "push" ]
          }
        },
        "required" : [ "counterparty", "currency", "id", "schedule" ]
      },
      "SweepCounterparty" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balanceAccountId" : {
            "type" : "string",
            "description" : "The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).\n\n > If you are updating the counterparty from a transfer instrument to a balance account, set `transferInstrumentId` to **null**."
          },
          "merchantAccount" : {
            "type" : "string",
            "description" : "The merchant account that will be the source of funds.\n\nYou can only use this parameter with sweeps of `type` **pull** and if you are processing payments with Adyen."
          },
          "transferInstrumentId" : {
            "type" : "string",
            "description" : "The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/legalentity/latest/post/transferInstruments#responses-200-id) depending on the sweep `type`\n\n. To set up automated top-up sweeps to balance accounts in your [marketplace](https://docs.adyen.com/marketplaces/top-up-balance-account/#before-you-begin) or [platform](https://docs.adyen.com/platforms/top-up-balance-account/#before-you-begin), use this parameter in combination with a `merchantAccount` and a sweep `type` of **pull**.\n\nTop-up sweeps start a direct debit request from the source transfer instrument. Contact Adyen Support to enable this feature.> If you are updating the counterparty from a balance account to a transfer instrument, set `balanceAccountId` to **null**."
          }
        }
      },
      "SweepSchedule" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "cronExpression" : {
            "type" : "string",
            "description" : "A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. \nFor example, **30 17 * * MON** schedules a sweep every Monday at 17:30.\n\nThe expression must have five values separated by a single space in the following order:\n\n* Minute: **0-59**\n\n* Hour: **0-23**\n\n* Day of the month: **1-31**\n\n* Month: **1-12** or **JAN-DEC**\n\n* Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.\n\nThe following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and **/**. See [crontab guru](https://crontab.guru/) for more examples.\n\nRequired when `type` is **cron**.\n"
          },
          "type" : {
            "type" : "string",
            "description" : "The schedule type.\n\nPossible values:\n\n* **cron**: push out funds based on a `cronExpression`.\n\n* **daily**: push out funds daily at 07:00 AM CET.\n\n* **weekly**: push out funds every Monday at 07:00 AM CET.\n\n* **monthly**: push out funds every first of the month at 07:00 AM CET.\n\n* **balance**: execute the sweep instantly if the `triggerAmount` is reached.\n",
            "enum" : [ "daily", "weekly", "monthly", "balance", "cron" ]
          }
        },
        "required" : [ "type" ]
      },
      "ThresholdRepayment" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "amount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount to be repaid on a 30-day basis."
          }
        },
        "required" : [ "amount" ]
      },
      "TimeOfDay" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "endTime" : {
            "type" : "string",
            "description" : "The end time in a time-only ISO-8601 extended offset format. For example: **08:00:00+02:00**, **22:30:00-03:00**.\n\n"
          },
          "startTime" : {
            "type" : "string",
            "description" : "The start time in a time-only ISO-8601 extended offset format. For example: **08:00:00+02:00**, **22:30:00-03:00**.\n\n"
          }
        }
      },
      "TimeOfDayRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "$ref" : "#/components/schemas/TimeOfDay"
          }
        },
        "required" : [ "operation" ]
      },
      "TokenRequestorsRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "operation" ]
      },
      "TotalAmountRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount value and currency."
          }
        },
        "required" : [ "operation" ]
      },
      "TransactionRule" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "aggregationLevel" : {
            "type" : "string",
            "description" : "The level at which data must be accumulated, used in rules with `type` **velocity** or **maxUsage**. The level must be the [same or lower in hierarchy](https://docs.adyen.com/issuing/transaction-rules#accumulate-data) than the `entityKey`.\n\nIf not provided, by default, the rule will accumulate data at the **paymentInstrument** level.\n\nPossible values: **paymentInstrument**, **paymentInstrumentGroup**, **balanceAccount**, **accountHolder**, **balancePlatform**.",
            "x-addedInVersion" : "2"
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the transaction rule.",
            "maxLength" : 300
          },
          "endDate" : {
            "type" : "string",
            "description" : "The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided, the rule will be evaluated until the rule status is set to **inactive**."
          },
          "entityKey" : {
            "$ref" : "#/components/schemas/TransactionRuleEntityKey",
            "description" : "The type and unique identifier of the resource to which the rule applies.",
            "x-addedInVersion" : "2"
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the transaction rule."
          },
          "interval" : {
            "$ref" : "#/components/schemas/TransactionRuleInterval",
            "description" : "The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) when the rule conditions apply."
          },
          "outcomeType" : {
            "type" : "string",
            "description" : "The [outcome](https://docs.adyen.com/issuing/transaction-rules#outcome) that will be applied when a transaction meets the conditions of the rule.\n\nPossible values:\n* **hardBlock**: the transaction is declined.\n* **scoreBased**: the transaction is assigned the `score` you specified. Adyen calculates the total score and if it exceeds 100, the transaction is declined.\n\nDefault value: **hardBlock**.\n\n> **scoreBased** is not allowed when `requestType` is **bankTransfer**.",
            "enum" : [ "enforceSCA", "hardBlock", "scoreBased", "timedBlock" ],
            "x-addedInVersion" : "2"
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the transaction rule.",
            "maxLength" : 150
          },
          "requestType" : {
            "type" : "string",
            "description" : "Indicates the type of request to which the rule applies. If not provided, by default, this is set to **authorization**.\n\nPossible values: **authorization**, **authentication**, **tokenization**, **bankTransfer**.",
            "enum" : [ "authentication", "authorization", "bankTransfer", "tokenization" ],
            "x-addedInVersion" : "2"
          },
          "ruleRestrictions" : {
            "$ref" : "#/components/schemas/TransactionRuleRestrictions",
            "description" : "Contains one or more objects that define the [rule conditions](https://docs.adyen.com/issuing/transaction-rules#conditions). Each object must have a value and an operation which determines how the values must be evaluated.\n\nFor example, a `countries` object can have a list of country codes **[\"US\", \"CA\"]** in the `value` field and **anyMatch** in the `operation` field.",
            "x-addedInVersion" : "2"
          },
          "score" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "A positive or negative score applied to the transaction if it meets the conditions of the rule. Required when `outcomeType` is **scoreBased**.  The value must be between **-100** and **100**.",
            "x-addedInVersion" : "2"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**. \n\n"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created \nwith an **active** status. \n\nPossible values: **active**, **inactive**.",
            "enum" : [ "active", "inactive" ]
          },
          "type" : {
            "type" : "string",
            "description" : "The [type of rule](https://docs.adyen.com/issuing/transaction-rules#rule-types), which defines if a rule blocks transactions based on individual characteristics or accumulates data.\n\nPossible values:\n * **blockList**: decline a transaction when the conditions are met.\n * **maxUsage**: add the amount or number of transactions for the lifetime of a payment instrument, and then decline a transaction when the specified limits are met.\n * **velocity**: add the amount or number of transactions based on a specified time interval, and then decline a transaction when the specified limits are met.\n",
            "enum" : [ "allowList", "blockList", "maxUsage", "velocity" ]
          }
        },
        "required" : [ "description", "entityKey", "interval", "reference", "ruleRestrictions", "type" ]
      },
      "TransactionRuleEntityKey" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "entityReference" : {
            "type" : "string",
            "description" : "The unique identifier of the resource."
          },
          "entityType" : {
            "type" : "string",
            "description" : "The type of resource.\n\nPossible values: **balancePlatform**, **paymentInstrumentGroup**, **accountHolder**, **balanceAccount**, or **paymentInstrument**."
          }
        }
      },
      "TransactionRuleInfo" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "aggregationLevel" : {
            "type" : "string",
            "description" : "The level at which data must be accumulated, used in rules with `type` **velocity** or **maxUsage**. The level must be the [same or lower in hierarchy](https://docs.adyen.com/issuing/transaction-rules#accumulate-data) than the `entityKey`.\n\nIf not provided, by default, the rule will accumulate data at the **paymentInstrument** level.\n\nPossible values: **paymentInstrument**, **paymentInstrumentGroup**, **balanceAccount**, **accountHolder**, **balancePlatform**.",
            "x-addedInVersion" : "2"
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the transaction rule.",
            "maxLength" : 300
          },
          "endDate" : {
            "type" : "string",
            "description" : "The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided, the rule will be evaluated until the rule status is set to **inactive**."
          },
          "entityKey" : {
            "$ref" : "#/components/schemas/TransactionRuleEntityKey",
            "description" : "The type and unique identifier of the resource to which the rule applies.",
            "x-addedInVersion" : "2"
          },
          "interval" : {
            "$ref" : "#/components/schemas/TransactionRuleInterval",
            "description" : "The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) when the rule conditions apply."
          },
          "outcomeType" : {
            "type" : "string",
            "description" : "The [outcome](https://docs.adyen.com/issuing/transaction-rules#outcome) that will be applied when a transaction meets the conditions of the rule.\n\nPossible values:\n* **hardBlock**: the transaction is declined.\n* **scoreBased**: the transaction is assigned the `score` you specified. Adyen calculates the total score and if it exceeds 100, the transaction is declined.\n\nDefault value: **hardBlock**.\n\n> **scoreBased** is not allowed when `requestType` is **bankTransfer**.",
            "enum" : [ "enforceSCA", "hardBlock", "scoreBased", "timedBlock" ],
            "x-addedInVersion" : "2"
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the transaction rule.",
            "maxLength" : 150
          },
          "requestType" : {
            "type" : "string",
            "description" : "Indicates the type of request to which the rule applies. If not provided, by default, this is set to **authorization**.\n\nPossible values: **authorization**, **authentication**, **tokenization**, **bankTransfer**.",
            "enum" : [ "authentication", "authorization", "bankTransfer", "tokenization" ],
            "x-addedInVersion" : "2"
          },
          "ruleRestrictions" : {
            "$ref" : "#/components/schemas/TransactionRuleRestrictions",
            "description" : "Contains one or more objects that define the [rule conditions](https://docs.adyen.com/issuing/transaction-rules#conditions). Each object must have a value and an operation which determines how the values must be evaluated.\n\nFor example, a `countries` object can have a list of country codes **[\"US\", \"CA\"]** in the `value` field and **anyMatch** in the `operation` field.",
            "x-addedInVersion" : "2"
          },
          "score" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "A positive or negative score applied to the transaction if it meets the conditions of the rule. Required when `outcomeType` is **scoreBased**.  The value must be between **-100** and **100**.",
            "x-addedInVersion" : "2"
          },
          "startDate" : {
            "type" : "string",
            "description" : "The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**. \n\n"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created \nwith an **active** status. \n\nPossible values: **active**, **inactive**.",
            "enum" : [ "active", "inactive" ]
          },
          "type" : {
            "type" : "string",
            "description" : "The [type of rule](https://docs.adyen.com/issuing/transaction-rules#rule-types), which defines if a rule blocks transactions based on individual characteristics or accumulates data.\n\nPossible values:\n * **blockList**: decline a transaction when the conditions are met.\n * **maxUsage**: add the amount or number of transactions for the lifetime of a payment instrument, and then decline a transaction when the specified limits are met.\n * **velocity**: add the amount or number of transactions based on a specified time interval, and then decline a transaction when the specified limits are met.\n",
            "enum" : [ "allowList", "blockList", "maxUsage", "velocity" ]
          }
        },
        "required" : [ "description", "entityKey", "interval", "reference", "ruleRestrictions", "type" ]
      },
      "TransactionRuleInterval" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "dayOfMonth" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The day of month, used when the `duration.unit` is **months**. If not provided, by default, this is set to **1**, the first day of the month.",
            "x-addedInVersion" : "2"
          },
          "dayOfWeek" : {
            "type" : "string",
            "description" : "The day of week, used when the `duration.unit` is **weeks**. If not provided, by default, this is set to **monday**.\n\nPossible values: **sunday**, **monday**, **tuesday**, **wednesday**, **thursday**, **friday**.",
            "enum" : [ "friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday" ],
            "x-addedInVersion" : "2"
          },
          "duration" : {
            "$ref" : "#/components/schemas/Duration",
            "description" : "The duration, which you can specify in hours, days, weeks, or months. The maximum duration is 90 days or an equivalent in other units. Required when the `type` is **rolling** or **sliding**.",
            "x-addedInVersion" : "2"
          },
          "timeOfDay" : {
            "type" : "string",
            "description" : "The time of day, in **hh:mm:ss** format, used when the `duration.unit` is **hours**. If not provided, by default, this is set to **00:00:00**.",
            "x-addedInVersion" : "2"
          },
          "timeZone" : {
            "type" : "string",
            "description" : "The [time zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For example, **Europe/Amsterdam**. By default, this is set to **UTC**.",
            "x-addedInVersion" : "2"
          },
          "type" : {
            "type" : "string",
            "description" : "The [type of interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) during which the rule conditions and limits apply, and how often counters are reset.\n\nPossible values:\n  * **perTransaction**: conditions are evaluated and the counters are reset for every transaction.\n * **daily**: the counters are reset daily at 00:00:00 CET.\n * **weekly**: the counters are reset every Monday at 00:00:00 CET. \n * **monthly**: the counters reset every first day of the month at 00:00:00 CET. \n * **lifetime**: conditions are applied to the lifetime of the payment instrument.\n * **rolling**: conditions are applied and the counters are reset based on a `duration`. If the reset date and time are not provided, Adyen applies the default reset time similar to fixed intervals. For example, if the duration is every two weeks, the counter resets every third Monday at 00:00:00 CET.\n * **sliding**: conditions are applied and the counters are reset based on the current time and a `duration` that you specify.",
            "enum" : [ "daily", "lifetime", "monthly", "perTransaction", "rolling", "sliding", "weekly" ]
          }
        },
        "required" : [ "type" ]
      },
      "TransactionRuleResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "transactionRule" : {
            "$ref" : "#/components/schemas/TransactionRule",
            "description" : "The transaction rule."
          }
        }
      },
      "TransactionRuleRestrictions" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "activeNetworkTokens" : {
            "$ref" : "#/components/schemas/ActiveNetworkTokensRestriction",
            "description" : "The total number of tokens that a card can have across different kinds of digital wallets on the user's phones, watches, or other wearables.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**."
          },
          "brandVariants" : {
            "$ref" : "#/components/schemas/BrandVariantsRestriction",
            "description" : "List of card brand variants and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**."
          },
          "counterpartyBank" : {
            "$ref" : "#/components/schemas/CounterpartyBankRestriction",
            "description" : "Contains a list of counterparty financial institutions and how they must be evaluated.\n\nSupported operations: **anyMatch**, **noneMatch**."
          },
          "counterpartyTypes" : {
            "$ref" : "#/components/schemas/CounterpartyTypesRestriction",
            "description" : "Contains a list of counterparty types and how they must be evaluated.\n\nSupported operations: **anyMatch**, **noneMatch**.\n\nSupported value inputs:\n- **balanceAccount**\n- **bankAccount**\n- **card**\n- **transferInstrument**"
          },
          "countries" : {
            "$ref" : "#/components/schemas/CountriesRestriction",
            "description" : "List of countries and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**."
          },
          "dayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeekRestriction",
            "description" : "List of week days and the operation. Supported operations: **anyMatch**, **noneMatch**."
          },
          "differentCurrencies" : {
            "$ref" : "#/components/schemas/DifferentCurrenciesRestriction",
            "description" : "Compares the currency of the payment against the currency of the payment instrument, and specifies the operation.\n\nSupported operations: **equals**, **notEquals**."
          },
          "entryModes" : {
            "$ref" : "#/components/schemas/EntryModesRestriction",
            "description" : "List of point-of-sale entry modes and the operation..\n\nSupported operations: **anyMatch**, **noneMatch**."
          },
          "internationalTransaction" : {
            "$ref" : "#/components/schemas/InternationalTransactionRestriction",
            "description" : "Indicates whether transaction is an international transaction and specifies the operation.\n\nSupported operations: **equals**, **notEquals**."
          },
          "matchingTransactions" : {
            "$ref" : "#/components/schemas/MatchingTransactionsRestriction",
            "description" : "The number of transactions and the operation.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**."
          },
          "matchingValues" : {
            "$ref" : "#/components/schemas/MatchingValuesRestriction",
            "description" : "Checks if a user has recently made multiple transfers with the specified values.\n\nTo use this restriction, you must:\n\n- Set the rule `type` to **velocity**.\n\n- Specify a time `interval`.\n\n- Specify a number of `matchingTransactions`.\n\nSupported operation: **allMatch**.\n\nSupported value inputs:\n- **merchantId** and **acquirerId**\n- **amount** and **currency**\n- **merchantName**."
          },
          "mccs" : {
            "$ref" : "#/components/schemas/MccsRestriction",
            "description" : "List of merchant category codes (MCCs) and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**."
          },
          "merchantNames" : {
            "$ref" : "#/components/schemas/MerchantNamesRestriction",
            "description" : "List of names that will be compared to the merchant name according to the matching type.\n\nSupported operations: **anyMatch**, **noneMatch**."
          },
          "merchants" : {
            "$ref" : "#/components/schemas/MerchantsRestriction",
            "description" : "List of merchant ID and acquirer ID pairs, and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**."
          },
          "processingTypes" : {
            "$ref" : "#/components/schemas/ProcessingTypesRestriction",
            "description" : "List of processing types and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**."
          },
          "riskScores" : {
            "$ref" : "#/components/schemas/RiskScoresRestriction",
            "description" : "Risk scores provided by specific sources. The same operation applies to all scores.\n\nCurrent sources available: **visa**, **mastercard**\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**."
          },
          "sameAmountRestriction" : {
            "$ref" : "#/components/schemas/SameAmountRestriction",
            "description" : "Checks if a user has recently sent the same amount of funds in multiple transfers.\n\nTo use this restriction, you must:\n\n- Set the rule `type` to **velocity**.\n\n- Specify a time `interval`.\n\n- Specify a number of `matchingTransactions`.\n\nSupported operation: **equals**."
          },
          "sameCounterpartyRestriction" : {
            "$ref" : "#/components/schemas/SameCounterpartyRestriction",
            "description" : "Checks if a user has recently made multiple transfers to the same counterparty.\n\nTo use this restriction, you must:\n\n- Set the rule `type` to **velocity**.\n\n- Specify a time `interval`.\n\n- Specify a number of `matchingTransactions`.\n\nSupported operations: **equals**."
          },
          "sourceAccountTypes" : {
            "$ref" : "#/components/schemas/SourceAccountTypesRestriction",
            "description" : "Contains a list of source account types and how they must be evaluated.\n\nSupported operations: **anyMatch**, **noneMatch**.\n\nSupported value inputs:\n- **balanceAccount**\n- **businessAccount**."
          },
          "timeOfDay" : {
            "$ref" : "#/components/schemas/TimeOfDayRestriction",
            "description" : "A start and end time in a time-only ISO-8601 extended offset format. Supported operations: **equals**, **notEquals**."
          },
          "tokenRequestors" : {
            "$ref" : "#/components/schemas/TokenRequestorsRestriction",
            "description" : "List of token requestor IDs and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**."
          },
          "totalAmount" : {
            "$ref" : "#/components/schemas/TotalAmountRestriction",
            "description" : "The total amount and the operation.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**."
          },
          "walletProviderAccountScore" : {
            "$ref" : "#/components/schemas/WalletProviderAccountScoreRestriction",
            "description" : "Checks the wallet account score.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**."
          },
          "walletProviderDeviceScore" : {
            "$ref" : "#/components/schemas/WalletProviderDeviceScore",
            "description" : "Wallet Provider Device Score and the operation.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**."
          }
        }
      },
      "TransactionRulesResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "transactionRules" : {
            "type" : "array",
            "description" : "List of transaction rules.",
            "items" : {
              "$ref" : "#/components/schemas/TransactionRule"
            }
          }
        }
      },
      "TransferRoute" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "category" : {
            "type" : "string",
            "description" : " The type of transfer.\n\n Possible values:\n\n  - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.\n",
            "enum" : [ "bank", "card", "grants", "internal", "issuedCard", "migration", "platformPayment", "topUp", "upgrade" ]
          },
          "country" : {
            "type" : "string",
            "description" : "The two-character ISO-3166-1 alpha-2 country code of the counterparty. For example, **US** or **NL**."
          },
          "currency" : {
            "type" : "string",
            "description" : "The three-character ISO currency code of transfer. For example, **USD** or **EUR**."
          },
          "priority" : {
            "type" : "string",
            "description" : "The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Possible values:\n\n* **regular**: for normal, low-value transactions.\n\n* **fast**: a faster way to transfer funds, but the fees are higher. Recommended for high-priority, low-value transactions.\n\n* **wire**: the fastest way to transfer funds, but this has the highest fees. Recommended for high-priority, high-value transactions.\n\n* **instant**: for instant funds transfers in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).\n\n* **crossBorder**: for high-value transfers to a recipient in a different country.\n\n* **internal**: for transfers to an Adyen-issued business bank account (by bank account number/IBAN).",
            "enum" : [ "crossBorder", "fast", "instant", "internal", "regular", "wire" ]
          },
          "requirements" : {
            "type" : "array",
            "description" : "A set of rules defined by clearing houses and banking partners. Your transfer request must adhere to these rules to ensure successful initiation of transfer. Based on the priority, one or more requirements may be returned. Each requirement is defined with a `type` and `description`.",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/AddressRequirement"
              }, {
                "$ref" : "#/components/schemas/AmountMinMaxRequirement"
              }, {
                "$ref" : "#/components/schemas/AmountNonZeroDecimalsRequirement"
              }, {
                "$ref" : "#/components/schemas/BankAccountIdentificationTypeRequirement"
              }, {
                "$ref" : "#/components/schemas/IbanAccountIdentificationRequirement"
              }, {
                "$ref" : "#/components/schemas/PaymentInstrumentRequirement"
              }, {
                "$ref" : "#/components/schemas/USInstantPayoutAddressRequirement"
              }, {
                "$ref" : "#/components/schemas/USInternationalAchAddressRequirement"
              } ]
            }
          }
        }
      },
      "TransferRouteRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "balanceAccountId" : {
            "type" : "string",
            "description" : "The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).\nRequired if `counterparty` is **transferInstrumentId**."
          },
          "balancePlatform" : {
            "type" : "string",
            "description" : "The unique identifier assigned to the balance platform associated with the account holder."
          },
          "category" : {
            "type" : "string",
            "description" : " The type of transfer. Possible values:\n\n  - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.\n",
            "enum" : [ "bank" ]
          },
          "counterparty" : {
            "$ref" : "#/components/schemas/Counterparty",
            "description" : "The recipient of the funds transfer. A bank account or a transfer instrument."
          },
          "country" : {
            "type" : "string",
            "description" : "The two-character ISO-3166-1 alpha-2 country code of the counterparty. For example, **US** or **NL**.\n > Either `counterparty` or `country` field must be provided in a transfer route request."
          },
          "currency" : {
            "type" : "string",
            "description" : "The three-character ISO currency code of transfer. For example, **USD** or **EUR**."
          },
          "priorities" : {
            "type" : "array",
            "description" : "The list of priorities for the bank transfer. Priorities set the speed at which the transfer is sent and the fees that you have to pay. Multiple values can be provided.\nPossible values:\n\n* **regular**: for normal, low-value transactions.\n\n* **fast**: a faster way to transfer funds, but the fees are higher. Recommended for high-priority, low-value transactions.\n\n* **wire**: the fastest way to transfer funds, but this has the highest fees. Recommended for high-priority, high-value transactions.\n\n* **instant**: for instant funds transfers in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).\n\n* **crossBorder**: for high-value transfers to a recipient in a different country.\n\n* **internal**: for transfers to an Adyen-issued business bank account (by bank account number/IBAN).",
            "items" : {
              "type" : "string",
              "enum" : [ "crossBorder", "fast", "instant", "internal", "regular", "wire" ]
            }
          }
        },
        "required" : [ "balancePlatform", "category", "currency" ]
      },
      "TransferRouteResponse" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "transferRoutes" : {
            "type" : "array",
            "description" : "List of available priorities for a transfer, along with requirements. Use this information to initiate a transfer.",
            "items" : {
              "$ref" : "#/components/schemas/TransferRoute"
            }
          }
        }
      },
      "UKLocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The 8-digit bank account number, without separators or whitespace.",
            "maxLength" : 8,
            "minLength" : 8
          },
          "sortCode" : {
            "type" : "string",
            "description" : "The 6-digit [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace.",
            "maxLength" : 6,
            "minLength" : 6
          },
          "type" : {
            "type" : "string",
            "default" : "ukLocal",
            "description" : "**ukLocal**",
            "enum" : [ "ukLocal" ]
          }
        },
        "required" : [ "accountNumber", "sortCode", "type" ]
      },
      "USInstantPayoutAddressRequirement" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Specifies that you must provide complete street addresses for the party and counterParty for transactions greater than USD 3000."
          },
          "type" : {
            "type" : "string",
            "default" : "usInstantPayoutAddressRequirement",
            "description" : "**usInstantPayoutAddressRequirement**",
            "enum" : [ "usInstantPayoutAddressRequirement" ]
          }
        },
        "required" : [ "type" ]
      },
      "USInternationalAchAddressRequirement" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Specifies that you must provide a complete street address for International ACH (IAT) transactions."
          },
          "type" : {
            "type" : "string",
            "default" : "usInternationalAchAddressRequirement",
            "description" : "**usInternationalAchAddressRequirement**",
            "enum" : [ "usInternationalAchAddressRequirement" ]
          }
        },
        "required" : [ "type" ]
      },
      "USLocalAccountIdentification" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "accountNumber" : {
            "type" : "string",
            "description" : "The bank account number, without separators or whitespace.",
            "maxLength" : 18,
            "minLength" : 2
          },
          "accountType" : {
            "type" : "string",
            "default" : "checking",
            "description" : "The bank account type.\n\nPossible values: **checking** or **savings**. Defaults to **checking**.",
            "enum" : [ "checking", "savings" ]
          },
          "routingNumber" : {
            "type" : "string",
            "description" : "The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.",
            "maxLength" : 9,
            "minLength" : 9
          },
          "type" : {
            "type" : "string",
            "default" : "usLocal",
            "description" : "**usLocal**",
            "enum" : [ "usLocal" ]
          }
        },
        "required" : [ "accountNumber", "routingNumber", "type" ]
      },
      "UpdateNetworkTokenRequest" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "The new status of the network token. Possible values: **active**, **suspended**, **closed**. The **closed** status is final and cannot be changed.",
            "enum" : [ "active", "suspended", "closed" ]
          }
        }
      },
      "UpdatePaymentInstrument" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "additionalBankAccountIdentifications" : {
            "type" : "array",
            "deprecated" : true,
            "description" : "Contains optional, additional business account details. Returned when you create a payment instrument with `type` **bankAccount**.",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/IbanAccountIdentification"
              } ]
            },
            "x-deprecatedInVersion" : "2",
            "x-deprecatedMessage" : "Please use `bankAccount` object instead"
          },
          "balanceAccountId" : {
            "type" : "string",
            "description" : "The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument."
          },
          "bankAccount" : {
            "$ref" : "#/components/schemas/BankAccountDetails",
            "description" : "Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**."
          },
          "card" : {
            "$ref" : "#/components/schemas/Card",
            "description" : "Contains information about the card payment instrument. Returned when you create a payment instrument with `type` **card**."
          },
          "description" : {
            "type" : "string",
            "description" : "Your description for the payment instrument, maximum 300 characters.",
            "maxLength" : 300
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument."
          },
          "issuingCountryCode" : {
            "type" : "string",
            "description" : "The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**."
          },
          "paymentInstrumentGroupId" : {
            "type" : "string",
            "description" : "The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs."
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the payment instrument, maximum 150 characters.",
            "maxLength" : 150
          },
          "replacedById" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument that replaced this payment instrument."
          },
          "replacementOfId" : {
            "type" : "string",
            "description" : "The unique identifier of the payment instrument that is replaced by this payment instrument."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n",
            "enum" : [ "active", "closed", "inactive", "suspended" ]
          },
          "statusComment" : {
            "type" : "string",
            "description" : "Comment for the status of the payment instrument.\n\nRequired if `statusReason` is **other**.",
            "x-addedInVersion" : "2"
          },
          "statusReason" : {
            "type" : "string",
            "description" : "The reason for the status of the payment instrument.\n\nPossible values: **accountClosure**, **damaged**, **endOfLife**, **expired**, **lost**, **stolen**, **suspectedFraud**, **transactionRule**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.",
            "enum" : [ "accountClosure", "damaged", "endOfLife", "expired", "lost", "other", "stolen", "suspectedFraud", "transactionRule" ],
            "x-addedInVersion" : "2"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of payment instrument.\n\nPossible values: **card**, **bankAccount**.",
            "enum" : [ "bankAccount", "card" ]
          }
        },
        "required" : [ "balanceAccountId", "id", "issuingCountryCode", "type" ]
      },
      "UpdateSweepConfigurationV2" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "category" : {
            "type" : "string",
            "description" : "The type of transfer that results from the sweep.\n\nPossible values:\n\n - **bank**: Sweep to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).\n\n- **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.\n\nRequired when setting `priorities`.",
            "enum" : [ "bank", "internal", "platformPayment" ],
            "x-addedInVersion" : "2"
          },
          "counterparty" : {
            "$ref" : "#/components/schemas/SweepCounterparty",
            "description" : "The destination or the source of the funds, depending on the sweep `type`.\n\nEither a `balanceAccountId`, `transferInstrumentId`, or `merchantAccount` is required."
          },
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.\n\nThe sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances)."
          },
          "description" : {
            "type" : "string",
            "description" : "The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.\n\nIf the message is longer after replacing placeholders, the message will be cut off at 140 characters."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the sweep.",
            "readOnly" : true
          },
          "priorities" : {
            "type" : "array",
            "description" : "The list of priorities for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. You can provide multiple priorities, ordered by your preference. Adyen will try to pay out using the priorities in the given order. If the first priority is not currently supported or enabled for your platform, the system will try the next one, and so on.\n\nThe request will be accepted as long as **at least one** of the provided priorities is valid (i.e., supported by Adyen and activated for your platform). For example, if you provide `[\"wire\",\"regular\"]`, and `wire` is not supported but `regular` is, the request will still be accepted and processed.\n\nPossible values:\n\n* **regular**: for normal, low-value transactions.\n\n* **fast**: a faster way to transfer funds, but the fees are higher. Recommended for high-priority, low-value transactions.\n\n* **wire**: the fastest way to transfer funds, but this has the highest fees. Recommended for high-priority, high-value transactions.\n\n* **instant**: for instant funds transfers in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).\n\n* **crossBorder**: for high-value transfers to a recipient in a different country.\n\n* **internal**: for transfers to an Adyen-issued business bank account (by bank account number/IBAN).\n\nSet `category` to **bank**. For more details, see optional priorities setup for [marketplaces](https://docs.adyen.com/marketplaces/payout-to-users/scheduled-payouts#optional-priorities-setup) or [platforms](https://docs.adyen.com/platforms/payout-to-users/scheduled-payouts#optional-priorities-setup).",
            "items" : {
              "type" : "string",
              "enum" : [ "crossBorder", "fast", "instant", "internal", "regular", "wire" ]
            },
            "x-addedInVersion" : "2"
          },
          "reason" : {
            "type" : "string",
            "description" : "The reason for disabling the sweep.",
            "enum" : [ "accountHierarchyNotActive", "amountLimitExceeded", "approved", "balanceAccountTemporarilyBlockedByTransactionRule", "counterpartyAccountBlocked", "counterpartyAccountClosed", "counterpartyAccountNotFound", "counterpartyAddressRequired", "counterpartyBankTimedOut", "counterpartyBankUnavailable", "declined", "declinedByTransactionRule", "directDebitNotSupported", "error", "notEnoughBalance", "pending", "pendingApproval", "pendingExecution", "refusedByCounterpartyBank", "refusedByCustomer", "routeNotFound", "scaFailed", "transferInstrumentDoesNotExist", "unknown" ],
            "readOnly" : true
          },
          "reasonDetail" : {
            "type" : "string",
            "description" : "The human readable reason for disabling the sweep.",
            "readOnly" : true
          },
          "reference" : {
            "type" : "string",
            "description" : "Your reference for the sweep configuration.",
            "maxLength" : 80
          },
          "referenceForBeneficiary" : {
            "type" : "string",
            "description" : "The reference sent to or received from the counterparty. Only alphanumeric characters are allowed.",
            "maxLength" : 80
          },
          "schedule" : {
            "$ref" : "#/components/schemas/SweepSchedule",
            "description" : "The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the sweep. If not provided, by default, this is set to **active**.\n\nPossible values: \n\n * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration. \n\n * **inactive**: the sweep is disabled and cannot be triggered. \n\n",
            "enum" : [ "active", "inactive" ]
          },
          "sweepAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both."
          },
          "targetAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both."
          },
          "triggerAmount" : {
            "$ref" : "#/components/schemas/Amount",
            "description" : "The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.\n\n* For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.\n\n* For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account."
          },
          "type" : {
            "type" : "string",
            "default" : "push",
            "description" : "The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.\n\nPossible values:\n\n * **push**: _push out funds_ to a destination balance account or transfer instrument.\n\n * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.",
            "enum" : [ "pull", "push" ]
          }
        }
      },
      "VerificationDeadline" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "capabilities" : {
            "type" : "array",
            "description" : "The names of the capabilities to be disallowed.",
            "items" : {
              "type" : "string",
              "enum" : [ "acceptExternalFunding", "acceptPspFunding", "acceptTransactionInRestrictedCountries", "acceptTransactionInRestrictedCountriesCommercial", "acceptTransactionInRestrictedCountriesConsumer", "acceptTransactionInRestrictedIndustries", "acceptTransactionInRestrictedIndustriesCommercial", "acceptTransactionInRestrictedIndustriesConsumer", "acquiring", "atmWithdrawal", "atmWithdrawalCommercial", "atmWithdrawalConsumer", "atmWithdrawalInRestrictedCountries", "atmWithdrawalInRestrictedCountriesCommercial", "atmWithdrawalInRestrictedCountriesConsumer", "authorisedPaymentInstrumentUser", "getGrantOffers", "issueBankAccount", "issueCard", "issueCardCommercial", "issueCardConsumer", "issueChargeCard", "issueChargeCardCommercial", "issueCreditLimit", "localAcceptance", "payout", "payoutToTransferInstrument", "processing", "receiveFromBalanceAccount", "receiveFromPlatformPayments", "receiveFromThirdParty", "receiveFromTransferInstrument", "receiveGrants", "receivePayments", "sendToBalanceAccount", "sendToThirdParty", "sendToTransferInstrument", "thirdPartyFunding", "useCard", "useCardCommercial", "useCardConsumer", "useCardInRestrictedCountries", "useCardInRestrictedCountriesCommercial", "useCardInRestrictedCountriesConsumer", "useCardInRestrictedIndustries", "useCardInRestrictedIndustriesCommercial", "useCardInRestrictedIndustriesConsumer", "useChargeCard", "useChargeCardCommercial", "withdrawFromAtm", "withdrawFromAtmCommercial", "withdrawFromAtmConsumer", "withdrawFromAtmInRestrictedCountries", "withdrawFromAtmInRestrictedCountriesCommercial", "withdrawFromAtmInRestrictedCountriesConsumer" ]
            },
            "readOnly" : true
          },
          "entityIds" : {
            "type" : "array",
            "description" : "The unique identifiers of the bank account(s) that the deadline applies to",
            "items" : {
              "type" : "string"
            },
            "readOnly" : true
          },
          "expiresAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date that verification is due by before capabilities are disallowed.",
            "readOnly" : true
          }
        },
        "required" : [ "capabilities", "expiresAt" ]
      },
      "VerificationError" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "capabilities" : {
            "type" : "array",
            "description" : "Contains the capabilities that the verification error applies to.",
            "items" : {
              "type" : "string",
              "enum" : [ "acceptExternalFunding", "acceptPspFunding", "acceptTransactionInRestrictedCountries", "acceptTransactionInRestrictedCountriesCommercial", "acceptTransactionInRestrictedCountriesConsumer", "acceptTransactionInRestrictedIndustries", "acceptTransactionInRestrictedIndustriesCommercial", "acceptTransactionInRestrictedIndustriesConsumer", "acquiring", "atmWithdrawal", "atmWithdrawalCommercial", "atmWithdrawalConsumer", "atmWithdrawalInRestrictedCountries", "atmWithdrawalInRestrictedCountriesCommercial", "atmWithdrawalInRestrictedCountriesConsumer", "authorisedPaymentInstrumentUser", "getGrantOffers", "issueBankAccount", "issueCard", "issueCardCommercial", "issueCardConsumer", "issueChargeCard", "issueChargeCardCommercial", "issueCreditLimit", "localAcceptance", "payout", "payoutToTransferInstrument", "processing", "receiveFromBalanceAccount", "receiveFromPlatformPayments", "receiveFromThirdParty", "receiveFromTransferInstrument", "receiveGrants", "receivePayments", "sendToBalanceAccount", "sendToThirdParty", "sendToTransferInstrument", "thirdPartyFunding", "useCard", "useCardCommercial", "useCardConsumer", "useCardInRestrictedCountries", "useCardInRestrictedCountriesCommercial", "useCardInRestrictedCountriesConsumer", "useCardInRestrictedIndustries", "useCardInRestrictedIndustriesCommercial", "useCardInRestrictedIndustriesConsumer", "useChargeCard", "useChargeCardCommercial", "withdrawFromAtm", "withdrawFromAtmCommercial", "withdrawFromAtmConsumer", "withdrawFromAtmInRestrictedCountries", "withdrawFromAtmInRestrictedCountriesCommercial", "withdrawFromAtmInRestrictedCountriesConsumer" ]
            }
          },
          "code" : {
            "type" : "string",
            "description" : "The verification error code."
          },
          "message" : {
            "type" : "string",
            "description" : "A description of the error."
          },
          "remediatingActions" : {
            "type" : "array",
            "description" : "Contains the actions that you can take to resolve the verification error.",
            "items" : {
              "$ref" : "#/components/schemas/RemediatingAction"
            }
          },
          "subErrors" : {
            "type" : "array",
            "description" : "Contains more granular information about the verification error.",
            "items" : {
              "$ref" : "#/components/schemas/VerificationError-recursive"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The type of error.\n\n Possible values: **invalidInput**, **dataMissing**.",
            "enum" : [ "dataMissing", "invalidInput", "pendingStatus" ]
          }
        }
      },
      "VerificationError-recursive" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "capabilities" : {
            "type" : "array",
            "description" : "Contains the capabilities that the verification error applies to.",
            "items" : {
              "type" : "string",
              "enum" : [ "acceptExternalFunding", "acceptPspFunding", "acceptTransactionInRestrictedCountries", "acceptTransactionInRestrictedCountriesCommercial", "acceptTransactionInRestrictedCountriesConsumer", "acceptTransactionInRestrictedIndustries", "acceptTransactionInRestrictedIndustriesCommercial", "acceptTransactionInRestrictedIndustriesConsumer", "acquiring", "atmWithdrawal", "atmWithdrawalCommercial", "atmWithdrawalConsumer", "atmWithdrawalInRestrictedCountries", "atmWithdrawalInRestrictedCountriesCommercial", "atmWithdrawalInRestrictedCountriesConsumer", "authorisedPaymentInstrumentUser", "getGrantOffers", "issueBankAccount", "issueCard", "issueCardCommercial", "issueCardConsumer", "issueChargeCard", "issueChargeCardCommercial", "issueCreditLimit", "localAcceptance", "payout", "payoutToTransferInstrument", "processing", "receiveFromBalanceAccount", "receiveFromPlatformPayments", "receiveFromThirdParty", "receiveFromTransferInstrument", "receiveGrants", "receivePayments", "sendToBalanceAccount", "sendToThirdParty", "sendToTransferInstrument", "thirdPartyFunding", "useCard", "useCardCommercial", "useCardConsumer", "useCardInRestrictedCountries", "useCardInRestrictedCountriesCommercial", "useCardInRestrictedCountriesConsumer", "useCardInRestrictedIndustries", "useCardInRestrictedIndustriesCommercial", "useCardInRestrictedIndustriesConsumer", "useChargeCard", "useChargeCardCommercial", "withdrawFromAtm", "withdrawFromAtmCommercial", "withdrawFromAtmConsumer", "withdrawFromAtmInRestrictedCountries", "withdrawFromAtmInRestrictedCountriesCommercial", "withdrawFromAtmInRestrictedCountriesConsumer" ]
            }
          },
          "code" : {
            "type" : "string",
            "description" : "The verification error code."
          },
          "message" : {
            "type" : "string",
            "description" : "A description of the error."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of error.\n\n Possible values: **invalidInput**, **dataMissing**.",
            "enum" : [ "dataMissing", "invalidInput", "pendingStatus" ]
          },
          "remediatingActions" : {
            "type" : "array",
            "description" : "Contains the actions that you can take to resolve the verification error.",
            "items" : {
              "$ref" : "#/components/schemas/RemediatingAction"
            }
          }
        }
      },
      "WalletProviderAccountScoreRestriction" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "operation" ]
      },
      "WalletProviderDeviceScore" : {
        "type" : "object",
        "additionalProperties" : false,
        "properties" : {
          "operation" : {
            "type" : "string",
            "description" : "Defines how the condition must be evaluated."
          },
          "value" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "operation" ]
      },
      "BalanceWebhookSettingInfo" : {
        "type" : "object",
        "properties" : {
          "conditions" : {
            "type" : "array",
            "description" : "The array of conditions a balance change must meet for Adyen to send the webhook.",
            "items" : {
              "$ref" : "#/components/schemas/Condition"
            },
            "maxItems" : 20,
            "minItems" : 0
          },
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the webhook setting. Possible values:\n\n* **active**: You receive a balance webhook if any of the conditions in this setting are met.\n* **inactive**: You do not receive a balance webhook even if the conditions in this settings are met.",
            "enum" : [ "active", "inactive" ]
          },
          "target" : {
            "$ref" : "#/components/schemas/Target",
            "description" : "The type and ID of the resource about whose balance changes you want to be notified."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the webhook you are configuring. Set to **balance**.",
            "enum" : [ "balance" ]
          }
        },
        "required" : [ "currency", "status", "target", "type" ]
      },
      "Condition" : {
        "type" : "object",
        "properties" : {
          "balanceType" : {
            "type" : "string",
            "description" : "Define the type of balance about which you want to get notified. Possible values:\n\n* **available**: the balance available for use.\n\n* **balance**: the sum of transactions that have already been settled.\n\n* **pending**: the sum of transactions that will be settled in the future.\n\n* **reserved**: the balance currently held in reserve.",
            "enum" : [ "balance", "available", "pending", "reserved" ]
          },
          "conditionType" : {
            "type" : "string",
            "description" : "Define when you want to get notified about a balance change. Possible values:\n\n* **greaterThan**: the balance in the account(s) exceeds the specified `value`.\n\n* **greaterThanOrEqual**: the balance in the account(s) reaches or exceeds the specified `value`.\n\n* **lessThan**: the balance in the account(s) drops below the specified `value`.\n\n* **lessThanOrEqual**: the balance in the account(s) reaches to drops below the specified `value`.",
            "enum" : [ "greaterThan", "greaterThanOrEqual", "lessThan", "lessThanOrEqual" ]
          },
          "value" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The value limit in the specified balance type and currency, in minor units."
          }
        },
        "required" : [ "balanceType", "conditionType", "value" ]
      },
      "SettingStatus" : {
        "type" : "string",
        "x-extensible-enum" : [ "active", "inactive" ]
      },
      "Target" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the `target.type`. This can be the ID of your:\n\n* balance platform\n* account holder\n* account holder's balance account"
          },
          "type" : {
            "type" : "string",
            "description" : "The resource for which you want to receive notifications. Possible values:\n\n* **balancePlatform**: receive notifications about balance changes in your entire balance platform.\n\n* **accountHolder**: receive notifications about balance changes of a specific user.\n\n* **balanceAccount**: receive notifications about balance changes in a specific balance account.",
            "enum" : [ "balanceAccount", "accountHolder", "balancePlatform" ]
          }
        },
        "required" : [ "id", "type" ]
      },
      "BalanceWebhookSetting" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/WebhookSetting"
        }, {
          "type" : "object",
          "properties" : {
            "conditions" : {
              "type" : "array",
              "description" : "The list of settings and criteria for triggering the [balance webhook](https://docs.adyen.com/api-explorer/balance-webhooks/latest/post/balanceAccount.balance.updated).",
              "items" : {
                "$ref" : "#/components/schemas/Condition"
              }
            }
          }
        } ],
        "required" : [ "currency", "id", "status", "target", "type" ]
      },
      "SettingType" : {
        "type" : "string",
        "enum" : [ "balance" ]
      },
      "WebhookSetting" : {
        "type" : "object",
        "discriminator" : {
          "propertyName" : "type",
          "mapping" : {
            "balance" : "#/components/schemas/BalanceWebhookSetting"
          }
        },
        "properties" : {
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the webhook setting."
          },
          "status" : {
            "$ref" : "#/components/schemas/SettingStatus",
            "description" : "The status of the webhook setting. Possible values:\n\n* **active**: You receive a balance webhook if any of the conditions in this setting are met.\n* **inactive**: You do not receive a balance webhook even if the conditions in this settings are met."
          },
          "target" : {
            "$ref" : "#/components/schemas/Target",
            "description" : "The resource about whose balance change you want to get notified."
          },
          "type" : {
            "$ref" : "#/components/schemas/SettingType",
            "description" : "The type of the webhook setting."
          }
        },
        "required" : [ "currency", "id", "status", "target", "type" ]
      },
      "DefaultErrorResponseEntity" : {
        "type" : "object",
        "description" : "Standardized error response following RFC-7807 format",
        "externalDocs" : {
          "url" : "https://www.rfc-editor.org/rfc/rfc7807"
        },
        "properties" : {
          "detail" : {
            "type" : "string",
            "description" : "A human-readable explanation specific to this occurrence of the problem."
          },
          "errorCode" : {
            "type" : "string",
            "description" : "Unique business error code."
          },
          "instance" : {
            "type" : "string",
            "description" : "A URI that identifies the specific occurrence of the problem if applicable."
          },
          "invalidFields" : {
            "type" : "array",
            "description" : "Array of fields with validation errors when applicable.",
            "items" : {
              "$ref" : "#/components/schemas/InvalidField"
            }
          },
          "requestId" : {
            "type" : "string",
            "description" : "The unique reference for the request."
          },
          "status" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The HTTP status code."
          },
          "title" : {
            "type" : "string",
            "description" : "A short, human-readable summary of the problem type."
          },
          "type" : {
            "type" : "string",
            "description" : "A URI that identifies the validation error type. It points to human-readable documentation for the problem type."
          }
        }
      },
      "WebhookSettings" : {
        "type" : "object",
        "properties" : {
          "webhookSettings" : {
            "type" : "array",
            "description" : "The list of webhook settings.",
            "items" : {
              "$ref" : "#/components/schemas/WebhookSetting"
            }
          }
        }
      },
      "BalanceWebhookSettingInfoUpdate" : {
        "type" : "object",
        "properties" : {
          "conditions" : {
            "type" : [ "array", "null" ],
            "description" : "The array of conditions a balance change must meet for Adyen to send the webhook.",
            "items" : {
              "$ref" : "#/components/schemas/Condition"
            },
            "maxItems" : 20,
            "minItems" : 0
          },
          "currency" : {
            "type" : "string",
            "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the webhook setting. Possible values:\n\n* **active**: You receive a balance webhook if any of the conditions in this setting are met.\n* **inactive**: You do not receive a balance webhook even if the conditions in this settings are met.",
            "enum" : [ "active", "inactive" ]
          },
          "target" : {
            "$ref" : "#/components/schemas/TargetUpdate",
            "description" : "The type and ID of the resource about whose balance changes you want to be notified."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the webhook you are configuring. Set to **balance**.",
            "enum" : [ "balance" ]
          }
        }
      },
      "TargetUpdate" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the `target.type`. This can be the ID of your:\n\n* balance platform\n* account holder\n* account holder's balance account"
          },
          "type" : {
            "type" : "string",
            "description" : "The resource for which you want to receive notifications. Possible values:\n\n* **balancePlatform**: receive notifications about balance changes in your entire balance platform.\n\n* **accountHolder**: receive notifications about balance changes of a specific user.\n\n* **balanceAccount**: receive notifications about balance changes in a specific balance account.",
            "enum" : [ "balanceAccount", "accountHolder", "balancePlatform" ]
          }
        }
      }
    },
    "examples" : {
      "delete-transactionRules-transactionRuleId-success-200" : {
        "summary" : "Transaction rule deleted",
        "description" : "Example response for successfully deleting a transaction rule",
        "value" : {
          "aggregationLevel" : "paymentInstrument",
          "description" : "Up to 1000 EUR per card for the last 12 hours",
          "entityKey" : {
            "entityReference" : "PG3227C223222C5GXR3M5592Q",
            "entityType" : "paymentInstrumentGroup"
          },
          "interval" : {
            "duration" : {
              "unit" : "hours",
              "value" : 12
            },
            "timeZone" : "UTC",
            "type" : "sliding"
          },
          "outcomeType" : "hardBlock",
          "reference" : "myRule12345",
          "requestType" : "authorization",
          "ruleRestrictions" : {
            "totalAmount" : {
              "operation" : "greaterThan",
              "value" : {
                "currency" : "EUR",
                "value" : 100000
              }
            }
          },
          "type" : "velocity",
          "id" : "TR3227C223222C5GXT3DD5VCF"
        }
      },
      "generic-400" : {
        "summary" : "Response code - 400 Bad request",
        "value" : {
          "type" : "https://docs.adyen.com/errors/general/bad-request",
          "title" : "Bad request",
          "status" : 400,
          "detail" : "Empty input which would have resulted in a null result.",
          "errorCode" : "00_400"
        }
      },
      "generic-401" : {
        "summary" : "Response code - 401 Unauthorized",
        "value" : {
          "type" : "https://docs.adyen.com/errors/security/unauthorized",
          "title" : "Unauthorized",
          "status" : 401,
          "detail" : "Not authorized to access this service.",
          "errorCode" : "00_401"
        }
      },
      "generic-403" : {
        "summary" : "Response code - 403 Forbidden.",
        "value" : {
          "type" : "https://docs.adyen.com/errors/security/unauthorized",
          "title" : "Forbidden",
          "status" : 403,
          "detail" : "Not the right permission to access this service.",
          "errorCode" : "00_403"
        }
      },
      "generic-404" : {
        "summary" : "Response code 404 - Not found",
        "value" : {
          "type" : "https://docs.adyen.com/errors/general/not-found",
          "title" : "Not found",
          "status" : 404,
          "detail" : "Service not found.",
          "errorCode" : "00_404"
        }
      },
      "generic-422" : {
        "summary" : "Response code - 422 Unprocessable Entity.",
        "value" : {
          "type" : "https://docs.adyen.com/errors/general/invalid-field-value",
          "title" : "Invalid Payment Instrument information provided",
          "status" : 422,
          "detail" : "The balanceAccountId can only be changed when the status is Inactive or Requested",
          "requestId" : "1W1UI15PLVGC9V8O",
          "errorCode" : "30_031"
        }
      },
      "generic-500" : {
        "summary" : "Response code - 500 Internal Server Error",
        "value" : {
          "type" : "https://docs.adyen.com/errors/general/internal",
          "title" : "An internal error happened",
          "status" : 500,
          "detail" : "Unrecoverable error while trying to create payment instrument",
          "requestId" : "1WAF555PLWNTLYOQ",
          "errorCode" : "00_500"
        }
      },
      "generic-503" : {
        "summary" : "Response code - 503 Internal Server Error",
        "value" : {
          "type" : "https://docs.adyen.com/errors/general/processing-error",
          "title" : "Error processing request",
          "status" : 500,
          "detail" : "Error while determining the payment instrument workflow",
          "requestId" : "1W1UHY5O2CONU4R7",
          "errorCode" : "99_500"
        }
      },
      "get-accountHolders-id-balanceAccounts-success-200" : {
        "summary" : "List of balance accounts retrieved",
        "description" : "Example response when retrieving a list of balance accounts under an account holder",
        "value" : {
          "balanceAccounts" : [ {
            "accountHolderId" : "AH32272223222B5CTBMZT6W2V",
            "defaultCurrencyCode" : "EUR",
            "description" : "S. Hopper - Main Account",
            "reference" : "YOUR_REFERENCE-X173L",
            "timeZone" : "Europe/Amsterdam",
            "id" : "BA32272223222B5CTDNB66W2Z",
            "status" : "active"
          }, {
            "accountHolderId" : "AH32272223222B5CTBMZT6W2V",
            "defaultCurrencyCode" : "EUR",
            "description" : "S. Hopper - Main Account",
            "reference" : "YOUR_REFERENCE-X173L",
            "timeZone" : "Europe/Amsterdam",
            "id" : "BA32272223222B5CTDQPM6W2H",
            "status" : "active"
          }, {
            "accountHolderId" : "AH32272223222B5CTBMZT6W2V",
            "defaultCurrencyCode" : "EUR",
            "description" : "S. Hopper - Main Account",
            "reference" : "YOUR_REFERENCE-X173L",
            "timeZone" : "Europe/Amsterdam",
            "id" : "BA32272223222B5CVF5J63LMW",
            "status" : "active"
          } ],
          "hasNext" : true,
          "hasPrevious" : false
        }
      },
      "get-accountHolders-id-success-200" : {
        "summary" : "Account holder retrieved",
        "description" : "Example response when retrieving an account holder",
        "value" : {
          "balancePlatform" : "YOUR_BALANCE_PLATFORM",
          "description" : "Account holder used for international payments and payouts",
          "legalEntityId" : "LE322JV223222D5GG42KN6869",
          "reference" : "S.Eller-001",
          "capabilities" : {
            "receiveFromPlatformPayments" : {
              "enabled" : true,
              "requested" : true,
              "allowed" : false,
              "verificationStatus" : "pending"
            },
            "receiveFromBalanceAccount" : {
              "enabled" : true,
              "requested" : true,
              "allowed" : false,
              "verificationStatus" : "pending"
            },
            "sendToBalanceAccount" : {
              "enabled" : true,
              "requested" : true,
              "allowed" : false,
              "verificationStatus" : "pending"
            },
            "sendToTransferInstrument" : {
              "enabled" : true,
              "requested" : true,
              "allowed" : false,
              "transferInstruments" : [ {
                "enabled" : true,
                "requested" : true,
                "allowed" : false,
                "id" : "SE322KH223222F5GXZFNM3BGP",
                "verificationStatus" : "pending"
              } ],
              "verificationStatus" : "pending"
            }
          },
          "id" : "AH3227C223222C5GXQXF658WB",
          "status" : "active"
        }
      },
      "get-accountHolders-id-taxForms-success-200" : {
        "summary" : "Tax form retrieved for an account holder",
        "description" : "Example response when retrieving a tax form for an account holder",
        "value" : {
          "content" : "JVBERi0xLjcKJcfsj6IKJSVJbnZvY2F0aW9uOiBwYXRoL2dzd2luNjQuZXhlIC1kRGlzcGxh",
          "contentType" : "application/pdf"
        }
      },
      "get-balanceAccounts-balanceAccountId-sweeps-success-200" : {
        "summary" : "Sweeps under a balance account retrieved",
        "description" : "Example response when retrieving sweeps under a balance account",
        "value" : {
          "hasNext" : false,
          "hasPrevious" : false,
          "sweeps" : [ {
            "id" : "SWPC4227C224555B5FTD2NT2JV4WN5",
            "schedule" : {
              "type" : "daily"
            },
            "status" : "active",
            "targetAmount" : {
              "currency" : "EUR",
              "value" : 0
            },
            "triggerAmount" : {
              "currency" : "EUR",
              "value" : 0
            },
            "type" : "push",
            "counterparty" : {
              "balanceAccountId" : "BA32272223222B5FTD2KR6TJD"
            },
            "currency" : "EUR"
          } ]
        }
      },
      "get-balanceAccounts-balanceAccountId-sweeps-sweepId-success-200" : {
        "summary" : "Sweep retrieved",
        "description" : "Example response when retrieving a sweep",
        "value" : {
          "id" : "SWPC4227C224555B5FTD2NT2JV4WN5",
          "schedule" : {
            "type" : "daily"
          },
          "status" : "active",
          "targetAmount" : {
            "currency" : "EUR",
            "value" : 0
          },
          "triggerAmount" : {
            "currency" : "EUR",
            "value" : 0
          },
          "type" : "push",
          "counterparty" : {
            "balanceAccountId" : "BA32272223222B5FTD2KR6TJD"
          },
          "currency" : "EUR"
        }
      },
      "get-balanceAccounts-id-paymentInstruments-success-200" : {
        "summary" : "List of payment instruments retrieved",
        "description" : "Example response when retrieving a list of payment instruments under a balance account",
        "value" : {
          "hasNext" : true,
          "hasPrevious" : false,
          "paymentInstruments" : [ {
            "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
            "issuingCountryCode" : "GB",
            "status" : "active",
            "type" : "card",
            "card" : {
              "brand" : "mc",
              "brandVariant" : "mc",
              "cardholderName" : "name",
              "formFactor" : "virtual",
              "bin" : "555544",
              "expiration" : {
                "month" : "12",
                "year" : "2022"
              },
              "lastFour" : "2357",
              "number" : "************2357"
            },
            "id" : "PI32272223222B59M5TM658DT"
          }, {
            "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
            "issuingCountryCode" : "GB",
            "status" : "active",
            "type" : "card",
            "card" : {
              "brand" : "mc",
              "brandVariant" : "mc",
              "cardholderName" : "name",
              "formFactor" : "virtual",
              "bin" : "555544",
              "expiration" : {
                "month" : "01",
                "year" : "2023"
              },
              "lastFour" : "8331",
              "number" : "************8331"
            },
            "id" : "PI32272223222B59PXDGQDLSF"
          } ]
        }
      },
      "get-balanceAccounts-id-success-200" : {
        "summary" : "Balance account details retrieved",
        "description" : "Example response for retrieving a balance account",
        "value" : {
          "accountHolderId" : "AH32272223222B59K6RTQBFNZ",
          "defaultCurrencyCode" : "EUR",
          "timeZone" : "Europe/Amsterdam",
          "balances" : [ {
            "available" : 0,
            "balance" : 0,
            "currency" : "EUR",
            "reserved" : 0,
            "pending" : 0
          } ],
          "id" : "BA3227C223222B5BLP6JQC3FD",
          "status" : "active"
        }
      },
      "get-balancePlatforms-id-accountHolders-success-200" : {
        "summary" : "List of account holders retrieved",
        "description" : "Example response when retrieving a list of account holders under a balance platform",
        "value" : {
          "accountHolders" : [ {
            "description" : "Test-305",
            "legalEntityId" : "LE3227C223222D5D8S5S33M4M",
            "reference" : "LegalEntity internal error test",
            "id" : "AH32272223222B5GFSNSXFFL9",
            "status" : "active"
          }, {
            "description" : "Test-751",
            "legalEntityId" : "LE3227C223222D5D8S5TT3SRX",
            "reference" : "LegalEntity internal error test",
            "id" : "AH32272223222B5GFSNVGFFM7",
            "status" : "active"
          }, {
            "description" : "Explorer Holder",
            "legalEntityId" : "LE3227C223222D5D8S5TT3SRX",
            "reference" : "Account from the Explorer Holder",
            "id" : "AH32272223222B5GFWNRFFVR6",
            "status" : "active"
          } ],
          "hasNext" : true,
          "hasPrevious" : true
        }
      },
      "get-balancePlatforms-id-success-200" : {
        "summary" : "Balance platform retrieved",
        "description" : "Example response when retrieving a balance platform",
        "value" : {
          "id" : "YOUR_BALANCE_PLATFORM",
          "status" : "Active"
        }
      },
      "get-cardorders-id-items-success-200" : {
        "summary" : "Item list of a specific card order retrieved",
        "description" : "Example response for retrieving the item list of a specific card order",
        "value" : {
          "data" : [ {
            "card" : {
              "status" : "shipped"
            },
            "cardOrderItemId" : "UNIQUE_CARD_ORDER_ITEM_ID",
            "paymentInstrumentId" : "UNIQUE_PAYMENT_INSTRUMENT_ID",
            "pin" : {
              "status" : "produced"
            },
            "shippingMethod" : "Cardholder Post Basic National"
          } ],
          "hasNext" : false,
          "hasPrevious" : false
        }
      },
      "get-cardorders-success-200" : {
        "summary" : "List of card orders retrieved",
        "description" : "Example response for retrieving a paginated list of card orders",
        "value" : {
          "cardOrders" : [ {
            "beginDate" : "2022-12-05T00:00:00+01:00",
            "cardManufacturingProfileId" : "UNIQUE_CARD_MANUFACTURER_PROFILE_ID",
            "endDate" : "2022-12-06T00:00:00+01:00",
            "id" : "UNIQUE_CARD_ORDER_ID",
            "lockDate" : "2023-04-14T16:43:02+02:00",
            "serviceCenter" : "IDEMIA Sittard",
            "status" : "closed"
          } ],
          "hasNext" : true,
          "hasPrevious" : false
        }
      },
      "get-paymentInstrumentGroups-id-success-200" : {
        "summary" : "Payment instrument group retrieved",
        "description" : "Example response when retrieving a payment instrument group",
        "value" : {
          "balancePlatform" : "YOUR_BALANCE_PLATFORM",
          "txVariant" : "mc",
          "id" : "PG3227C223222B5CMD3FJFKGZ"
        }
      },
      "get-paymentInstrumentGroups-id-transactionRules-success-200" : {
        "summary" : "Transaction rules for a payment instrument group retrieved",
        "description" : "Example response when retrieving a list of transaction rules applied to a payment instrument group",
        "value" : {
          "transactionRules" : [ {
            "aggregationLevel" : "paymentInstrument",
            "description" : "Up to 1000 EUR per card for the last 12 hours",
            "entityKey" : {
              "entityReference" : "PG3227C223222C5GXR3M5592Q",
              "entityType" : "paymentInstrumentGroup"
            },
            "interval" : {
              "duration" : {
                "unit" : "hours",
                "value" : 12
              },
              "timeZone" : "UTC",
              "type" : "sliding"
            },
            "outcomeType" : "hardBlock",
            "reference" : "YOUR_REFERENCE_2918A",
            "requestType" : "authorization",
            "ruleRestrictions" : {
              "totalAmount" : {
                "operation" : "greaterThan",
                "value" : {
                  "currency" : "EUR",
                  "value" : 100000
                }
              }
            },
            "status" : "inactive",
            "type" : "velocity",
            "id" : "TR3227C223222C5GXR3XP596N"
          }, {
            "aggregationLevel" : "paymentInstrument",
            "description" : "NL only",
            "entityKey" : {
              "entityReference" : "PG3227C223222C5GXR3M5592Q",
              "entityType" : "paymentInstrumentGroup"
            },
            "interval" : {
              "duration" : {
                "unit" : "hours",
                "value" : 12
              },
              "timeZone" : "UTC",
              "type" : "sliding"
            },
            "outcomeType" : "hardBlock",
            "reference" : "myRule12345",
            "requestType" : "authorization",
            "ruleRestrictions" : {
              "totalAmount" : {
                "operation" : "greaterThan",
                "value" : {
                  "currency" : "EUR",
                  "value" : 100000
                }
              }
            },
            "status" : "inactive",
            "type" : "velocity",
            "id" : "TR3227C223222C5GXR3WC595H"
          } ]
        }
      },
      "get-paymentInstruments-id-reveal-success-200" : {
        "summary" : "Get the card's primary account number (PAN)",
        "description" : "Example response for getting the card PAN",
        "value" : {
          "cvc" : "123",
          "expiration" : {
            "month" : "02",
            "year" : "2026"
          },
          "pan" : "5555444411209883"
        }
      },
      "get-paymentInstruments-id-success-200" : {
        "summary" : "Payment instruments retrieved",
        "description" : "Example response for retrieving payment instruments associated with a balance account",
        "value" : {
          "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
          "description" : "S. Hopper - Main card",
          "issuingCountryCode" : "GB",
          "status" : "active",
          "type" : "card",
          "card" : {
            "brand" : "mc",
            "brandVariant" : "mcdebit",
            "cardholderName" : "Simon Hopper",
            "formFactor" : "virtual",
            "bin" : "555544",
            "expiration" : {
              "month" : "01",
              "year" : "2024"
            },
            "lastFour" : "3548",
            "number" : "************3548"
          },
          "id" : "PI32272223222B5CMD3MQ3HXX"
        }
      },
      "get-paymentInstruments-id-transactionRules-success-200" : {
        "summary" : "Transaction rules for a payment instrument retrieved",
        "description" : "Example response when retrieving a list of transaction rules applied to a payment instrument",
        "value" : {
          "transactionRules" : [ {
            "description" : "Only allow point-of-sale transactions",
            "entityKey" : {
              "entityReference" : "PI3227C223222B5FN65FN5NS9",
              "entityType" : "paymentInstrument"
            },
            "interval" : {
              "timeZone" : "UTC",
              "type" : "perTransaction"
            },
            "outcomeType" : "hardBlock",
            "reference" : "YOUR_REFERENCE_4F7346",
            "requestType" : "authorization",
            "ruleRestrictions" : {
              "processingTypes" : {
                "operation" : "noneMatch",
                "value" : [ "pos" ]
              }
            },
            "startDate" : "2022-08-02T16:07:00.851374+02:00",
            "status" : "active",
            "type" : "blockList",
            "id" : "TR32272223222B5GFSGFLFCHM"
          }, {
            "description" : "Set the maximum number of active network tokens to one for this card",
            "entityKey" : {
              "entityReference" : "PI3227C223222B5FN65FN5NS9",
              "entityType" : "paymentInstrument"
            },
            "interval" : {
              "timeZone" : "UTC",
              "type" : "perTransaction"
            },
            "outcomeType" : "hardBlock",
            "reference" : "myRule123",
            "requestType" : "authorization",
            "ruleRestrictions" : {
              "activeNetworkTokens" : {
                "operation" : "greaterThanOrEqualTo",
                "value" : 1
              }
            },
            "startDate" : "2022-10-03T14:48:28.999314+02:00",
            "status" : "active",
            "type" : "blockList",
            "id" : "TR32272223222C5GQJ93L7J8Z"
          } ]
        }
      },
      "get-publicKey-success-200" : {
        "summary" : "Response with public key",
        "value" : {
          "publicKey" : "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMII...",
          "publicKeyExpiryDate" : "2023-12-12"
        }
      },
      "get-transactionRules-transactionRuleId-success-200" : {
        "summary" : "Transaction rules retrieved",
        "description" : "Example response when retrieving a transaction rule",
        "value" : {
          "transactionRule" : {
            "description" : "Only allow point-of-sale transactions",
            "entityKey" : {
              "entityReference" : "PI3227C223222B5FN65FN5NS9",
              "entityType" : "paymentInstrument"
            },
            "interval" : {
              "timeZone" : "UTC",
              "type" : "perTransaction"
            },
            "outcomeType" : "hardBlock",
            "reference" : "YOUR_REFERENCE_4F7346",
            "requestType" : "authorization",
            "ruleRestrictions" : {
              "processingTypes" : {
                "operation" : "noneMatch",
                "value" : [ "pos" ]
              }
            },
            "startDate" : "2022-08-02T16:07:00.851374+02:00",
            "status" : "active",
            "type" : "blockList",
            "id" : "TR32272223222B5GFSGFLFCHM"
          }
        }
      },
      "patch-accountHolders-id-requestAccountHolderCapability" : {
        "summary" : "Request account holder capability",
        "description" : "Example request for the `receivePayments` capability for an account holder",
        "value" : {
          "description" : "Account holder used for international payments and payouts",
          "reference" : "S.Eller-001",
          "capabilities" : {
            "receivePayments" : {
              "requested" : true
            }
          }
        }
      },
      "patch-accountHolders-id-requestAccountHolderCapability-200" : {
        "summary" : "Account holder capability requested",
        "description" : "Example response for requesting the `receivePayments` capability for an account holder",
        "value" : {
          "balancePlatform" : "YOUR_BALANCE_PLATFORM",
          "description" : "Account holder used for international payments and payouts",
          "legalEntityId" : "LE322JV223222F5GKQZZ9DS99",
          "reference" : "S.Eller-001",
          "capabilities" : {
            "receivePayments" : {
              "enabled" : false,
              "requested" : true,
              "allowed" : false,
              "verificationStatus" : "pending"
            }
          },
          "id" : "AH3227C223222C5GKR23686TF",
          "status" : "active"
        }
      },
      "patch-accountHolders-id-updateAccountHolderStatus" : {
        "summary" : "Deactivate an account holder",
        "description" : "Example request for permanently deactivating an account holder",
        "value" : {
          "status" : "closed"
        }
      },
      "patch-accountHolders-id-updateAccountHolderStatus-200" : {
        "summary" : "Account holder deactivated",
        "description" : "Example response for permanently deactivating an account holder",
        "value" : {
          "balancePlatform" : "YOUR_BALANCE_PLATFORM",
          "description" : "Account holder used for international payments and payouts",
          "legalEntityId" : "LE322JV223222F5GKQZZ9DS99",
          "reference" : "S.Eller-001",
          "id" : "AH3227C223222C5GKR23686TF",
          "status" : "closed"
        }
      },
      "patch-balanceAccounts-balanceAccountId-sweeps-sweepId-updateSweep-status" : {
        "summary" : "Update the status of a sweep",
        "description" : "Example request for updating a sweep",
        "value" : {
          "status" : "inactive"
        }
      },
      "patch-balanceAccounts-balanceAccountId-sweeps-sweepId-updateSweep-status-200" : {
        "summary" : "Sweep status updated",
        "description" : "Example response for updating a sweep",
        "value" : {
          "id" : "SWPC4227C224555B5FTD2NT2JV4WN5",
          "counterparty" : {
            "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
          },
          "triggerAmount" : {
            "currency" : "EUR",
            "value" : 50000
          },
          "currency" : "EUR",
          "schedule" : {
            "type" : "balance"
          },
          "type" : "pull",
          "status" : "inactive"
        }
      },
      "patch-balanceAccounts-id-updateBalanceAccount" : {
        "summary" : "Update the time zone of a balance account",
        "description" : "Example request for updating a balance account",
        "value" : {
          "timeZone" : "Europe/Amsterdam"
        }
      },
      "patch-balanceAccounts-id-updateBalanceAccount-200" : {
        "summary" : "Time zone of a balance account updated",
        "description" : "Example response for updating a balance account",
        "value" : {
          "accountHolderId" : "AH32272223222B5GFSNVGFFM7",
          "defaultCurrencyCode" : "EUR",
          "timeZone" : "Europe/Amsterdam",
          "balances" : [ {
            "available" : 0,
            "balance" : 0,
            "currency" : "EUR",
            "reserved" : 0
          } ],
          "id" : "BA32272223222B59K6ZXHBFN6",
          "status" : "active"
        }
      },
      "patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount" : {
        "summary" : "Update the balance account linked to a payment instrument",
        "description" : "Example request for updating the balance account of a payment instrument",
        "value" : {
          "balanceAccountId" : "BA32272223222B5CM82WL892M"
        }
      },
      "patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount-200" : {
        "summary" : "Balance account updated",
        "description" : "Example response for updating the balance account linked to a payment instrument",
        "value" : {
          "balanceAccountId" : "BA32272223222B5CM82WL892M",
          "description" : "S. Hopper - Main card",
          "issuingCountryCode" : "GB",
          "status" : "inactive",
          "type" : "card",
          "card" : {
            "brand" : "mc",
            "brandVariant" : "mcdebit",
            "cardholderName" : "Simon Hopper",
            "formFactor" : "virtual",
            "bin" : "555544",
            "expiration" : {
              "month" : "01",
              "year" : "2024"
            },
            "lastFour" : "5785",
            "number" : "************5785"
          },
          "id" : "PI3227C223222B5CMD278FKGS"
        }
      },
      "patch-paymentInstruments-id-updatePaymentInstrumentStatus" : {
        "summary" : "Update the status of a payment instrument",
        "description" : "Example request for updating the status of a payment instrument",
        "value" : {
          "status" : "suspended"
        }
      },
      "patch-paymentInstruments-id-updatePaymentInstrumentStatus-200" : {
        "summary" : "Payment instrument status updated",
        "description" : "Example response for updating the status of a payment instrument",
        "value" : {
          "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
          "description" : "S. Hopper - Main card",
          "issuingCountryCode" : "GB",
          "status" : "suspended",
          "type" : "card",
          "card" : {
            "brand" : "mc",
            "brandVariant" : "mcdebit",
            "cardholderName" : "Simon Hopper",
            "formFactor" : "virtual",
            "bin" : "555544",
            "expiration" : {
              "month" : "01",
              "year" : "2024"
            },
            "lastFour" : "5785",
            "number" : "************5785"
          },
          "id" : "PI3227C223222B5CMD278FKGS"
        }
      },
      "patch-transactionRules-transactionRuleId-updateTransactionRuleStatus" : {
        "summary" : "Update the interval of transaction rule",
        "description" : "Example request for updating the interval of a transaction rule",
        "value" : {
          "description" : "Allow only point-of-sale transactions",
          "reference" : "YOUR_REFERENCE_4F7346",
          "entityKey" : {
            "entityType" : "paymentInstrument",
            "entityReference" : "PI3227C223222B5FG88SB8BHR"
          },
          "status" : "inactive",
          "interval" : {
            "type" : "weekly"
          },
          "ruleRestrictions" : {
            "processingTypes" : {
              "operation" : "noneMatch",
              "value" : [ "pos" ]
            }
          },
          "type" : "blockList"
        }
      },
      "patch-transactionRules-transactionRuleId-updateTransactionRuleStatus-200" : {
        "summary" : "Transaction rule status updated",
        "description" : "Example response for successfully updating the status of a transaction rule",
        "value" : {
          "aggregationLevel" : "paymentInstrument",
          "description" : "Up to 1000 EUR per card for the last 12 hours",
          "entityKey" : {
            "entityReference" : "PG3227C223222C5GXR3M5592Q",
            "entityType" : "paymentInstrumentGroup"
          },
          "interval" : {
            "duration" : {
              "unit" : "hours",
              "value" : 12
            },
            "timeZone" : "UTC",
            "type" : "sliding"
          },
          "outcomeType" : "hardBlock",
          "reference" : "YOUR_REFERENCE_2918A",
          "requestType" : "authorization",
          "ruleRestrictions" : {
            "totalAmount" : {
              "operation" : "greaterThan",
              "value" : {
                "currency" : "EUR",
                "value" : 100000
              }
            }
          },
          "startDate" : "2022-11-17T00:07:09.10057663+01:00",
          "status" : "inactive",
          "type" : "velocity",
          "id" : "TR3227C223222C5GXR3XP596N"
        }
      },
      "post-accountHolders-createAccountHolder" : {
        "summary" : "Create an account holder",
        "description" : "Example request for creating an account holder",
        "value" : {
          "description" : "Account holder used for international payments and payouts",
          "reference" : "S.Eller-001",
          "legalEntityId" : "LE322JV223222D5GG42KN6869"
        }
      },
      "post-accountHolders-createAccountHolder-200" : {
        "summary" : "Response for creating an account holder",
        "description" : "Example response for creating an account holder",
        "value" : {
          "balancePlatform" : "YOUR_BALANCE_PLATFORM",
          "description" : "Account holder used for international payments and payouts",
          "legalEntityId" : "LE322JV223222D5GG42KN6869",
          "reference" : "S.Eller-001",
          "capabilities" : {
            "receiveFromPlatformPayments" : {
              "enabled" : true,
              "requested" : true,
              "allowed" : false,
              "verificationStatus" : "pending"
            },
            "receiveFromBalanceAccount" : {
              "enabled" : true,
              "requested" : true,
              "allowed" : false,
              "verificationStatus" : "pending"
            },
            "sendToBalanceAccount" : {
              "enabled" : true,
              "requested" : true,
              "allowed" : false,
              "verificationStatus" : "pending"
            },
            "sendToTransferInstrument" : {
              "enabled" : true,
              "requested" : true,
              "allowed" : false,
              "requestedSettings" : {
                "interval" : "daily",
                "maxAmount" : {
                  "currency" : "EUR",
                  "value" : 0
                }
              },
              "verificationStatus" : "pending"
            }
          },
          "id" : "AH3227C223222H5J4DCLW9VBV",
          "status" : "active"
        }
      },
      "post-balanceAccounts-balanceAccountId-sweeps-createSweep-pull" : {
        "summary" : "Create a sweep to pull funds in to a balance account",
        "description" : "Example request for creating a pull sweep",
        "value" : {
          "counterparty" : {
            "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
          },
          "triggerAmount" : {
            "currency" : "EUR",
            "value" : 50000
          },
          "currency" : "EUR",
          "schedule" : {
            "type" : "balance"
          },
          "type" : "pull",
          "status" : "active"
        }
      },
      "post-balanceAccounts-balanceAccountId-sweeps-createSweep-pull-200" : {
        "summary" : "Sweep of pull type created",
        "description" : "Example response for creating a pull sweep",
        "value" : {
          "id" : "SWPC4227C224555B5FTD2NT2JV4WN5",
          "counterparty" : {
            "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
          },
          "triggerAmount" : {
            "currency" : "EUR",
            "value" : 50000
          },
          "currency" : "EUR",
          "schedule" : {
            "type" : "balance"
          },
          "type" : "pull",
          "status" : "active"
        }
      },
      "post-balanceAccounts-balanceAccountId-sweeps-createSweep-push" : {
        "summary" : "Create a sweep to push funds out of a balance account",
        "description" : "Example request for creating a push sweep",
        "value" : {
          "counterparty" : {
            "balanceAccountId" : "BA32278887611B5FTD2KR6TJD"
          },
          "triggerAmount" : {
            "currency" : "EUR",
            "value" : 50000
          },
          "currency" : "EUR",
          "schedule" : {
            "type" : "weekly"
          },
          "type" : "push",
          "status" : "active"
        }
      },
      "post-balanceAccounts-balanceAccountId-sweeps-createSweep-push-200" : {
        "summary" : "Sweep of push type created",
        "description" : "Example response for creating a push sweep",
        "value" : {
          "id" : "SWPC4227C224555B5FTD2NT2JV4WN5",
          "counterparty" : {
            "balanceAccountId" : "BA32278887611B5FTD2KR6TJD"
          },
          "triggerAmount" : {
            "currency" : "EUR",
            "value" : 50000
          },
          "currency" : "EUR",
          "schedule" : {
            "type" : "weekly"
          },
          "type" : "push",
          "status" : "active"
        }
      },
      "post-balanceAccounts-balanceAccountId-sweeps-createSweep-push-priorities" : {
        "summary" : "Create a sweep to push funds out of a balance account with set priorities",
        "description" : "Example request for creating a push sweep with priorities",
        "value" : {
          "counterparty" : {
            "transferInstrumentId" : "SE322JV223222J5HGLCGF2WDV"
          },
          "triggerAmount" : {
            "currency" : "EUR",
            "value" : 50000
          },
          "currency" : "EUR",
          "priorities" : [ "fast", "instant" ],
          "category" : "bank",
          "schedule" : {
            "type" : "weekly"
          },
          "type" : "push",
          "status" : "active"
        }
      },
      "post-balanceAccounts-balanceAccountId-sweeps-createSweep-push-priorities-200" : {
        "summary" : "Sweep of push type with priorities created",
        "description" : "Example response for creating a push sweep with priorities",
        "value" : {
          "id" : "SWPC4227C224555B5FTD2NT2JV4WN9",
          "counterparty" : {
            "transferInstrumentId" : "SE322JV223222J5HGLCGF2WDV"
          },
          "triggerAmount" : {
            "currency" : "EUR",
            "value" : 50000
          },
          "currency" : "EUR",
          "priorities" : [ "fast", "instant" ],
          "category" : "bank",
          "schedule" : {
            "type" : "weekly"
          },
          "type" : "push",
          "status" : "active"
        }
      },
      "post-balanceAccounts-createBalanceAccount" : {
        "summary" : "Create a balance account",
        "description" : "Example request for creating a balance account",
        "value" : {
          "accountHolderId" : "AH32272223222C5GXTD343TKP",
          "description" : "S.Hopper - Main balance account"
        }
      },
      "post-balanceAccounts-createBalanceAccount-200" : {
        "summary" : "Create a balance account",
        "description" : "Example request for creating a balance account",
        "value" : {
          "accountHolderId" : "AH32272223222C5GXTD343TKP",
          "defaultCurrencyCode" : "EUR",
          "description" : "S.Hopper - Main balance account",
          "timeZone" : "Europe/Amsterdam",
          "balances" : [ {
            "available" : 0,
            "balance" : 0,
            "currency" : "EUR",
            "reserved" : 0
          } ],
          "id" : "BA3227C223222H5J4DCGQ9V9L",
          "status" : "active"
        }
      },
      "post-balanceAccounts-createBalanceAccountCAD" : {
        "summary" : "Create a balance account - CAD default currency",
        "description" : "Example request for creating a balance account with CAD as the default currency.",
        "value" : {
          "accountHolderId" : "AH0000000000000000000001",
          "description" : "CAD Balance Account",
          "defaultCurrencyCode" : "CAD",
          "timeZone" : "America/Toronto"
        }
      },
      "post-balanceAccounts-createBalanceAccountCAD-200" : {
        "summary" : "Create a balance account - CAD default currency",
        "description" : "Example request for creating a balance account with CAD as the default currency.",
        "value" : {
          "accountHolderId" : "AH0000000000000000000001",
          "defaultCurrencyCode" : "CAD",
          "description" : "CAD Balance Account",
          "timeZone" : "America/Toronto",
          "balances" : [ {
            "available" : 0,
            "balance" : 0,
            "currency" : "CAD",
            "pending" : 0,
            "reserved" : 0
          } ],
          "id" : "BA0000000000000000000001",
          "status" : "active"
        }
      },
      "post-balanceAccounts-createBalanceAccountGBP" : {
        "summary" : "Create a balance account - GBP default currency",
        "description" : "Example request for creating a balance account with GBP as the default currency.",
        "value" : {
          "accountHolderId" : "AH0000000000000000000001",
          "description" : "GBP Balance Account",
          "defaultCurrencyCode" : "GBP",
          "timeZone" : "Europe/London"
        }
      },
      "post-balanceAccounts-createBalanceAccountGBP-200" : {
        "summary" : "Create a balance account - GBP default currency",
        "description" : "Example request for creating a balance account with GBP as the default currency.",
        "value" : {
          "accountHolderId" : "AH0000000000000000000001",
          "defaultCurrencyCode" : "GBP",
          "description" : "GBP Balance Account",
          "timeZone" : "Europe/London",
          "balances" : [ {
            "available" : 0,
            "balance" : 0,
            "currency" : "GBP",
            "pending" : 0,
            "reserved" : 0
          } ],
          "id" : "BA0000000000000000000001",
          "status" : "active"
        }
      },
      "post-balanceAccounts-createBalanceAccountUSD" : {
        "summary" : "Create a balance account - USD default currency",
        "description" : "Example request for creating a balance account with USD as the default currency.",
        "value" : {
          "accountHolderId" : "AH0000000000000000000001",
          "description" : "USD Balance Account",
          "defaultCurrencyCode" : "USD",
          "timeZone" : "America/Chicago"
        }
      },
      "post-balanceAccounts-createBalanceAccountUSD-200" : {
        "summary" : "Create a balance account - USD default currency",
        "description" : "Example request for creating a balance account with USD as the default currency.",
        "value" : {
          "accountHolderId" : "AH0000000000000000000001",
          "defaultCurrencyCode" : "USD",
          "description" : "USD Balance Account",
          "timeZone" : "America/Chicago",
          "balances" : [ {
            "available" : 0,
            "balance" : 0,
            "currency" : "USD",
            "pending" : 0,
            "reserved" : 0
          } ],
          "id" : "BA0000000000000000000001",
          "status" : "active"
        }
      },
      "post-paymentInstrumentGroups-createPaymentInstrumentGroups" : {
        "summary" : "Create a payment instrument group",
        "description" : "Example request for creating a payment instrument group",
        "value" : {
          "balancePlatform" : "YOUR_BALANCE_PLATFORM",
          "txVariant" : "mc"
        }
      },
      "post-paymentInstrumentGroups-createPaymentInstrumentGroups-200" : {
        "summary" : "Create a payment instrument group",
        "description" : "Example request for creating a payment instrument group",
        "value" : {
          "balancePlatform" : "YOUR_BALANCE_PLATFORM",
          "txVariant" : "mc",
          "id" : "PG32272223222H5J4DCRVC9DH"
        }
      },
      "post-paymentInstruments-createBusinessAccountNL" : {
        "summary" : "Create a business account in NL",
        "description" : "Example request for creating a business account in NL",
        "value" : {
          "type" : "bankAccount",
          "description" : "YOUR_DESCRIPTION",
          "balanceAccountId" : "BA3227C223222B5CTBLR8BWJB",
          "issuingCountryCode" : "NL"
        }
      },
      "post-paymentInstruments-createBusinessAccountNL-200" : {
        "summary" : "Business account in NL created",
        "description" : "Example response for creating a business account in NL",
        "value" : {
          "balanceAccountId" : "BA3227C223222B5CTBLR8BWJB",
          "issuingCountryCode" : "NL",
          "status" : "active",
          "type" : "bankAccount",
          "description" : "YOUR_DESCRIPTION",
          "bankAccount" : {
            "formFactor" : "physical",
            "type" : "iban",
            "iban" : "NL20ADYB2017000035"
          },
          "id" : "PI322LJ223222B5DJS7CD9LWL"
        }
      },
      "post-paymentInstruments-createBusinessAccountNL-DELocalIBAN" : {
        "summary" : "Create a local IBAN in DE (first create an NL business account)",
        "description" : "Example request for creating a local IBAN in DE",
        "value" : {
          "type" : "bankAccount",
          "description" : "YOUR_DESCRIPTION",
          "balanceAccountId" : "BA3227C223222B5CTBLR8BWJB",
          "issuingCountryCode" : "DE",
          "bankAccount" : {
            "formFactor" : "virtual"
          }
        }
      },
      "post-paymentInstruments-createBusinessAccountNL-DELocalIBAN-200" : {
        "summary" : "Virtual business account in DE (local IBAN) created",
        "description" : "Example response for creating a local IBAN business account in DE",
        "value" : {
          "balanceAccountId" : "BA3227C223222B5CTBLR8BWJB",
          "description" : "YOUR_DESCRIPTION",
          "issuingCountryCode" : "DE",
          "status" : "active",
          "type" : "bankAccount",
          "bankAccount" : {
            "type" : "iban",
            "iban" : "DE20100190002300001206",
            "formFactor" : "virtual"
          },
          "id" : "PI3227C223226C5JW49ZHBQMS"
        }
      },
      "post-paymentInstruments-createBusinessAccountNL-FRLocalIBAN" : {
        "summary" : "Create a local IBAN in FR (first create an NL business account)",
        "description" : "Example request for creating a local IBAN in FR",
        "value" : {
          "type" : "bankAccount",
          "description" : "YOUR_DESCRIPTION",
          "balanceAccountId" : "BA3227C223222B5CTBLR8BWJB",
          "issuingCountryCode" : "FR",
          "bankAccount" : {
            "formFactor" : "virtual"
          }
        }
      },
      "post-paymentInstruments-createBusinessAccountNL-FRLocalIBAN-200" : {
        "summary" : "Virtual business account in FR (local IBAN) created",
        "description" : "Example response for creating a local IBAN business account in FR",
        "value" : {
          "balanceAccountId" : "BA3227C223222B5CTBLR8BWJB",
          "description" : "YOUR_DESCRIPTION",
          "issuingCountryCode" : "FR",
          "status" : "active",
          "type" : "bankAccount",
          "bankAccount" : {
            "type" : "iban",
            "iban" : "FR7621733712350230000110741",
            "formFactor" : "virtual"
          },
          "id" : "PI3227C223226C5JW49ZAHSYD"
        }
      },
      "post-paymentInstruments-createBusinessAccountUK" : {
        "summary" : "Create a business account in the UK",
        "description" : "Example request for creating a business account in the UK",
        "value" : {
          "type" : "bankAccount",
          "description" : "YOUR_DESCRIPTION",
          "balanceAccountId" : "BA328R4223227F5KMH9NJB2S4",
          "issuingCountryCode" : "GB"
        }
      },
      "post-paymentInstruments-createBusinessAccountUK-200" : {
        "summary" : "Business account in the UK created",
        "description" : "Example response for creating a business account in the UK",
        "value" : {
          "balanceAccountId" : "BA328R4223227F5KMH9NJB2S4",
          "description" : "YOUR_DESCRIPTION",
          "issuingCountryCode" : "GB",
          "status" : "active",
          "type" : "bankAccount",
          "bankAccount" : {
            "accountNumber" : "20010731",
            "formFactor" : "physical",
            "iban" : "GB68ADYX04295720010731",
            "sortCode" : "042957",
            "type" : "ukLocal"
          },
          "id" : "PI328Q9223227F5KMH9P92MDG"
        }
      },
      "post-paymentInstruments-createBusinessAccountUS" : {
        "summary" : "Create a business account in the US",
        "description" : "Example request for creating a business account in the US",
        "value" : {
          "type" : "bankAccount",
          "description" : "YOUR_DESCRIPTION",
          "balanceAccountId" : "BA3227C223222B5CTBLR8BWJB",
          "issuingCountryCode" : "US"
        }
      },
      "post-paymentInstruments-createBusinessAccountUS-200" : {
        "summary" : "Business account in the US created",
        "description" : "Example response for creating a business account in the US",
        "value" : {
          "balanceAccountId" : "BA3227C223222B5CTBLR8BWJB",
          "issuingCountryCode" : "US",
          "status" : "active",
          "type" : "bankAccount",
          "description" : "YOUR_DESCRIPTION",
          "bankAccount" : {
            "accountNumber" : "333720756",
            "accountType" : "checking",
            "formFactor" : "physical",
            "routingNumber" : "210000210",
            "type" : "usLocal"
          },
          "id" : "PI322LJ223222B5DJS7CD9LWL"
        }
      },
      "post-paymentInstruments-createPhysicalCard" : {
        "summary" : "Create a physical card",
        "description" : "Example request for creating a physical card",
        "value" : {
          "type" : "card",
          "issuingCountryCode" : "NL",
          "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
          "description" : "S.Hopper - Main card",
          "status" : "inactive",
          "card" : {
            "formFactor" : "physical",
            "brand" : "mc",
            "brandVariant" : "mcdebit",
            "cardholderName" : "Sam Hopper",
            "deliveryContact" : {
              "address" : {
                "city" : "Amsterdam",
                "country" : "NL",
                "stateOrProvince" : "NH",
                "line1" : "Brannan Street",
                "line2" : "274",
                "postalCode" : "1020CD"
              },
              "name" : {
                "firstName" : "Sam",
                "lastName" : "Hopper"
              }
            },
            "configuration" : {
              "configurationProfileId" : "CP123AB45678C91ABCD2ABCDE"
            }
          }
        }
      },
      "post-paymentInstruments-createPhysicalCard-200" : {
        "summary" : "Physical card created",
        "description" : "Example response for creating a physical card",
        "value" : {
          "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
          "description" : "S. Hopper - Main card",
          "issuingCountryCode" : "NL",
          "status" : "inactive",
          "type" : "card",
          "card" : {
            "brand" : "mc",
            "brandVariant" : "mcdebit",
            "cardholderName" : "Sam Hopper",
            "formFactor" : "physical",
            "number" : "************5785",
            "bin" : "555544",
            "expiration" : {
              "month" : "08",
              "year" : "2024"
            },
            "lastFour" : "2765",
            "authentication" : {
              "password" : "******",
              "phone" : {
                "number" : "+123456789",
                "type" : "mobile"
              }
            },
            "deliveryContact" : {
              "address" : {
                "city" : "Amsterdam",
                "country" : "NL",
                "stateOrProvince" : "NH",
                "line1" : "Brannan Street",
                "line2" : "274",
                "postalCode" : "1020CD"
              },
              "name" : {
                "firstName" : "Sam",
                "lastName" : "Hopper"
              }
            },
            "configuration" : {
              "configurationProfileId" : "CP123AB45678C91ABCD2ABCDE"
            }
          },
          "id" : "PI3227C223222B5BPCMFXD2XG"
        }
      },
      "post-paymentInstruments-createVirtualCard" : {
        "summary" : "Create a virtual card",
        "description" : "Example request for creating a virtual card",
        "value" : {
          "type" : "card",
          "description" : "My test card",
          "balanceAccountId" : "BA3227C223222B5FG88S28BGN",
          "issuingCountryCode" : "NL",
          "card" : {
            "cardholderName" : "Simon Hopper",
            "brand" : "mc",
            "brandVariant" : "mcdebit",
            "formFactor" : "virtual"
          }
        }
      },
      "post-paymentInstruments-createVirtualCard-200" : {
        "summary" : "Virtual card created",
        "description" : "Example response for creating a virtual card",
        "value" : {
          "balanceAccountId" : "BA3227C223222B5FG88S28BGN",
          "description" : "My test card",
          "issuingCountryCode" : "NL",
          "status" : "active",
          "type" : "card",
          "card" : {
            "brand" : "mc",
            "brandVariant" : "mcdebit",
            "cardholderName" : "Simon Hopper",
            "formFactor" : "virtual",
            "bin" : "555544",
            "cvc" : "136",
            "expiration" : {
              "month" : "11",
              "year" : "2025"
            },
            "lastFour" : "3703",
            "number" : "5555444411213703"
          },
          "id" : "PI32272223222C5GXTDWH3TTN"
        }
      },
      "post-pins-change-requestPinChange" : {
        "summary" : "Request a PIN change",
        "value" : {
          "paymentInstrumentId" : "PI6789678967896789",
          "encryptedKey" : "75989E8881284D10153ABACF022EEA09F5...",
          "encryptedPinBlock" : "63E5060591EF65F48DD1D4FECD0FECD5",
          "token" : "5555341244441115"
        }
      },
      "post-pins-change-requestPinChange-200" : {
        "summary" : "Request completed",
        "value" : {
          "status" : "completed"
        }
      },
      "post-pins-reveal-requestPinBlock" : {
        "summary" : "Request a PIN block",
        "value" : {
          "paymentInstrumentId" : "PI3227C223222B5BPCMFXD2XG",
          "encryptedKey" : "75989E8881284D10153ABACF022EEA09F5..."
        }
      },
      "post-pins-reveal-requestPinBlock-200" : {
        "summary" : "Response with encrypted PIN block",
        "value" : {
          "encryptedPinBlock" : "63E5060591EF65F48DD1D4FECD0FECD5",
          "token" : "5555341244441115"
        }
      },
      "post-transactionRules-createTransactionRuleAllowPos" : {
        "summary" : "Allow only point-of-sale transactions",
        "description" : "Example request to allow only point-of-sale transactions",
        "value" : {
          "description" : "Allow only point-of-sale transactions",
          "reference" : "YOUR_REFERENCE_4F7346",
          "entityKey" : {
            "entityType" : "paymentInstrument",
            "entityReference" : "PI3227C223222B5FG88SB8BHR"
          },
          "status" : "active",
          "interval" : {
            "type" : "perTransaction"
          },
          "ruleRestrictions" : {
            "processingTypes" : {
              "operation" : "noneMatch",
              "value" : [ "pos" ]
            }
          },
          "type" : "blockList"
        }
      },
      "post-transactionRules-createTransactionRuleAllowPos-200" : {
        "summary" : "Transaction rule to allow only point-of-sale transactions",
        "description" : "Example response for allowing only point-of-sale transactions",
        "value" : {
          "description" : "Allow only point-of-sale transactions",
          "entityKey" : {
            "entityReference" : "PI3227C223222B5FG88SB8BHR",
            "entityType" : "paymentInstrument"
          },
          "interval" : {
            "timeZone" : "UTC",
            "type" : "perTransaction"
          },
          "outcomeType" : "hardBlock",
          "reference" : "YOUR_REFERENCE_4F7346",
          "requestType" : "authorization",
          "ruleRestrictions" : {
            "processingTypes" : {
              "operation" : "noneMatch",
              "value" : [ "pos" ]
            }
          },
          "startDate" : "2023-06-29T22:34:36.173226192+02:00",
          "status" : "active",
          "type" : "blockList",
          "id" : "TR3227C223222H5J4D9ML9V4D"
        }
      },
      "post-transactionRules-createTransactionRuleIncreaseScore" : {
        "summary" : "Increase the score of a card",
        "description" : "Example request to increase the score of a card",
        "value" : {
          "description" : "Assign score if more than 500 EUR in 2 hours",
          "entityKey" : {
            "entityType" : "paymentInstrument",
            "entityReference" : "PI3227C223222B5FG88SB8BHR"
          },
          "interval" : {
            "type" : "sliding",
            "duration" : {
              "value" : 2,
              "unit" : "hours"
            }
          },
          "outcomeType" : "scoreBased",
          "reference" : "myRule11789",
          "ruleRestrictions" : {
            "totalAmount" : {
              "operation" : "greaterThan",
              "value" : {
                "currency" : "EUR",
                "value" : 50000
              }
            }
          },
          "score" : 20,
          "type" : "velocity"
        }
      },
      "post-transactionRules-createTransactionRuleIncreaseScore-200" : {
        "summary" : "Transaction rule for increasing the score of a card",
        "description" : "Example response to increase the score of a card",
        "value" : {
          "description" : "Assign score if more than 500 EUR in 2 hours",
          "entityKey" : {
            "entityReference" : "PI3227C223222B5FG88SB8BHR",
            "entityType" : "paymentInstrument"
          },
          "interval" : {
            "duration" : {
              "unit" : "hours",
              "value" : 2
            },
            "timeZone" : "UTC",
            "type" : "sliding"
          },
          "outcomeType" : "scoreBased",
          "reference" : "myRule11789",
          "requestType" : "authorization",
          "ruleRestrictions" : {
            "totalAmount" : {
              "operation" : "greaterThan",
              "value" : {
                "currency" : "EUR",
                "value" : 50000
              }
            }
          },
          "score" : 20,
          "status" : "inactive",
          "type" : "velocity",
          "id" : "TR3227C223222H5J4D9S39V59"
        }
      },
      "post-transactionRules-createTransactionRuleLimitSliding" : {
        "summary" : "Limit total amount in the last 12 hours",
        "description" : "Example request to limit the total amount in a sliding interval",
        "value" : {
          "description" : "Up to 1000 EUR per card for the last 12 hours",
          "reference" : "YOUR_REFERENCE_2918A",
          "status" : "active",
          "entityKey" : {
            "entityReference" : "BA3227C223222B5FN65355NR3",
            "entityType" : "balanceAccount"
          },
          "aggregationLevel" : "paymentInstrument",
          "interval" : {
            "type" : "sliding",
            "duration" : {
              "value" : 12,
              "unit" : "hours"
            }
          },
          "outcomeType" : "hardBlock",
          "ruleRestrictions" : {
            "totalAmount" : {
              "operation" : "greaterThan",
              "value" : {
                "value" : 100000,
                "currency" : "EUR"
              }
            }
          },
          "type" : "velocity"
        }
      },
      "post-transactionRules-createTransactionRuleLimitSliding-200" : {
        "summary" : "Transaction rule for limiting total amount in the last 12 hours",
        "description" : "Example response to limit the total amount in a sliding interval",
        "value" : {
          "aggregationLevel" : "paymentInstrument",
          "description" : "Up to 1000 EUR per card for the last 12 hours",
          "entityKey" : {
            "entityReference" : "BA3227C223222B5FN65355NR3",
            "entityType" : "balanceAccount"
          },
          "interval" : {
            "duration" : {
              "unit" : "hours",
              "value" : 12
            },
            "timeZone" : "UTC",
            "type" : "sliding"
          },
          "outcomeType" : "hardBlock",
          "reference" : "YOUR_REFERENCE_2918A",
          "requestType" : "authorization",
          "ruleRestrictions" : {
            "totalAmount" : {
              "operation" : "greaterThan",
              "value" : {
                "currency" : "EUR",
                "value" : 100000
              }
            }
          },
          "startDate" : "2023-06-29T22:39:06.887628679+02:00",
          "status" : "active",
          "type" : "velocity",
          "id" : "TR32272223222H5J4D9Z8C97H"
        }
      },
      "post-transactionRules-createTransactionRuleLimitTransaction" : {
        "summary" : "Limit international payments",
        "description" : "Example request to limit total amount of international transactions",
        "value" : {
          "description" : "Up to 50 EUR international transactions",
          "reference" : "YOUR_REFERENCE_B2634",
          "status" : "active",
          "entityKey" : {
            "entityType" : "balanceAccount",
            "entityReference" : "BA3227C223222B5FN65355NR3"
          },
          "interval" : {
            "type" : "daily"
          },
          "outcomeType" : "hardBlock",
          "ruleRestrictions" : {
            "totalAmount" : {
              "operation" : "greaterThan",
              "value" : {
                "currency" : "EUR",
                "value" : 5000
              }
            },
            "internationalTransaction" : {
              "operation" : "equals",
              "value" : true
            }
          },
          "type" : "velocity"
        }
      },
      "post-transactionRules-createTransactionRuleLimitTransaction-200" : {
        "summary" : "Transaction rule for limiting international payments",
        "description" : "Example response to limit total amount of international transactions",
        "value" : {
          "description" : "Up to 50 EUR international transactions",
          "entityKey" : {
            "entityReference" : "BA3227C223222B5FN65355NR3",
            "entityType" : "balanceAccount"
          },
          "interval" : {
            "timeOfDay" : "00:00:00",
            "timeZone" : "UTC",
            "type" : "daily"
          },
          "outcomeType" : "hardBlock",
          "reference" : "YOUR_REFERENCE_B2634",
          "requestType" : "authorization",
          "ruleRestrictions" : {
            "internationalTransaction" : {
              "operation" : "equals",
              "value" : true
            },
            "totalAmount" : {
              "operation" : "greaterThan",
              "value" : {
                "currency" : "EUR",
                "value" : 5000
              }
            }
          },
          "startDate" : "2023-06-29T22:39:54.068487152+02:00",
          "status" : "active",
          "type" : "velocity",
          "id" : "TR3227C223222H5J4DB2X9V65"
        }
      },
      "post-transferRoutes-calculate-transferRoutesCalculate" : {
        "summary" : "Calculate transfer routes",
        "description" : "Example request for calculating transfer routes",
        "value" : {
          "balancePlatform" : "YOUR_BALANCE_PLATFORM",
          "currency" : "USD",
          "category" : "bank",
          "counterparty" : {
            "bankAccount" : {
              "accountIdentification" : {
                "type" : "iban",
                "iban" : "NL91ABNA0417164300"
              }
            }
          }
        }
      },
      "post-transferRoutes-calculate-transferRoutesCalculate-200" : {
        "summary" : "Response for calculating transfer routes",
        "description" : "Example response for calculating transfer routes",
        "value" : {
          "transferRoutes" : [ {
            "country" : "NL",
            "currency" : "USD",
            "priority" : "crossBorder",
            "requirements" : [ {
              "description" : "Amount of transfer must be at least 100, and no greater than 99999999999",
              "max" : 99999999999,
              "min" : 100,
              "type" : "amountMinMaxRequirement"
            }, {
              "description" : "Country, street and city is required.",
              "requiredAddressFields" : [ "line1", "city", "country" ],
              "type" : "addressRequirement"
            }, {
              "description" : "Bank account identification type must be iban or numberAndBic",
              "bankAccountIdentificationTypes" : [ "iban", "numberAndBic" ],
              "type" : "bankAccountIdentificationTypeRequirement"
            }, {
              "issuingCountryCode" : "NL",
              "paymentInstrumentType" : "BankAccount",
              "type" : "paymentInstrumentRequirement"
            } ]
          }, {
            "country" : "NL",
            "currency" : "USD",
            "priority" : "wire",
            "requirements" : [ {
              "description" : "Amount of transfer must be at least 100, and no greater than 99999999999",
              "max" : 99999999999,
              "min" : 100,
              "type" : "amountMinMaxRequirement"
            }, {
              "description" : "Country, street and city is required.",
              "requiredAddressFields" : [ "line1", "city", "country" ],
              "type" : "addressRequirement"
            }, {
              "description" : "Bank account identification type must be iban or numberAndBic",
              "bankAccountIdentificationTypes" : [ "iban", "numberAndBic" ],
              "type" : "bankAccountIdentificationTypeRequirement"
            }, {
              "issuingCountryCode" : "NL",
              "paymentInstrumentType" : "BankAccount",
              "type" : "paymentInstrumentRequirement"
            } ]
          } ]
        }
      },
      "post-validateBankAccountIdentification-validateBankAccountIdentificationIban" : {
        "summary" : "Validate an IBAN",
        "value" : {
          "accountIdentification" : {
            "type" : "iban",
            "iban" : "1001001234"
          }
        }
      },
      "post-validateBankAccountIdentification-validateBankAccountIdentificationIban-422" : {
        "summary" : "Invalid IBAN details",
        "value" : {
          "type" : "https://docs.adyen.com/errors/validation",
          "title" : "Invalid bank account identification details provided",
          "detail" : "Provided IBAN is incorrect",
          "status" : 422,
          "invalidFields" : [ {
            "name" : "iban",
            "value" : "1001001234",
            "message" : "Invalid IBAN."
          } ],
          "errorCode" : "33_01"
        }
      },
      "post-validateBankAccountIdentification-validateBankAccountIdentificationUs" : {
        "summary" : "Validate a US bank account",
        "value" : {
          "accountIdentification" : {
            "type" : "usLocal",
            "accountNumber" : "12345JHDhjkf67890",
            "accountType" : "checking",
            "routingNumber" : "121000567"
          }
        }
      },
      "post-validateBankAccountIdentification-validateBankAccountIdentificationUs-422" : {
        "summary" : "Invalid US bank account details",
        "value" : {
          "type" : "https://docs.adyen.com/errors/validation",
          "title" : "Invalid bank account identification details provided",
          "detail" : "Provided account number and the routing number are incorrect",
          "status" : 422,
          "invalidFields" : [ {
            "name" : "accountNumber",
            "value" : "12345JHDhjkf67890",
            "message" : "Invalid account number."
          }, {
            "name" : "routingNumber",
            "value" : "121000567",
            "message" : "Invalid routing number."
          } ],
          "errorCode" : "33_01"
        }
      }
    },
    "securitySchemes" : {
      "ApiKeyAuth" : {
        "type" : "apiKey",
        "name" : "X-API-Key",
        "in" : "header"
      },
      "BasicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      },
      "clientKey" : {
        "type" : "apiKey",
        "name" : "clientKey",
        "in" : "query"
      }
    }
  }
}