{
   "openapi" : "3.1.0",
   "servers" : [
      {
         "url" : "https://balanceplatform-api-test.adyen.com/bcl/v2"
      }
   ],
   "info" : {
      "version" : "2",
      "x-publicVersion" : true,
      "title" : "Configuration API",
      "description" : "The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.\n\n## Authentication\nYour Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:\n\n ```\ncurl\n-H \"Content-Type: application/json\" \\\n-H \"X-API-Key: YOUR_API_KEY\" \\\n...\n```\n\nAlternatively, you can use the username and password to connect to the API using basic authentication. For example:\n\n```\ncurl\n-H \"Content-Type: application/json\" \\\n-U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\\n...\n```\n## Versioning\nThe Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.\n\nFor example:\n```\nhttps://balanceplatform-api-test.adyen.com/bcl/v2/accountHolders\n```\n## Going live\nWhen going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v2`.",
      "x-timestamp" : "2022-10-04T15:24:01Z",
      "termsOfService" : "https://www.adyen.com/legal/terms-and-conditions",
      "contact" : {
         "name" : "Adyen Developer Experience team",
         "url" : "https://www.adyen.help/hc/en-us/community/topics",
         "email" : "developer-experience@adyen.com"
      }
   },
   "x-groups" : [
      "Platform",
      "Account holders",
      "Balance accounts",
      "Payment instruments",
      "Payment instrument groups",
      "Transaction rules"
   ],
   "tags" : [
      {
         "name" : "Platform"
      },
      {
         "name" : "Payment instrument groups"
      },
      {
         "name" : "Account holders"
      },
      {
         "name" : "Payment instruments"
      },
      {
         "name" : "Balance accounts"
      },
      {
         "name" : "Transaction rules"
      }
   ],
   "paths" : {
      "/accountHolders" : {
         "post" : {
            "tags" : [
               "Account holders"
            ],
            "summary" : "Create an account holder",
            "description" : "Creates an account holder linked to a [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities).\n\n",
            "x-addedInVersion" : "1",
            "operationId" : "post-accountHolders",
            "x-groupName" : "Account holders",
            "x-sortIndex" : 1,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "createAccountHolder" : {
                           "$ref" : "#/components/examples/post-accountHolders-createAccountHolder"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/AccountHolderInfo"
                     }
                  }
               }
            },
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "createAccountHolder" : {
                              "$ref" : "#/components/examples/post-accountHolders-createAccountHolder-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/AccountHolder"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/accountHolders/{id}" : {
         "get" : {
            "tags" : [
               "Account holders"
            ],
            "summary" : "Get an account holder",
            "description" : "Returns an account holder.",
            "x-addedInVersion" : "1",
            "operationId" : "get-accountHolders-id",
            "x-groupName" : "Account holders",
            "x-sortIndex" : 3,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the account holder.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-accountHolders-id-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/AccountHolder"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "patch" : {
            "tags" : [
               "Account holders"
            ],
            "summary" : "Update an account holder",
            "description" : "Updates an account holder. When updating an account holder resource, if a parameter is not provided in the request, it is left unchanged.",
            "x-addedInVersion" : "1",
            "operationId" : "patch-accountHolders-id",
            "x-groupName" : "Account holders",
            "x-sortIndex" : 2,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "requestAccountHolderCapability" : {
                           "$ref" : "#/components/examples/patch-accountHolders-id-requestAccountHolderCapability"
                        },
                        "updateAccountHolderStatus" : {
                           "$ref" : "#/components/examples/patch-accountHolders-id-updateAccountHolderStatus"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/AccountHolder"
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "description" : "The unique identifier of the account holder.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "requestAccountHolderCapability" : {
                              "$ref" : "#/components/examples/patch-accountHolders-id-requestAccountHolderCapability-200"
                           },
                           "updateAccountHolderStatus" : {
                              "$ref" : "#/components/examples/patch-accountHolders-id-updateAccountHolderStatus-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/AccountHolder"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/accountHolders/{id}/balanceAccounts" : {
         "get" : {
            "tags" : [
               "Account holders"
            ],
            "summary" : "Get all balance accounts of an account holder",
            "description" : "Returns a paginated list of the balance accounts associated with an account holder. To fetch multiple pages, use the query parameters. \n\nFor example, to limit the page to 5 balance accounts and skip the first 10, use `/accountHolders/{id}/balanceAccounts?limit=5&offset=10`.",
            "x-addedInVersion" : "1",
            "operationId" : "get-accountHolders-id-balanceAccounts",
            "x-groupName" : "Account holders",
            "x-sortIndex" : 4,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the account holder.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               },
               {
                  "description" : "The number of items that you want to skip.",
                  "name" : "offset",
                  "in" : "query",
                  "required" : false,
                  "schema" : {
                     "format" : "int32",
                     "type" : "integer"
                  }
               },
               {
                  "description" : "The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.",
                  "name" : "limit",
                  "in" : "query",
                  "required" : false,
                  "schema" : {
                     "format" : "int32",
                     "type" : "integer"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-accountHolders-id-balanceAccounts-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/PaginatedBalanceAccountsResponse"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/balanceAccounts" : {
         "post" : {
            "tags" : [
               "Balance accounts"
            ],
            "summary" : "Create a balance account",
            "description" : "Creates a balance account that holds the funds of the associated account holder.",
            "x-addedInVersion" : "1",
            "operationId" : "post-balanceAccounts",
            "x-groupName" : "Balance accounts",
            "x-sortIndex" : 1,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "createBalanceAccount" : {
                           "$ref" : "#/components/examples/post-balanceAccounts-createBalanceAccount"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/BalanceAccountInfo"
                     }
                  }
               }
            },
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "createBalanceAccount" : {
                              "$ref" : "#/components/examples/post-balanceAccounts-createBalanceAccount-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/BalanceAccount"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/balanceAccounts/{balanceAccountId}/sweeps" : {
         "get" : {
            "tags" : [
               "Balance accounts"
            ],
            "summary" : "Get all sweeps for a balance account",
            "description" : "Returns a list of the sweeps configured for a balance account.\n\nTo fetch multiple pages, use the query parameters. For example, to limit the page to 5 sweeps and to skip the first 10, use `/balanceAccounts/{balanceAccountId}/sweeps?limit=5&offset=10`.",
            "x-addedInVersion" : "2",
            "operationId" : "get-balanceAccounts-balanceAccountId-sweeps",
            "x-groupName" : "Balance accounts",
            "x-sortIndex" : 7,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the balance account.",
                  "name" : "balanceAccountId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               },
               {
                  "description" : "The number of items that you want to skip.",
                  "name" : "offset",
                  "in" : "query",
                  "required" : false,
                  "schema" : {
                     "format" : "int32",
                     "type" : "integer"
                  }
               },
               {
                  "description" : "The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.",
                  "name" : "limit",
                  "in" : "query",
                  "required" : false,
                  "schema" : {
                     "format" : "int32",
                     "type" : "integer"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-balanceAccounts-balanceAccountId-sweeps-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/BalanceSweepConfigurationsResponse"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "post" : {
            "tags" : [
               "Balance accounts"
            ],
            "summary" : "Create a sweep",
            "description" : "Creates a sweep that results in moving funds from or to a balance account.\n\nA sweep pulls in or pushes out funds based on a defined schedule, amount, currency, and a source or a destination.",
            "x-addedInVersion" : "2",
            "operationId" : "post-balanceAccounts-balanceAccountId-sweeps",
            "x-groupName" : "Balance accounts",
            "x-sortIndex" : 5,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "createSweep-pull" : {
                           "$ref" : "#/components/examples/post-balanceAccounts-balanceAccountId-sweeps-createSweep-pull"
                        },
                        "createSweep-push" : {
                           "$ref" : "#/components/examples/post-balanceAccounts-balanceAccountId-sweeps-createSweep-push"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/SweepConfigurationV2"
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "description" : "The unique identifier of the balance account.",
                  "name" : "balanceAccountId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "createSweep-pull" : {
                              "$ref" : "#/components/examples/post-balanceAccounts-balanceAccountId-sweeps-createSweep-pull-200"
                           },
                           "createSweep-push" : {
                              "$ref" : "#/components/examples/post-balanceAccounts-balanceAccountId-sweeps-createSweep-push-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/SweepConfigurationV2"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}" : {
         "delete" : {
            "tags" : [
               "Balance accounts"
            ],
            "summary" : "Delete a sweep",
            "description" : "Deletes a sweep for a balance account.",
            "x-addedInVersion" : "2",
            "operationId" : "delete-balanceAccounts-balanceAccountId-sweeps-sweepId",
            "x-groupName" : "Balance accounts",
            "x-sortIndex" : 9,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the balance account.",
                  "name" : "balanceAccountId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               },
               {
                  "description" : "The unique identifier of the sweep.",
                  "name" : "sweepId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "204" : {
                  "description" : "No Content - the request has been successfully processed, but there is no additional content."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "get" : {
            "tags" : [
               "Balance accounts"
            ],
            "summary" : "Get a sweep",
            "description" : "Returns a sweep.",
            "x-addedInVersion" : "2",
            "operationId" : "get-balanceAccounts-balanceAccountId-sweeps-sweepId",
            "x-groupName" : "Balance accounts",
            "x-sortIndex" : 8,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the balance account.",
                  "name" : "balanceAccountId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               },
               {
                  "description" : "The unique identifier of the sweep.",
                  "name" : "sweepId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-balanceAccounts-balanceAccountId-sweeps-sweepId-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/SweepConfigurationV2"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "patch" : {
            "tags" : [
               "Balance accounts"
            ],
            "summary" : "Update a sweep",
            "description" : "Updates a sweep. When updating a sweep resource, note that if a request parameter is not provided, the parameter is left unchanged.",
            "x-addedInVersion" : "2",
            "operationId" : "patch-balanceAccounts-balanceAccountId-sweeps-sweepId",
            "x-groupName" : "Balance accounts",
            "x-sortIndex" : 6,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "updateSweep-status" : {
                           "$ref" : "#/components/examples/patch-balanceAccounts-balanceAccountId-sweeps-sweepId-updateSweep-status"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/SweepConfigurationV2"
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "description" : "The unique identifier of the balance account.",
                  "name" : "balanceAccountId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               },
               {
                  "description" : "The unique identifier of the sweep.",
                  "name" : "sweepId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "updateSweep-status" : {
                              "$ref" : "#/components/examples/patch-balanceAccounts-balanceAccountId-sweeps-sweepId-updateSweep-status-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/SweepConfigurationV2"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/balanceAccounts/{id}" : {
         "get" : {
            "tags" : [
               "Balance accounts"
            ],
            "summary" : "Get a balance account",
            "description" : "Returns a balance account.",
            "x-addedInVersion" : "1",
            "operationId" : "get-balanceAccounts-id",
            "x-groupName" : "Balance accounts",
            "x-sortIndex" : 3,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the balance account.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-balanceAccounts-id-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/BalanceAccount"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "patch" : {
            "tags" : [
               "Balance accounts"
            ],
            "summary" : "Update a balance account",
            "description" : "Updates a balance account.",
            "x-addedInVersion" : "1",
            "operationId" : "patch-balanceAccounts-id",
            "x-groupName" : "Balance accounts",
            "x-sortIndex" : 2,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "schema" : {
                        "$ref" : "#/components/schemas/BalanceAccountUpdateRequest"
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "description" : "The unique identifier of the balance account.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "schema" : {
                           "$ref" : "#/components/schemas/BalanceAccount"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/balanceAccounts/{id}/paymentInstruments" : {
         "get" : {
            "tags" : [
               "Balance accounts"
            ],
            "summary" : "Get all payment instruments for a balance account",
            "description" : "Returns a paginated list of the payment instruments associated with a balance account. \n\nTo fetch multiple pages, use the query parameters.For example, to limit the page to 3 payment instruments and to skip the first 6, use `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6`.",
            "x-addedInVersion" : "1",
            "operationId" : "get-balanceAccounts-id-paymentInstruments",
            "x-groupName" : "Balance accounts",
            "x-sortIndex" : 4,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the balance account.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               },
               {
                  "description" : "The number of items that you want to skip.",
                  "name" : "offset",
                  "in" : "query",
                  "required" : false,
                  "schema" : {
                     "format" : "int32",
                     "type" : "integer"
                  }
               },
               {
                  "description" : "The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.",
                  "name" : "limit",
                  "in" : "query",
                  "required" : false,
                  "schema" : {
                     "format" : "int32",
                     "type" : "integer"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-balanceAccounts-id-paymentInstruments-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/PaginatedPaymentInstrumentsResponse"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/balancePlatforms/{id}" : {
         "get" : {
            "tags" : [
               "Platform"
            ],
            "summary" : "Get a balance platform",
            "description" : "Returns a balance platform.",
            "x-addedInVersion" : "1",
            "operationId" : "get-balancePlatforms-id",
            "x-groupName" : "Platform",
            "x-sortIndex" : 1,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the balance platform.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-balancePlatforms-id-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/BalancePlatform"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/balancePlatforms/{id}/accountHolders" : {
         "get" : {
            "tags" : [
               "Platform"
            ],
            "summary" : "Get all account holders under a balance platform",
            "description" : "Returns a paginated list of all the account holders that belong to the balance platform. To fetch multiple pages, use the query parameters. \n\nFor example, to limit the page to 5 account holders and to skip the first 20, use `/balancePlatforms/{id}/accountHolders?limit=5&offset=20`.",
            "x-addedInVersion" : "1",
            "operationId" : "get-balancePlatforms-id-accountHolders",
            "x-groupName" : "Platform",
            "x-sortIndex" : 2,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the balance platform.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               },
               {
                  "description" : "The number of items that you want to skip.",
                  "name" : "offset",
                  "in" : "query",
                  "required" : false,
                  "schema" : {
                     "format" : "int32",
                     "type" : "integer"
                  }
               },
               {
                  "description" : "The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.",
                  "name" : "limit",
                  "in" : "query",
                  "required" : false,
                  "schema" : {
                     "format" : "int32",
                     "type" : "integer"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-balancePlatforms-id-accountHolders-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/PaginatedAccountHoldersResponse"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/paymentInstrumentGroups" : {
         "post" : {
            "tags" : [
               "Payment instrument groups"
            ],
            "summary" : "Create a payment instrument group",
            "description" : "Creates a payment instrument group to associate and group payment instrument resources together. You can apply a transaction rule to a payment instrument group.",
            "x-addedInVersion" : "1",
            "operationId" : "post-paymentInstrumentGroups",
            "x-groupName" : "Payment instrument groups",
            "x-sortIndex" : 1,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "createPaymentInstrumentGroups" : {
                           "$ref" : "#/components/examples/post-paymentInstrumentGroups-createPaymentInstrumentGroups"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/PaymentInstrumentGroupInfo"
                     }
                  }
               }
            },
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "createPaymentInstrumentGroups" : {
                              "$ref" : "#/components/examples/post-paymentInstrumentGroups-createPaymentInstrumentGroups-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/PaymentInstrumentGroup"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/paymentInstrumentGroups/{id}" : {
         "get" : {
            "tags" : [
               "Payment instrument groups"
            ],
            "summary" : "Get a payment instrument group",
            "description" : "Returns the details of a payment instrument group.",
            "x-addedInVersion" : "1",
            "operationId" : "get-paymentInstrumentGroups-id",
            "x-groupName" : "Payment instrument groups",
            "x-sortIndex" : 2,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the payment instrument group.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-paymentInstrumentGroups-id-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/PaymentInstrumentGroup"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/paymentInstrumentGroups/{id}/transactionRules" : {
         "get" : {
            "tags" : [
               "Payment instrument groups"
            ],
            "summary" : "Get all transaction rules for a payment instrument group",
            "description" : "Returns a list of all the transaction rules associated with a payment instrument group.",
            "x-addedInVersion" : "1",
            "operationId" : "get-paymentInstrumentGroups-id-transactionRules",
            "x-groupName" : "Payment instrument groups",
            "x-sortIndex" : 3,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the payment instrument group.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-paymentInstrumentGroups-id-transactionRules-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/TransactionRulesResponse"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/paymentInstruments" : {
         "post" : {
            "tags" : [
               "Payment instruments"
            ],
            "summary" : "Create a payment instrument",
            "description" : "Creates a payment instrument to issue a physical card, a virtual card, or a business account to your user.\n\n For more information, refer to [Issue cards](https://docs.adyen.com/issuing/create-cards) or [Issue business accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts).",
            "x-addedInVersion" : "1",
            "operationId" : "post-paymentInstruments",
            "x-groupName" : "Payment instruments",
            "x-sortIndex" : 11,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "createBusinessAccount" : {
                           "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccount"
                        },
                        "createPhysicalCard" : {
                           "$ref" : "#/components/examples/post-paymentInstruments-createPhysicalCard"
                        },
                        "createVirtualCard" : {
                           "$ref" : "#/components/examples/post-paymentInstruments-createVirtualCard"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/PaymentInstrumentInfo"
                     }
                  }
               }
            },
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "createBusinessAccount" : {
                              "$ref" : "#/components/examples/post-paymentInstruments-createBusinessAccount-200"
                           },
                           "createPhysicalCard" : {
                              "$ref" : "#/components/examples/post-paymentInstruments-createPhysicalCard-200"
                           },
                           "createVirtualCard" : {
                              "$ref" : "#/components/examples/post-paymentInstruments-createVirtualCard-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/PaymentInstrument"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/paymentInstruments/{id}" : {
         "get" : {
            "tags" : [
               "Payment instruments"
            ],
            "summary" : "Get a payment instrument",
            "description" : "Returns the details of a payment instrument.",
            "x-addedInVersion" : "1",
            "operationId" : "get-paymentInstruments-id",
            "x-groupName" : "Payment instruments",
            "x-sortIndex" : 13,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the payment instrument.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-paymentInstruments-id-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/PaymentInstrument"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "patch" : {
            "tags" : [
               "Payment instruments"
            ],
            "summary" : "Update a payment instrument",
            "description" : "Updates a payment instrument. Once a payment instrument is already active, you can only update its status. However, for cards created with **inactive** status, you can still update the balance account associated with the card.",
            "x-addedInVersion" : "1",
            "operationId" : "patch-paymentInstruments-id",
            "x-groupName" : "Payment instruments",
            "x-sortIndex" : 12,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "updatePaymentInstrumentBalanceAccount" : {
                           "$ref" : "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount"
                        },
                        "updatePaymentInstrumentStatus" : {
                           "$ref" : "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentStatus"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/PaymentInstrumentUpdateRequest"
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "description" : "The unique identifier of the payment instrument.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "updatePaymentInstrumentBalanceAccount" : {
                              "$ref" : "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount-200"
                           },
                           "updatePaymentInstrumentStatus" : {
                              "$ref" : "#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentStatus-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/PaymentInstrument"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/paymentInstruments/{id}/transactionRules" : {
         "get" : {
            "tags" : [
               "Payment instruments"
            ],
            "summary" : "Get all transaction rules for a payment instrument",
            "description" : "Returns a list of transaction rules associated with a payment instrument.",
            "x-addedInVersion" : "1",
            "operationId" : "get-paymentInstruments-id-transactionRules",
            "x-groupName" : "Payment instruments",
            "x-sortIndex" : 14,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the payment instrument.",
                  "name" : "id",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-paymentInstruments-id-transactionRules-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/TransactionRulesResponse"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/transactionRules" : {
         "post" : {
            "tags" : [
               "Transaction rules"
            ],
            "summary" : "Create a transaction rule",
            "description" : "Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules). When your user makes a transaction with their Adyen-issued card, the transaction is allowed or declined based on the conditions and outcome defined in the transaction rule. You can apply the transaction rule to several cards, such as all the cards in your platform, or to a specific card. For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples).",
            "x-addedInVersion" : "1",
            "operationId" : "post-transactionRules",
            "x-groupName" : "Transaction rules",
            "x-sortIndex" : 1,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "createTransactionRuleAllowPos" : {
                           "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleAllowPos"
                        },
                        "createTransactionRuleIncreaseScore" : {
                           "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleIncreaseScore"
                        },
                        "createTransactionRuleLimitSliding" : {
                           "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleLimitSliding"
                        },
                        "createTransactionRuleLimitTransaction" : {
                           "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleLimitTransaction"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/TransactionRuleInfo"
                     }
                  }
               }
            },
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "createTransactionRuleAllowPos" : {
                              "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleAllowPos-200"
                           },
                           "createTransactionRuleIncreaseScore" : {
                              "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleIncreaseScore-200"
                           },
                           "createTransactionRuleLimitSliding" : {
                              "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleLimitSliding-200"
                           },
                           "createTransactionRuleLimitTransaction" : {
                              "$ref" : "#/components/examples/post-transactionRules-createTransactionRuleLimitTransaction-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/TransactionRule"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      },
      "/transactionRules/{transactionRuleId}" : {
         "delete" : {
            "tags" : [
               "Transaction rules"
            ],
            "summary" : "Delete a transaction rule",
            "description" : "Deletes a transaction rule.",
            "x-addedInVersion" : "1",
            "operationId" : "delete-transactionRules-transactionRuleId",
            "x-groupName" : "Transaction rules",
            "x-sortIndex" : 5,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the transaction rule.",
                  "name" : "transactionRuleId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/delete-transactionRules-transactionRuleId-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/TransactionRule"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "get" : {
            "tags" : [
               "Transaction rules"
            ],
            "summary" : "Get a transaction rule",
            "description" : "Returns the details of a transaction rule.",
            "x-addedInVersion" : "1",
            "operationId" : "get-transactionRules-transactionRuleId",
            "x-groupName" : "Transaction rules",
            "x-sortIndex" : 2,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "parameters" : [
               {
                  "description" : "The unique identifier of the transaction rule.",
                  "name" : "transactionRuleId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "success" : {
                              "$ref" : "#/components/examples/get-transactionRules-transactionRuleId-success-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/TransactionRuleResponse"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         },
         "patch" : {
            "tags" : [
               "Transaction rules"
            ],
            "summary" : "Update a transaction rule",
            "description" : "Updates a transaction rule. \n\n* To update only the status of a transaction rule, send only the `status` parameter. All other parameters not provided in the request are left unchanged.\n\n* When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, that parameter is removed from the resource.",
            "x-addedInVersion" : "1",
            "operationId" : "patch-transactionRules-transactionRuleId",
            "x-groupName" : "Transaction rules",
            "x-sortIndex" : 3,
            "security" : [
               {
                  "BasicAuth" : [
                  ]
               },
               {
                  "ApiKeyAuth" : [
                  ]
               }
            ],
            "requestBody" : {
               "content" : {
                  "application/json" : {
                     "examples" : {
                        "updateTransactionRuleStatus" : {
                           "$ref" : "#/components/examples/patch-transactionRules-transactionRuleId-updateTransactionRuleStatus"
                        }
                     },
                     "schema" : {
                        "$ref" : "#/components/schemas/TransactionRuleInfo"
                     }
                  }
               }
            },
            "parameters" : [
               {
                  "description" : "The unique identifier of the transaction rule.",
                  "name" : "transactionRuleId",
                  "in" : "path",
                  "required" : true,
                  "schema" : {
                     "type" : "string"
                  }
               }
            ],
            "responses" : {
               "200" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "updateTransactionRuleStatus" : {
                              "$ref" : "#/components/examples/patch-transactionRules-transactionRuleId-updateTransactionRuleStatus-200"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/TransactionRule"
                        }
                     }
                  },
                  "description" : "OK - the request has succeeded."
               },
               "400" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-400"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Bad Request - a problem reading or understanding the request."
               },
               "401" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-401"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unauthorized - authentication required."
               },
               "403" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-403"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Forbidden - insufficient permissions to process the request."
               },
               "422" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-422"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Unprocessable Entity - a request validation error."
               },
               "500" : {
                  "content" : {
                     "application/json" : {
                        "examples" : {
                           "generic" : {
                              "$ref" : "#/components/examples/generic-500"
                           }
                        },
                        "schema" : {
                           "$ref" : "#/components/schemas/RestServiceError"
                        }
                     }
                  },
                  "description" : "Internal Server Error - the server could not process the request."
               }
            }
         }
      }
   },
   "components" : {
      "schemas" : {
         "AccountHolder" : {
            "properties" : {
               "balancePlatform" : {
                  "description" : "The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.",
                  "type" : "string"
               },
               "capabilities" : {
                  "additionalProperties" : {
                     "$ref" : "#/components/schemas/AccountHolderCapability"
                  },
                  "description" : "Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.",
                  "type" : "object"
               },
               "contactDetails" : {
                  "description" : "Contact details of the account holder.",
                  "$ref" : "#/components/schemas/ContactDetails"
               },
               "description" : {
                  "description" : "Your description for the account holder, maximum 300 characters.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "id" : {
                  "description" : "The unique identifier of the account holder.",
                  "readOnly" : true,
                  "type" : "string"
               },
               "legalEntityId" : {
                  "description" : "The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.",
                  "type" : "string"
               },
               "primaryBalanceAccount" : {
                  "description" : "The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.",
                  "type" : "string"
               },
               "reference" : {
                  "description" : "Your reference for the account holder, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "status" : {
                  "description" : "The status of the account holder.\n\nPossible values: \n\n * **active**: The account holder is active. This is the default status when creating an account holder. \n\n * **inactive**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details. \n\n * **suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone. \n\n* **closed**: The account holder is permanently deactivated by you. This action cannot be undone.",
                  "enum" : [
                     "active",
                     "closed",
                     "inactive",
                     "suspended"
                  ],
                  "type" : "string"
               },
               "timeZone" : {
                  "description" : "The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.\nIf not set, the time zone of the balance account will be used. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).",
                  "type" : "string"
               }
            },
            "required" : [
               "legalEntityId",
               "id"
            ]
         },
         "AccountHolderCapability" : {
            "properties" : {
               "allowed" : {
                  "description" : "Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.",
                  "readOnly" : true,
                  "type" : "boolean"
               },
               "allowedLevel" : {
                  "description" : "The capability level that is allowed for the account holder.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.",
                  "enum" : [
                     "high",
                     "low",
                     "medium",
                     "notApplicable"
                  ],
                  "readOnly" : true,
                  "type" : "string"
               },
               "allowedSettings" : {
                  "description" : "A JSON object containing the settings that are allowed for the account holder.",
                  "readOnly" : true,
                  "$ref" : "#/components/schemas/JSONObject"
               },
               "enabled" : {
                  "description" : "Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.",
                  "type" : "boolean"
               },
               "problems" : {
                  "description" : "Contains verification errors and the actions that you can take to resolve them.",
                  "items" : {
                     "$ref" : "#/components/schemas/CapabilityProblem"
                  },
                  "readOnly" : true,
                  "type" : "array"
               },
               "requested" : {
                  "description" : "Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.",
                  "type" : "boolean"
               },
               "requestedLevel" : {
                  "description" : "The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.\n\nPossible values: **notApplicable**, **low**, **medium**, **high**.",
                  "enum" : [
                     "high",
                     "low",
                     "medium",
                     "notApplicable"
                  ],
                  "type" : "string"
               },
               "requestedSettings" : {
                  "description" : "A JSON object containing the settings that were requested for the account holder.",
                  "readOnly" : true,
                  "$ref" : "#/components/schemas/JSONObject"
               },
               "verificationStatus" : {
                  "description" : "The status of the verification checks for the capability.\n\nPossible values:\n\n* **pending**: Adyen is running the verification.\n\n* **invalid**: The verification failed. Check if the `errors` array contains more information.\n\n* **valid**: The verification has been successfully completed.\n\n* **rejected**: Adyen has verified the information, but found reasons to not allow the capability.\n",
                  "enum" : [
                     "invalid",
                     "pending",
                     "rejected",
                     "valid"
                  ],
                  "readOnly" : true,
                  "type" : "string"
               }
            }
         },
         "AccountHolderInfo" : {
            "properties" : {
               "balancePlatform" : {
                  "description" : "The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.",
                  "type" : "string"
               },
               "capabilities" : {
                  "additionalProperties" : {
                     "$ref" : "#/components/schemas/AccountHolderCapability"
                  },
                  "description" : "Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.",
                  "type" : "object"
               },
               "contactDetails" : {
                  "description" : "Contact details of the account holder.",
                  "$ref" : "#/components/schemas/ContactDetails"
               },
               "description" : {
                  "description" : "Your description for the account holder, maximum 300 characters.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "legalEntityId" : {
                  "description" : "The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.",
                  "type" : "string"
               },
               "reference" : {
                  "description" : "Your reference for the account holder, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "timeZone" : {
                  "description" : "The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**.\nIf not set, the time zone of the balance account will be used. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).",
                  "type" : "string"
               }
            },
            "required" : [
               "legalEntityId"
            ]
         },
         "ActiveNetworkTokensRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The number of tokens.",
                  "format" : "int32",
                  "type" : "integer"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "Address" : {
            "properties" : {
               "city" : {
                  "description" : "The name of the city. Maximum length: 3000 characters.",
                  "maxLength" : 3000,
                  "type" : "string"
               },
               "country" : {
                  "description" : "The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n> If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.",
                  "type" : "string"
               },
               "houseNumberOrName" : {
                  "description" : "The number or name of the house. Maximum length: 3000 characters.",
                  "maxLength" : 3000,
                  "type" : "string"
               },
               "postalCode" : {
                  "description" : "A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.",
                  "type" : "string"
               },
               "stateOrProvince" : {
                  "description" : "The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.",
                  "type" : "string"
               },
               "street" : {
                  "description" : "The name of the street. Maximum length: 3000 characters.\n> The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.",
                  "maxLength" : 3000,
                  "type" : "string"
               }
            },
            "required" : [
               "street",
               "houseNumberOrName",
               "city",
               "postalCode",
               "country"
            ]
         },
         "Address-2" : {
            "properties" : {
               "city" : {
                  "description" : "The name of the city.",
                  "type" : "string"
               },
               "country" : {
                  "description" : "The two-character ISO-3166-1 alpha-2 country code. For example, **US**.\n>If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.",
                  "type" : "string"
               },
               "line1" : {
                  "description" : "First line of the address.",
                  "type" : "string"
               },
               "line2" : {
                  "description" : "Second line of the address.",
                  "type" : "string"
               },
               "line3" : {
                  "description" : "Third line of the address.",
                  "type" : "string"
               },
               "postalCode" : {
                  "description" : "The postal code.\nMaximum length:\n* 5 digits for an address in the US.\n* 10 characters for an address in all other countries.",
                  "type" : "string"
               },
               "stateOrProvince" : {
                  "description" : "The two-letterISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.\n> Required for the US and Canada.",
                  "type" : "string"
               }
            },
            "required" : [
               "country"
            ]
         },
         "Amount" : {
            "properties" : {
               "currency" : {
                  "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).",
                  "maxLength" : 3,
                  "minLength" : 3,
                  "type" : "string"
               },
               "value" : {
                  "description" : "The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).",
                  "format" : "int64",
                  "type" : "integer"
               }
            },
            "required" : [
               "value",
               "currency"
            ]
         },
         "Authentication" : {
            "properties" : {
               "email" : {
                  "description" : "The email address where the one-time password (OTP) is sent.",
                  "type" : "string"
               },
               "password" : {
                  "description" : "The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.\n\n* Characters between **a-z**, **A-Z**, and **0-9**\n\n* Special characters: **äöüßÄÖÜ+-*/ç%()=?!~#'\",;:$&àùòâôûáúó**",
                  "maxLength" : 30,
                  "minLength" : 1,
                  "type" : "string"
               },
               "phone" : {
                  "description" : "The phone number where the one-time password (OTP) is sent.\n\nThis object must have:\n\n* A `type` set to **mobile**.\n\n* A `number` with a valid country code.\n\n* A `number` with more than 4 digits, excluding the country code.\n\n>Make sure to verify that the card user owns the phone number.",
                  "$ref" : "#/components/schemas/Phone"
               }
            }
         },
         "Balance" : {
            "properties" : {
               "available" : {
                  "description" : "The remaining amount available for spending.",
                  "format" : "int64",
                  "type" : "integer"
               },
               "balance" : {
                  "description" : "The total amount in the balance.",
                  "format" : "int64",
                  "type" : "integer"
               },
               "currency" : {
                  "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance.",
                  "type" : "string"
               },
               "reserved" : {
                  "description" : "The amount reserved for payments that have been authorised, but have not been captured yet.",
                  "format" : "int64",
                  "type" : "integer"
               }
            },
            "required" : [
               "currency",
               "balance",
               "reserved",
               "available"
            ]
         },
         "BalanceAccount" : {
            "properties" : {
               "accountHolderId" : {
                  "description" : "The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.",
                  "type" : "string"
               },
               "balances" : {
                  "description" : "List of balances with the amount and currency.",
                  "items" : {
                     "$ref" : "#/components/schemas/Balance"
                  },
                  "type" : "array"
               },
               "defaultCurrencyCode" : {
                  "description" : "The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.\nThe default value is **EUR**.",
                  "type" : "string"
               },
               "description" : {
                  "description" : "A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "id" : {
                  "description" : "The unique identifier of the balance account.",
                  "type" : "string"
               },
               "reference" : {
                  "description" : "Your reference for the balance account, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "status" : {
                  "description" : "The status of the balance account, set to **active** by default. \n",
                  "enum" : [
                     "active",
                     "closed",
                     "inactive",
                     "suspended"
                  ],
                  "type" : "string"
               },
               "timeZone" : {
                  "description" : "The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.\nIf not set, the time zone of the account holder will be used. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).",
                  "type" : "string"
               }
            },
            "required" : [
               "accountHolderId",
               "id"
            ]
         },
         "BalanceAccountInfo" : {
            "properties" : {
               "accountHolderId" : {
                  "description" : "The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.",
                  "type" : "string"
               },
               "defaultCurrencyCode" : {
                  "description" : "The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) of the balance account.\nThe default value is **EUR**.",
                  "type" : "string"
               },
               "description" : {
                  "description" : "A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "reference" : {
                  "description" : "Your reference for the balance account, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "timeZone" : {
                  "description" : "The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.\nIf not set, the time zone of the account holder will be used. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).",
                  "type" : "string"
               }
            },
            "required" : [
               "accountHolderId"
            ]
         },
         "BalanceAccountUpdateRequest" : {
            "properties" : {
               "accountHolderId" : {
                  "description" : "The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id) associated with the balance account.",
                  "type" : "string"
               },
               "defaultCurrencyCode" : {
                  "description" : "The default currency code of this balance account, in three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) format. \nThe default value is **EUR**.",
                  "type" : "string"
               },
               "description" : {
                  "description" : "A human-readable description of the balance account, maximum 300 characters. You can use this parameter to distinguish between multiple balance accounts under an account holder.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "reference" : {
                  "description" : "Your reference to the balance account, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "status" : {
                  "description" : "The status of the balance account. Payment instruments linked to the balance account can only be used if the balance account status is **active**.\n\nPossible values: **active**, **inactive**, **closed**, **suspended**.",
                  "enum" : [
                     "active",
                     "closed",
                     "inactive",
                     "suspended"
                  ],
                  "type" : "string"
               },
               "timeZone" : {
                  "description" : "The [time zone](https://www.iana.org/time-zones) of the balance account. For example, **Europe/Amsterdam**.\nIf not set, the time zone of the account holder will be used. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).",
                  "type" : "string"
               }
            }
         },
         "BalancePlatform" : {
            "properties" : {
               "description" : {
                  "description" : "Your description of the balance platform, maximum 300 characters.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "id" : {
                  "description" : "The unique identifier of the balance platform.",
                  "type" : "string"
               },
               "status" : {
                  "description" : "The status of the balance platform.\n\nPossible values: **Active**, **Inactive**, **Closed**, **Suspended**.",
                  "type" : "string"
               }
            },
            "required" : [
               "id"
            ]
         },
         "BalanceSweepConfigurationsResponse" : {
            "properties" : {
               "hasNext" : {
                  "description" : "Indicates whether there are more items on the next page.",
                  "type" : "boolean"
               },
               "hasPrevious" : {
                  "description" : "Indicates whether there are more items on the previous page.",
                  "type" : "boolean"
               },
               "sweeps" : {
                  "description" : "List of sweeps associated with the balance account.",
                  "items" : {
                     "$ref" : "#/components/schemas/SweepConfigurationV2"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "sweeps",
               "hasPrevious",
               "hasNext"
            ]
         },
         "BankAccount" : {
            "properties" : {
               "iban" : {
                  "description" : "The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).",
                  "type" : "string"
               }
            },
            "required" : [
               "iban"
            ]
         },
         "BrandVariantsRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "List of card brand variants.\n\nPossible values: \n\n- **mc**, **mccredit**, **mccommercialcredit_b2b**, **mcdebit**, **mcbusinessdebit**, **mcbusinessworlddebit**, **mcprepaid**, **mcmaestro**\n\n - **visa**, **visacredit**, **visadebit**, **visaprepaid**.\n\nYou can specify a rule for a generic variant. For example, to create a rule for all Mastercard payment instruments, use **mc**. The rule is applied to all payment instruments under **mc**, such as **mcbusinessdebit** and **mcdebit**.\n\n",
                  "items" : {
                     "type" : "string"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "BulkAddress" : {
            "properties" : {
               "city" : {
                  "description" : "The name of the city.",
                  "type" : "string"
               },
               "company" : {
                  "description" : "The name of the company.",
                  "type" : "string"
               },
               "country" : {
                  "description" : "The two-character ISO-3166-1 alpha-2 country code. For example, **US**.",
                  "type" : "string"
               },
               "email" : {
                  "description" : "The email address.",
                  "type" : "string"
               },
               "houseNumberOrName" : {
                  "description" : "The house number or name.",
                  "type" : "string"
               },
               "mobile" : {
                  "description" : "The full telephone number.",
                  "type" : "string"
               },
               "postalCode" : {
                  "description" : "The postal code.\n\nMaximum length:\n\n* 5 digits for addresses in the US.\n\n* 10 characters for all other countries.",
                  "type" : "string"
               },
               "stateOrProvince" : {
                  "description" : "The two-letter ISO 3166-2 state or province code.\n\nMaximum length: 2 characters for addresses in the US.",
                  "type" : "string"
               },
               "street" : {
                  "description" : "The streetname of the house.",
                  "type" : "string"
               }
            },
            "required" : [
               "country"
            ]
         },
         "CapabilityProblem" : {

         },
         "Card" : {
            "properties" : {
               "authentication" : {
                  "description" : "Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.",
                  "$ref" : "#/components/schemas/Authentication"
               },
               "bin" : {
                  "description" : "The bank identification number (BIN) of the card number.",
                  "type" : "string"
               },
               "brand" : {
                  "description" : "The brand of the payment instrument.\nPossible values: **visa**, **mc**.",
                  "type" : "string"
               },
               "brandVariant" : {
                  "description" : "The brand variant of the payment instrument.\n>Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.",
                  "type" : "string"
               },
               "cardholderName" : {
                  "description" : "The name of the cardholder.\n Maximum length: 26 characters.",
                  "maxLength" : 26,
                  "type" : "string"
               },
               "configuration" : {
                  "description" : "Settings required when creating a physical card. \n\nReach out to your Adyen contact to get the values that you can send in this object.",
                  "$ref" : "#/components/schemas/CardConfiguration"
               },
               "cvc" : {
                  "description" : "The CVC2 value of the card.\n> The CVC2 is not sent by default. This is only returned in the `POST` response for single-use virtual cards.",
                  "type" : "string"
               },
               "deliveryContact" : {
                  "x-addedInVersion" : "2",
                  "description" : "The delivery contact (name and address) for physical card delivery.",
                  "$ref" : "#/components/schemas/DeliveryContact"
               },
               "expiration" : {
                  "description" : "The expiration date of the card.",
                  "$ref" : "#/components/schemas/Expiry"
               },
               "formFactor" : {
                  "description" : "The form factor of the card.\nPossible values: **virtual**, **physical**.",
                  "enum" : [
                     "physical",
                     "unknown",
                     "virtual"
                  ],
                  "type" : "string"
               },
               "lastFour" : {
                  "description" : "Last last four digits of the card number.",
                  "type" : "string"
               },
               "number" : {
                  "description" : "The primary account number (PAN) of the card.\n> The PAN is masked by default and returned only for single-use virtual cards.",
                  "readOnly" : true,
                  "type" : "string"
               }
            },
            "required" : [
               "formFactor",
               "cardholderName",
               "brand",
               "brandVariant",
               "number"
            ]
         },
         "CardConfiguration" : {
            "properties" : {
               "activation" : {
                  "description" : "Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.",
                  "type" : "string"
               },
               "activationUrl" : {
                  "description" : "Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process. \n\nMaximum length: 255 characters.",
                  "maxLength" : 255,
                  "type" : "string"
               },
               "bulkAddress" : {
                  "description" : "Overrides the shipment bulk address defined in the `configurationProfileId`.",
                  "$ref" : "#/components/schemas/BulkAddress"
               },
               "cardImageId" : {
                  "description" : "The ID of the card image. This is the image that will be printed on the full front of the card.",
                  "type" : "string"
               },
               "carrier" : {
                  "description" : "Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.",
                  "type" : "string"
               },
               "carrierImageId" : {
                  "description" : "The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.",
                  "type" : "string"
               },
               "configurationProfileId" : {
                  "description" : "The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.\n\nFor example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.",
                  "type" : "string"
               },
               "currency" : {
                  "description" : "The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.",
                  "type" : "string"
               },
               "envelope" : {
                  "description" : "Overrides the envelope design ID defined in the `configurationProfileId`. ",
                  "type" : "string"
               },
               "insert" : {
                  "description" : "Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.",
                  "type" : "string"
               },
               "language" : {
                  "description" : "The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.",
                  "type" : "string"
               },
               "logoImageId" : {
                  "description" : "The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.",
                  "type" : "string"
               },
               "pinMailer" : {
                  "description" : "Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.",
                  "type" : "string"
               },
               "shipmentMethod" : {
                  "description" : "Overrides the logistics company defined in the `configurationProfileId`.",
                  "type" : "string"
               }
            },
            "required" : [
               "configurationProfileId"
            ]
         },
         "CardInfo" : {
            "properties" : {
               "authentication" : {
                  "description" : "Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.",
                  "$ref" : "#/components/schemas/Authentication"
               },
               "brand" : {
                  "description" : "The brand of the payment instrument.\nPossible values: **visa**, **mc**.",
                  "type" : "string"
               },
               "brandVariant" : {
                  "description" : "The brand variant of the payment instrument.\n>Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.",
                  "type" : "string"
               },
               "cardholderName" : {
                  "description" : "The name of the cardholder.\n Maximum length: 26 characters.",
                  "maxLength" : 26,
                  "type" : "string"
               },
               "configuration" : {
                  "description" : "Settings required when creating a physical card. \n\nReach out to your Adyen contact to get the values that you can send in this object.",
                  "$ref" : "#/components/schemas/CardConfiguration"
               },
               "deliveryContact" : {
                  "x-addedInVersion" : "2",
                  "description" : "The delivery contact (name and address) for physical card delivery.",
                  "$ref" : "#/components/schemas/DeliveryContact"
               },
               "formFactor" : {
                  "description" : "The form factor of the card.\nPossible values: **virtual**, **physical**.",
                  "enum" : [
                     "physical",
                     "unknown",
                     "virtual"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "formFactor",
               "cardholderName",
               "brand",
               "brandVariant"
            ]
         },
         "ContactDetails" : {
            "properties" : {
               "address" : {
                  "description" : "The address of the account holder.",
                  "$ref" : "#/components/schemas/Address"
               },
               "email" : {
                  "description" : "The email address of the account holder.",
                  "type" : "string"
               },
               "phone" : {
                  "description" : "The phone number of the account holder.",
                  "$ref" : "#/components/schemas/Phone"
               },
               "webAddress" : {
                  "description" : "The URL of the account holder's website.",
                  "type" : "string"
               }
            },
            "required" : [
               "email",
               "phone",
               "address"
            ]
         },
         "CountriesRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "List of two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes.",
                  "items" : {
                     "type" : "string"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "CronSweepSchedule" : {
            "additionalProperties" : false,
            "properties" : {
               "cronExpression" : {
                  "description" : "A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.\n\nThe expression must have five values separated by a single space in the following order:\n\n* Minute: **0-59**\n\n* Hour: **0-23**\n\n* Day of the month: **1-31**\n\n* Month: **1-12** or **JAN-DEC**\n\n* Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.\n\nThe following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and **/**. See [crontab guru](https://crontab.guru/) for more examples.",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The schedule type.\n\nPossible values:\n\n* **cron**: push out funds based on a cron expression.\n\n* **daily**: push out funds daily at 07:00 AM CET.\n\n* **weekly**: push out funds every Monday at 07:00 AM CET.\n\n* **monthly**: push out funds every first of the month at 07:00 AM CET.\n\n* **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.",
                  "enum" : [
                     "daily",
                     "weekly",
                     "monthly",
                     "balance",
                     "cron"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "cronExpression"
            ]
         },
         "DeliveryContact" : {
            "properties" : {
               "address" : {
                  "description" : "The address of the contact.",
                  "$ref" : "#/components/schemas/Address-2"
               },
               "email" : {
                  "description" : "The email address of the contact.",
                  "type" : "string"
               },
               "fullPhoneNumber" : {
                  "description" : "The full phone number of the contact provided as a single string. It will be handled as a landline phone.\n**Examples:** \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"",
                  "type" : "string"
               },
               "name" : {
                  "description" : "The name of the contact.",
                  "$ref" : "#/components/schemas/Name"
               },
               "phoneNumber" : {
                  "description" : "The phone number of the contact.",
                  "$ref" : "#/components/schemas/PhoneNumber"
               },
               "webAddress" : {
                  "description" : "The URL of the contact's website.",
                  "type" : "string"
               }
            },
            "required" : [
               "name",
               "address"
            ]
         },
         "DifferentCurrenciesRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "Checks the currency of the payment against the currency of the payment instrument.\n\nPossible values:\n\n- **true**: The currency of the payment is different from the currency of the payment instrument.\n\n- **false**: The currencies are the same.\n\n",
                  "type" : "boolean"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "Duration" : {
            "properties" : {
               "unit" : {
                  "description" : "The unit of time. You can only use **minutes** and **hours** if the `interval.type` is **sliding**.\n\nPossible values: **minutes**, **hours**, **days**, **weeks**, or **months**",
                  "enum" : [
                     "days",
                     "hours",
                     "minutes",
                     "months",
                     "weeks"
                  ],
                  "type" : "string"
               },
               "value" : {
                  "description" : "The length of time by the unit. For example, 5 days.\n\nThe maximum duration is 90 days or an equivalent in other units. For example, 3 months.",
                  "format" : "int32",
                  "type" : "integer"
               }
            }
         },
         "EntryModesRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "List of point-of-sale entry modes.\n\nPossible values: **barcode**, **chip**, **cof**, **contactless**, **magstripe**, **manual**, **ocr**, **server**.\n\n",
                  "items" : {
                     "enum" : [
                        "barcode",
                        "chip",
                        "cof",
                        "contactless",
                        "magstripe",
                        "manual",
                        "ocr",
                        "server",
                        "unknown"
                     ],
                     "type" : "string"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "Expiry" : {
            "properties" : {
               "month" : {
                  "description" : "The month in which the card will expire.",
                  "type" : "string"
               },
               "year" : {
                  "description" : "The year in which the card will expire.",
                  "type" : "string"
               }
            }
         },
         "InternationalTransactionRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "Boolean indicating whether transaction is an international transaction.\n\nPossible values:\n\n- **true**: The transaction is an international transaction.\n\n- **false**: The transaction is a domestic transaction.\n\n",
                  "type" : "boolean"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "InvalidField" : {
            "properties" : {
               "message" : {
                  "description" : "Description of the validation error.",
                  "type" : "string"
               },
               "name" : {
                  "description" : "The field that has an invalid value.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The invalid value.",
                  "type" : "string"
               }
            },
            "required" : [
               "name",
               "value",
               "message"
            ]
         },
         "JSONObject" : {
            "properties" : {
               "paths" : {
                  "items" : {
                     "$ref" : "#/components/schemas/JSONPath"
                  },
                  "type" : "array"
               },
               "rootPath" : {
                  "$ref" : "#/components/schemas/JSONPath"
               }
            }
         },
         "JSONPath" : {
            "properties" : {
               "content" : {
                  "items" : {
                     "type" : "string"
                  },
                  "type" : "array"
               }
            }
         },
         "MatchingTransactionsRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The number of transactions.",
                  "format" : "int32",
                  "type" : "integer"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "MccsRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "List of merchant category codes (MCCs).",
                  "items" : {
                     "type" : "string"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "MerchantAcquirerPair" : {
            "properties" : {
               "acquirerId" : {
                  "description" : "The acquirer ID.",
                  "type" : "string"
               },
               "merchantId" : {
                  "description" : "The merchant identification number (MID).",
                  "type" : "string"
               }
            }
         },
         "MerchantsRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "List of merchant ID and acquirer ID pairs.",
                  "items" : {
                     "$ref" : "#/components/schemas/MerchantAcquirerPair"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "Name" : {
            "properties" : {
               "firstName" : {
                  "description" : "The first name.",
                  "type" : "string"
               },
               "lastName" : {
                  "description" : "The last name.",
                  "type" : "string"
               }
            },
            "required" : [
               "firstName",
               "lastName"
            ]
         },
         "PaginatedAccountHoldersResponse" : {
            "properties" : {
               "accountHolders" : {
                  "description" : "List of account holders.",
                  "items" : {
                     "$ref" : "#/components/schemas/AccountHolder"
                  },
                  "type" : "array"
               },
               "hasNext" : {
                  "description" : "Indicates whether there are more items on the next page.",
                  "type" : "boolean"
               },
               "hasPrevious" : {
                  "description" : "Indicates whether there are more items on the previous page.",
                  "type" : "boolean"
               }
            },
            "required" : [
               "accountHolders",
               "hasPrevious",
               "hasNext"
            ]
         },
         "PaginatedBalanceAccountsResponse" : {
            "properties" : {
               "balanceAccounts" : {
                  "description" : "List of balance accounts.",
                  "items" : {
                     "$ref" : "#/components/schemas/BalanceAccount"
                  },
                  "type" : "array"
               },
               "hasNext" : {
                  "description" : "Indicates whether there are more items on the next page.",
                  "type" : "boolean"
               },
               "hasPrevious" : {
                  "description" : "Indicates whether there are more items on the previous page.",
                  "type" : "boolean"
               }
            },
            "required" : [
               "balanceAccounts",
               "hasPrevious",
               "hasNext"
            ]
         },
         "PaginatedPaymentInstrumentsResponse" : {
            "properties" : {
               "hasNext" : {
                  "description" : "Indicates whether there are more items on the next page.",
                  "type" : "boolean"
               },
               "hasPrevious" : {
                  "description" : "Indicates whether there are more items on the previous page.",
                  "type" : "boolean"
               },
               "paymentInstruments" : {
                  "description" : "List of payment instruments associated with the balance account.",
                  "items" : {
                     "$ref" : "#/components/schemas/PaymentInstrument"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "paymentInstruments",
               "hasPrevious",
               "hasNext"
            ]
         },
         "PaymentInstrument" : {
            "properties" : {
               "balanceAccountId" : {
                  "description" : "The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.",
                  "type" : "string"
               },
               "bankAccount" : {
                  "description" : "Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.",
                  "$ref" : "#/components/schemas/BankAccount"
               },
               "card" : {
                  "description" : "Contains information about the card payment instrument. Returned when you create a payment instrument with `type` **card**.",
                  "$ref" : "#/components/schemas/Card"
               },
               "description" : {
                  "description" : "Your description for the payment instrument, maximum 300 characters.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "id" : {
                  "description" : "The unique identifier of the payment instrument.",
                  "type" : "string"
               },
               "issuingCountryCode" : {
                  "description" : "The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.",
                  "type" : "string"
               },
               "paymentInstrumentGroupId" : {
                  "description" : "The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.",
                  "type" : "string"
               },
               "reference" : {
                  "description" : "Your reference for the payment instrument, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "status" : {
                  "x-enum" : [
                     {
                        "description" : "The payment instrument is active and can be used to make payments.",
                        "value" : "active"
                     },
                     {
                        "description" : "The payment instrument is inactive and cannot be used to make payments.",
                        "value" : "inactive"
                     },
                     {
                        "description" : "The payment instrument is suspended. Either because it was stolen or lost.",
                        "value" : "suspended"
                     },
                     {
                        "description" : "The payment instrument is permanently closed. This action cannot be undone.",
                        "value" : "closed"
                     }
                  ],
                  "description" : "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n",
                  "enum" : [
                     "active",
                     "closed",
                     "inactive",
                     "suspended"
                  ],
                  "type" : "string"
               },
               "statusReason" : {
                  "x-addedInVersion" : "2",
                  "description" : "The reason for updating the status of the payment instrument.\n\nPossible values: **lost**, **stolen**, **damaged**, **suspectedFraud**, **expired**, **endOfLife**, **accountClosure**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.",
                  "enum" : [
                     "accountClosure",
                     "damaged",
                     "endOfLife",
                     "expired",
                     "lost",
                     "other",
                     "stolen",
                     "suspectedFraud"
                  ],
                  "type" : "string"
               },
               "type" : {
                  "description" : "Type of payment instrument.\n\nPossible value: **card**, **bankAccount**. ",
                  "enum" : [
                     "bankAccount",
                     "card"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "balanceAccountId",
               "issuingCountryCode",
               "type",
               "id"
            ]
         },
         "PaymentInstrumentGroup" : {
            "properties" : {
               "balancePlatform" : {
                  "description" : "The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the payment instrument group belongs.",
                  "type" : "string"
               },
               "description" : {
                  "description" : "Your description for the payment instrument group, maximum 300 characters.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "id" : {
                  "description" : "The unique identifier of the payment instrument group.",
                  "type" : "string"
               },
               "properties" : {
                  "additionalProperties" : {
                     "type" : "string"
                  },
                  "description" : "Properties of the payment instrument group.",
                  "type" : "object"
               },
               "reference" : {
                  "description" : "Your reference for the payment instrument group, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "txVariant" : {
                  "description" : "The tx variant of the payment instrument group.",
                  "type" : "string"
               }
            },
            "required" : [
               "balancePlatform",
               "txVariant"
            ]
         },
         "PaymentInstrumentGroupInfo" : {
            "properties" : {
               "balancePlatform" : {
                  "description" : "The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the payment instrument group belongs.",
                  "type" : "string"
               },
               "description" : {
                  "description" : "Your description for the payment instrument group, maximum 300 characters.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "properties" : {
                  "additionalProperties" : {
                     "type" : "string"
                  },
                  "description" : "Properties of the payment instrument group.",
                  "type" : "object"
               },
               "reference" : {
                  "description" : "Your reference for the payment instrument group, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "txVariant" : {
                  "description" : "The tx variant of the payment instrument group.",
                  "type" : "string"
               }
            },
            "required" : [
               "balancePlatform",
               "txVariant"
            ]
         },
         "PaymentInstrumentInfo" : {
            "properties" : {
               "balanceAccountId" : {
                  "description" : "The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.",
                  "type" : "string"
               },
               "card" : {
                  "description" : "Contains information about the card. Required when you create a payment instrument of `type` **card**.",
                  "$ref" : "#/components/schemas/CardInfo"
               },
               "description" : {
                  "description" : "Your description for the payment instrument, maximum 300 characters.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "issuingCountryCode" : {
                  "description" : "The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.",
                  "type" : "string"
               },
               "paymentInstrumentGroupId" : {
                  "description" : "The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.",
                  "type" : "string"
               },
               "reference" : {
                  "description" : "Your reference for the payment instrument, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "status" : {
                  "x-enum" : [
                     {
                        "description" : "The payment instrument is active and can be used to make payments.",
                        "value" : "active"
                     },
                     {
                        "description" : "The payment instrument is inactive and cannot be used to make payments.",
                        "value" : "inactive"
                     },
                     {
                        "description" : "The payment instrument is suspended. Either because it was stolen or lost.",
                        "value" : "suspended"
                     },
                     {
                        "description" : "The payment instrument is permanently closed. This action cannot be undone.",
                        "value" : "closed"
                     }
                  ],
                  "description" : "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n",
                  "enum" : [
                     "active",
                     "closed",
                     "inactive",
                     "suspended"
                  ],
                  "type" : "string"
               },
               "statusReason" : {
                  "x-addedInVersion" : "2",
                  "description" : "The reason for updating the status of the payment instrument.\n\nPossible values: **lost**, **stolen**, **damaged**, **suspectedFraud**, **expired**, **endOfLife**, **accountClosure**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.",
                  "enum" : [
                     "accountClosure",
                     "damaged",
                     "endOfLife",
                     "expired",
                     "lost",
                     "other",
                     "stolen",
                     "suspectedFraud"
                  ],
                  "type" : "string"
               },
               "type" : {
                  "description" : "Type of payment instrument.\n\nPossible value: **card**, **bankAccount**. ",
                  "enum" : [
                     "bankAccount",
                     "card"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "balanceAccountId",
               "issuingCountryCode",
               "type"
            ]
         },
         "PaymentInstrumentUpdateRequest" : {
            "properties" : {
               "balanceAccountId" : {
                  "description" : "The unique identifier of the balance account associated with this payment instrument.\n>You can only change the balance account ID if the payment instrument has **inactive** status.",
                  "type" : "string"
               },
               "card" : {
                  "description" : "Object that contains information about the card payment instrument.",
                  "$ref" : "#/components/schemas/CardInfo"
               },
               "status" : {
                  "x-enum" : [
                     {
                        "description" : "The payment instrument is active and can be used to make payments.",
                        "value" : "active"
                     },
                     {
                        "description" : "The payment instrument is inactive and cannot be used to make payments.",
                        "value" : "inactive"
                     },
                     {
                        "description" : "The payment instrument is suspended. Either because it was stolen or lost.",
                        "value" : "suspended"
                     },
                     {
                        "description" : "The payment instrument is permanently closed. This action cannot be undone.",
                        "value" : "closed"
                     }
                  ],
                  "description" : "The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **inactive**.\n\nPossible values: \n\n * **active**:  The payment instrument is active and can be used to make payments. \n\n * **inactive**: The payment instrument is inactive and cannot be used to make payments. \n\n * **suspended**: The payment instrument is suspended, either because it was stolen or lost. \n\n * **closed**: The payment instrument is permanently closed. This action cannot be undone. \n\n",
                  "enum" : [
                     "active",
                     "closed",
                     "inactive",
                     "suspended"
                  ],
                  "type" : "string"
               },
               "statusComment" : {
                  "description" : "Comment for the status of the payment instrument.\n\nRequired if `statusReason` is **other**.",
                  "type" : "string"
               },
               "statusReason" : {
                  "x-addedInVersion" : "2",
                  "description" : "The reason for updating the status of the payment instrument.\n\nPossible values: **lost**, **stolen**, **damaged**, **suspectedFraud**, **expired**, **endOfLife**, **accountClosure**, **other**.\nIf the reason is **other**, you must also send the `statusComment` parameter describing the status change.",
                  "enum" : [
                     "accountClosure",
                     "damaged",
                     "endOfLife",
                     "expired",
                     "lost",
                     "other",
                     "stolen",
                     "suspectedFraud"
                  ],
                  "type" : "string"
               }
            }
         },
         "Phone" : {
            "properties" : {
               "number" : {
                  "description" : "The full phone number provided as a single string. \nFor example, **\"0031 6 11 22 33 44\"**, **\"+316/1122-3344\"**, \n\n or **\"(0031) 611223344\"**.",
                  "type" : "string"
               },
               "type" : {
                  "description" : "Type of phone number.\nPossible values: \n**Landline**, **Mobile**.\n",
                  "enum" : [
                     "landline",
                     "mobile"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "number",
               "type"
            ]
         },
         "PhoneNumber" : {
            "properties" : {
               "phoneCountryCode" : {
                  "description" : "The two-character ISO-3166-1 alpha-2 country code of the phone number.\nFor example, **US** or **NL**.",
                  "type" : "string"
               },
               "phoneNumber" : {
                  "description" : "The phone number.\nThe inclusion of the phone number country code is not necessary.",
                  "type" : "string"
               },
               "phoneType" : {
                  "description" : "The type of the phone number.\nPossible values: **Landline**, **Mobile**, **SIP**, **Fax**.",
                  "enum" : [
                     "Fax",
                     "Landline",
                     "Mobile",
                     "SIP"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "phoneCountryCode",
               "phoneNumber"
            ]
         },
         "ProcessingTypesRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "List of processing types.\n\nPossible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **recurring**, **token**.\n\n",
                  "items" : {
                     "enum" : [
                        "atmWithdraw",
                        "balanceInquiry",
                        "ecommerce",
                        "moto",
                        "pos",
                        "recurring",
                        "token",
                        "unknown"
                     ],
                     "type" : "string"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "RemediatingAction" : {
            "properties" : {
               "code" : {
                  "description" : "The remediating action code.",
                  "type" : "string"
               },
               "message" : {
                  "description" : "A description of how you can resolve the verification error.",
                  "type" : "string"
               }
            }
         },
         "RestServiceError" : {
            "properties" : {
               "detail" : {
                  "description" : "A human-readable explanation specific to this occurrence of the problem.",
                  "type" : "string"
               },
               "errorCode" : {
                  "description" : "A code that identifies the problem type.",
                  "type" : "string"
               },
               "instance" : {
                  "description" : "A unique URI that identifies the specific occurrence of the problem.",
                  "type" : "string"
               },
               "invalidFields" : {
                  "description" : "Detailed explanation of each validation error, when applicable.",
                  "items" : {
                     "$ref" : "#/components/schemas/InvalidField"
                  },
                  "type" : "array"
               },
               "requestId" : {
                  "description" : "A unique reference for the request, essentially the same as `pspReference`.",
                  "type" : "string"
               },
               "response" : {
                  "description" : "JSON response payload.",
                  "$ref" : "#/components/schemas/JSONObject"
               },
               "status" : {
                  "description" : "The HTTP status code.",
                  "format" : "int32",
                  "type" : "integer"
               },
               "title" : {
                  "description" : "A short, human-readable summary of the problem type.",
                  "type" : "string"
               },
               "type" : {
                  "description" : "A URI that identifies the problem type, pointing to human-readable documentation on this problem type.",
                  "type" : "string"
               }
            },
            "required" : [
               "type",
               "errorCode",
               "title",
               "detail",
               "status"
            ]
         },
         "SweepConfigurationV2" : {
            "properties" : {
               "counterparty" : {
                  "description" : "The destination or the source of the funds, depending on the `type`.\n\nEither a `balanceAccountId`, `transferInstrumentId`, or `merchantAccount` is required.",
                  "$ref" : "#/components/schemas/SweepCounterparty"
               },
               "currency" : {
                  "description" : "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes) in uppercase. For example, **EUR**.\n\nThe sweep currency must match any of the [balances currencies](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balanceAccounts/{id}__resParam_balances).",
                  "type" : "string"
               },
               "description" : {
                  "description" : "The message that will be used in the sweep transfer's description body with a maximum length of 140 characters.\n\nIf the message is longer after replacing placeholders, the message will be cut off at 140 characters.",
                  "type" : "string"
               },
               "id" : {
                  "description" : "The unique identifier of the sweep.",
                  "readOnly" : true,
                  "type" : "string"
               },
               "schedule" : {
                  "description" : "The schedule when the `triggerAmount` is evaluated. If the balance meets the threshold, funds are pushed out of or pulled in to the balance account.",
                  "oneOf" : [
                     {
                        "$ref" : "#/components/schemas/CronSweepSchedule"
                     },
                     {
                        "$ref" : "#/components/schemas/SweepSchedule"
                     }
                  ]
               },
               "status" : {
                  "x-enum" : [
                     {
                        "description" : "The sweep is enabled and funds will be pulled in or pushed out based on the defined configuration",
                        "value" : "active"
                     },
                     {
                        "description" : "The sweep is disabled and cannot be triggered.",
                        "value" : "inactive"
                     }
                  ],
                  "description" : "The status of the sweep. If not provided, by default, this is set to **active**.\n\nPossible values: \n\n * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration. \n\n * **inactive**: the sweep is disabled and cannot be triggered. \n\n",
                  "enum" : [
                     "active",
                     "inactive"
                  ],
                  "type" : "string"
               },
               "sweepAmount" : {
                  "description" : "The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both.",
                  "$ref" : "#/components/schemas/Amount"
               },
               "targetAmount" : {
                  "description" : "The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both.",
                  "$ref" : "#/components/schemas/Amount"
               },
               "triggerAmount" : {
                  "description" : "The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.\n\n* For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.\n\n* For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account.",
                  "$ref" : "#/components/schemas/Amount"
               },
               "type" : {
                  "default" : "push",
                  "description" : "The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.\n\nPossible values:\n\n * **push**: _push out funds_ to a destination balance account or transfer instrument.\n\n * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.",
                  "enum" : [
                     "pull",
                     "push"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "id",
               "schedule",
               "currency",
               "counterparty"
            ]
         },
         "SweepCounterparty" : {
            "properties" : {
               "balanceAccountId" : {
                  "description" : "The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).\n\n You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.",
                  "type" : "string"
               },
               "merchantAccount" : {
                  "description" : "The merchant account that will be the source of funds, if you are processing payments with Adyen. You can only use this with sweeps of `type` **pull** and `schedule.type` **balance**.",
                  "type" : "string"
               },
               "transferInstrumentId" : {
                  "description" : "The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).\n\nYou can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.",
                  "type" : "string"
               }
            }
         },
         "SweepSchedule" : {
            "additionalProperties" : false,
            "properties" : {
               "type" : {
                  "description" : "The schedule type.\n\nPossible values:\n\n* **cron**: push out funds based on a cron expression.\n\n* **daily**: push out funds daily at 07:00 AM CET.\n\n* **weekly**: push out funds every Monday at 07:00 AM CET.\n\n* **monthly**: push out funds every first of the month at 07:00 AM CET.\n\n* **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.",
                  "enum" : [
                     "daily",
                     "weekly",
                     "monthly",
                     "balance",
                     "cron"
                  ],
                  "type" : "string"
               }
            }
         },
         "TimeOfDay" : {
            "properties" : {
               "endTime" : {
                  "description" : "The end time in a time-only ISO-8601 extended offset format. For example: **08:00:00+02:00**, **22:30:00-03:00**.\n\n",
                  "type" : "string"
               },
               "startTime" : {
                  "description" : "The start time in a time-only ISO-8601 extended offset format. For example: **08:00:00+02:00**, **22:30:00-03:00**.\n\n",
                  "type" : "string"
               }
            }
         },
         "TimeOfDayRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "$ref" : "#/components/schemas/TimeOfDay"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "TotalAmountRestriction" : {
            "properties" : {
               "operation" : {
                  "description" : "Defines how the condition must be evaluated.",
                  "type" : "string"
               },
               "value" : {
                  "description" : "The amount value and currency.",
                  "$ref" : "#/components/schemas/Amount"
               }
            },
            "required" : [
               "operation"
            ]
         },
         "TransactionRule" : {
            "properties" : {
               "aggregationLevel" : {
                  "x-addedInVersion" : "2",
                  "description" : "The level at which data must be accumulated, used in rules with `type` **velocity** or **maxUsage**. The level must be the [same or lower in hierarchy](https://docs.adyen.com/issuing/transaction-rules#accumulate-data) than the `entityKey`.\n\nIf not provided, by default, the rule will accumulate data at the **paymentInstrument** level.\n\nPossible values: **paymentInstrument**, **paymentInstrumentGroup**, **balanceAccount**, **accountHolder**, **balancePlatform**.",
                  "type" : "string"
               },
               "description" : {
                  "description" : "Your description for the transaction rule, maximum 300 characters.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "endDate" : {
                  "description" : "The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided, the rule will be evaluated until the rule status is set to **inactive**.",
                  "type" : "string"
               },
               "entityKey" : {
                  "x-addedInVersion" : "2",
                  "description" : "The type and unique identifier of the resource to which the rule applies.",
                  "$ref" : "#/components/schemas/TransactionRuleEntityKey"
               },
               "id" : {
                  "description" : "The unique identifier of the transaction rule.",
                  "type" : "string"
               },
               "interval" : {
                  "description" : "The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) when the rule conditions apply.",
                  "$ref" : "#/components/schemas/TransactionRuleInterval"
               },
               "outcomeType" : {
                  "x-addedInVersion" : "2",
                  "description" : "The [outcome](https://docs.adyen.com/issuing/transaction-rules#outcome) that will be applied when a transaction meets the conditions of the rule. If not provided, by default, this is set to **hardBlock**.\n\nPossible values:\n\n * **hardBlock**: the transaction is declined.\n\n* **scoreBased**: the transaction is assigned the `score` you specified. Adyen calculates the total score and if it exceeds 100, the transaction is declined.",
                  "enum" : [
                     "hardBlock",
                     "scoreBased"
                  ],
                  "type" : "string"
               },
               "reference" : {
                  "description" : "Your reference for the transaction rule, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "ruleRestrictions" : {
                  "x-addedInVersion" : "2",
                  "description" : "Contains one or more objects that define the [rule conditions](https://docs.adyen.com/issuing/transaction-rules#conditions). Each object must have a value and an operation which determines how the values must be evaluated.\n\nFor example, a `countries` object can have a list of country codes **[\"US\", \"CA\"]** in the `value` field and **anyMatch** in the `operation` field.",
                  "$ref" : "#/components/schemas/TransactionRuleRestrictions"
               },
               "score" : {
                  "x-addedInVersion" : "2",
                  "description" : "A positive or negative score applied to the transaction if it meets the conditions of the rule. Required when `outcomeType` is **scoreBased**.  The value must be between **-100** and **100**.",
                  "format" : "int32",
                  "type" : "integer"
               },
               "startDate" : {
                  "description" : "The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**. \n\n",
                  "type" : "string"
               },
               "status" : {
                  "description" : "The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created \nwith an **active** status. \n\nPossible values: **active**, **inactive**.",
                  "enum" : [
                     "active",
                     "inactive"
                  ],
                  "type" : "string"
               },
               "type" : {
                  "x-enum" : [
                     {
                        "description" : "The rule provides categories (such as country and MCC) where payments must be allowed.",
                        "value" : "allowList"
                     },
                     {
                        "description" : "The rule provides categories (such as country and MCC) where payments must be blocked.",
                        "value" : "blockList"
                     },
                     {
                        "description" : "The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.",
                        "value" : "velocity"
                     },
                     {
                        "description" : "The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.",
                        "value" : "maxUsage"
                     }
                  ],
                  "description" : "The [type of rule](https://docs.adyen.com/issuing/transaction-rules#rule-types), which defines if a rule blocks transactions based on individual characteristics or accumulates data.\n\nPossible values:\n * **blockList**: decline a transaction when the conditions are met.\n * **maxUsage**: add the amount or number of transactions for the lifetime of a payment instrument, and then decline a transaction when the specified limits are met.\n * **velocity**: add the amount or number of transactions based on a specified time interval, and then decline a transaction when the specified limits are met.\n",
                  "enum" : [
                     "allowList",
                     "blockList",
                     "maxUsage",
                     "velocity"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "type",
               "description",
               "reference",
               "entityKey",
               "interval",
               "ruleRestrictions"
            ]
         },
         "TransactionRuleEntityKey" : {
            "properties" : {
               "entityReference" : {
                  "description" : "The unique identifier of the resource.",
                  "type" : "string"
               },
               "entityType" : {
                  "description" : "The type of resource.\n\nPossible values: **balancePlatform**, **paymentInstrumentGroup**, **accountHolder**, **balanceAccount**, or **paymentInstrument**.",
                  "type" : "string"
               }
            }
         },
         "TransactionRuleInfo" : {
            "properties" : {
               "aggregationLevel" : {
                  "x-addedInVersion" : "2",
                  "description" : "The level at which data must be accumulated, used in rules with `type` **velocity** or **maxUsage**. The level must be the [same or lower in hierarchy](https://docs.adyen.com/issuing/transaction-rules#accumulate-data) than the `entityKey`.\n\nIf not provided, by default, the rule will accumulate data at the **paymentInstrument** level.\n\nPossible values: **paymentInstrument**, **paymentInstrumentGroup**, **balanceAccount**, **accountHolder**, **balancePlatform**.",
                  "type" : "string"
               },
               "description" : {
                  "description" : "Your description for the transaction rule, maximum 300 characters.",
                  "maxLength" : 300,
                  "type" : "string"
               },
               "endDate" : {
                  "description" : "The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided, the rule will be evaluated until the rule status is set to **inactive**.",
                  "type" : "string"
               },
               "entityKey" : {
                  "x-addedInVersion" : "2",
                  "description" : "The type and unique identifier of the resource to which the rule applies.",
                  "$ref" : "#/components/schemas/TransactionRuleEntityKey"
               },
               "interval" : {
                  "description" : "The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) when the rule conditions apply.",
                  "$ref" : "#/components/schemas/TransactionRuleInterval"
               },
               "outcomeType" : {
                  "x-addedInVersion" : "2",
                  "description" : "The [outcome](https://docs.adyen.com/issuing/transaction-rules#outcome) that will be applied when a transaction meets the conditions of the rule. If not provided, by default, this is set to **hardBlock**.\n\nPossible values:\n\n * **hardBlock**: the transaction is declined.\n\n* **scoreBased**: the transaction is assigned the `score` you specified. Adyen calculates the total score and if it exceeds 100, the transaction is declined.",
                  "enum" : [
                     "hardBlock",
                     "scoreBased"
                  ],
                  "type" : "string"
               },
               "reference" : {
                  "description" : "Your reference for the transaction rule, maximum 150 characters.",
                  "maxLength" : 150,
                  "type" : "string"
               },
               "ruleRestrictions" : {
                  "x-addedInVersion" : "2",
                  "description" : "Contains one or more objects that define the [rule conditions](https://docs.adyen.com/issuing/transaction-rules#conditions). Each object must have a value and an operation which determines how the values must be evaluated.\n\nFor example, a `countries` object can have a list of country codes **[\"US\", \"CA\"]** in the `value` field and **anyMatch** in the `operation` field.",
                  "$ref" : "#/components/schemas/TransactionRuleRestrictions"
               },
               "score" : {
                  "x-addedInVersion" : "2",
                  "description" : "A positive or negative score applied to the transaction if it meets the conditions of the rule. Required when `outcomeType` is **scoreBased**.  The value must be between **-100** and **100**.",
                  "format" : "int32",
                  "type" : "integer"
               },
               "startDate" : {
                  "description" : "The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\nIf not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**. \n\n",
                  "type" : "string"
               },
               "status" : {
                  "description" : "The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created \nwith an **active** status. \n\nPossible values: **active**, **inactive**.",
                  "enum" : [
                     "active",
                     "inactive"
                  ],
                  "type" : "string"
               },
               "type" : {
                  "x-enum" : [
                     {
                        "description" : "The rule provides categories (such as country and MCC) where payments must be allowed.",
                        "value" : "allowList"
                     },
                     {
                        "description" : "The rule provides categories (such as country and MCC) where payments must be blocked.",
                        "value" : "blockList"
                     },
                     {
                        "description" : "The rule sets limits for the maximum amount or maximum number of transactions for a given time interval.",
                        "value" : "velocity"
                     },
                     {
                        "description" : "The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.",
                        "value" : "maxUsage"
                     }
                  ],
                  "description" : "The [type of rule](https://docs.adyen.com/issuing/transaction-rules#rule-types), which defines if a rule blocks transactions based on individual characteristics or accumulates data.\n\nPossible values:\n * **blockList**: decline a transaction when the conditions are met.\n * **maxUsage**: add the amount or number of transactions for the lifetime of a payment instrument, and then decline a transaction when the specified limits are met.\n * **velocity**: add the amount or number of transactions based on a specified time interval, and then decline a transaction when the specified limits are met.\n",
                  "enum" : [
                     "allowList",
                     "blockList",
                     "maxUsage",
                     "velocity"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "type",
               "description",
               "reference",
               "entityKey",
               "interval",
               "ruleRestrictions"
            ]
         },
         "TransactionRuleInterval" : {
            "properties" : {
               "dayOfMonth" : {
                  "x-addedInVersion" : "2",
                  "description" : "The day of month, used when the `duration.unit` is **months**. If not provided, by default, this is set to **1**, the first day of the month.",
                  "format" : "int32",
                  "type" : "integer"
               },
               "dayOfWeek" : {
                  "x-addedInVersion" : "2",
                  "description" : "The day of week, used when the `duration.unit` is **weeks**. If not provided, by default, this is set to **monday**.\n\nPossible values: **sunday**, **monday**, **tuesday**, **wednesday**, **thursday**, **friday**.",
                  "enum" : [
                     "friday",
                     "monday",
                     "saturday",
                     "sunday",
                     "thursday",
                     "tuesday",
                     "wednesday"
                  ],
                  "type" : "string"
               },
               "duration" : {
                  "x-addedInVersion" : "2",
                  "description" : "The duration, which you can specify in hours, days, weeks, or months. The maximum duration is 90 days or an equivalent in other units. Required when the `type` is **rolling** or **sliding**.",
                  "$ref" : "#/components/schemas/Duration"
               },
               "timeOfDay" : {
                  "x-addedInVersion" : "2",
                  "description" : "The time of day, in **hh:mm:ss** format, used when the `duration.unit` is **hours**. If not provided, by default, this is set to **00:00:00**.",
                  "type" : "string"
               },
               "timeZone" : {
                  "x-addedInVersion" : "2",
                  "description" : "The [time zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For example, **Europe/Amsterdam**. By default, this is set to **UTC**.",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The [type of interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) during which the rule conditions and limits apply, and how often counters are reset.\n\nPossible values:\n  * **perTransaction**: conditions are evaluated and the counters are reset for every transaction.\n * **daily**: the counters are reset daily at 00:00:00 UTC.\n * **weekly**: the counters are reset every Monday at 00:00:00 UTC. \n * **monthly**: the counters reset every first day of the month at 00:00:00 UTC. \n * **lifetime**: conditions are applied to the lifetime of the payment instrument.\n * **rolling**: conditions are applied and the counters are reset based on a `duration`. If the reset date and time are not provided, Adyen applies the default reset time similar to fixed intervals. For example, if the duration is every two weeks, the counter resets every third Monday at 00:00:00 UTC.\n * **sliding**: conditions are applied and the counters are reset based on the current time and a `duration` that you specify.",
                  "enum" : [
                     "daily",
                     "lifetime",
                     "monthly",
                     "perTransaction",
                     "rolling",
                     "sliding",
                     "weekly"
                  ],
                  "type" : "string"
               }
            },
            "required" : [
               "type"
            ]
         },
         "TransactionRuleResponse" : {
            "properties" : {
               "transactionRule" : {
                  "description" : "The transaction rule.",
                  "$ref" : "#/components/schemas/TransactionRule"
               }
            }
         },
         "TransactionRuleRestrictions" : {
            "properties" : {
               "activeNetworkTokens" : {
                  "description" : "The total number of tokens that a card can have across different kinds of digital wallets on the user's phones, watches, or other wearables.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**.",
                  "$ref" : "#/components/schemas/ActiveNetworkTokensRestriction"
               },
               "brandVariants" : {
                  "description" : "List of card brand variants and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**.",
                  "$ref" : "#/components/schemas/BrandVariantsRestriction"
               },
               "countries" : {
                  "description" : "List of countries and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**.",
                  "$ref" : "#/components/schemas/CountriesRestriction"
               },
               "differentCurrencies" : {
                  "description" : "Compares the currency of the payment against the currency of the payment instrument, and specifies the operation.\n\nSupported operations: **equals**, **notEquals**.",
                  "$ref" : "#/components/schemas/DifferentCurrenciesRestriction"
               },
               "entryModes" : {
                  "description" : "List of point-of-sale entry modes and the operation..\n\nSupported operations: **anyMatch**, **noneMatch**.",
                  "$ref" : "#/components/schemas/EntryModesRestriction"
               },
               "internationalTransaction" : {
                  "description" : "Indicates whether transaction is an international transaction and specifies the operation.\n\nSupported operations: **equals**, **notEquals**.",
                  "$ref" : "#/components/schemas/InternationalTransactionRestriction"
               },
               "matchingTransactions" : {
                  "description" : "The number of transactions and the operation.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**.",
                  "$ref" : "#/components/schemas/MatchingTransactionsRestriction"
               },
               "mccs" : {
                  "description" : "List of merchant category codes (MCCs) and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**.",
                  "$ref" : "#/components/schemas/MccsRestriction"
               },
               "merchants" : {
                  "description" : "List of merchant ID and acquirer ID pairs, and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**.",
                  "$ref" : "#/components/schemas/MerchantsRestriction"
               },
               "processingTypes" : {
                  "description" : "List of processing types and the operation.\n\nSupported operations: **anyMatch**, **noneMatch**.",
                  "$ref" : "#/components/schemas/ProcessingTypesRestriction"
               },
               "timeOfDay" : {
                  "description" : "A start and end time in a time-only ISO-8601 extended offset format. Supported operations: **equals**, **notEquals**.",
                  "$ref" : "#/components/schemas/TimeOfDayRestriction"
               },
               "totalAmount" : {
                  "description" : "The total amount and the operation.\n\nSupported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**, **greaterThan**, **lessThanOrEqualTo**, **lessThan**.",
                  "$ref" : "#/components/schemas/TotalAmountRestriction"
               }
            }
         },
         "TransactionRulesResponse" : {
            "properties" : {
               "transactionRules" : {
                  "description" : "List of transaction rules.",
                  "items" : {
                     "$ref" : "#/components/schemas/TransactionRule"
                  },
                  "type" : "array"
               }
            }
         },
         "VerificationError" : {
            "properties" : {
               "code" : {
                  "description" : "The verification error code.",
                  "type" : "string"
               },
               "message" : {
                  "description" : "A description of the error.",
                  "type" : "string"
               },
               "remediatingActions" : {
                  "description" : "Contains the actions that you can take to resolve the verification error.",
                  "items" : {
                     "$ref" : "#/components/schemas/RemediatingAction"
                  },
                  "type" : "array"
               },
               "subErrors" : {
                  "description" : "Contains more granular information about the verification error.",
                  "items" : {
                     "$ref" : "#/components/schemas/VerificationError-recursive"
                  },
                  "type" : "array"
               },
               "type" : {
                  "description" : "The type of error.\n\n Possible values: **invalidInput**, **dataMissing**.",
                  "enum" : [
                     "dataMissing",
                     "invalidInput",
                     "pendingStatus"
                  ],
                  "type" : "string"
               }
            }
         },
         "VerificationError-recursive" : {
            "properties" : {
               "code" : {
                  "description" : "The verification error code.",
                  "type" : "string"
               },
               "message" : {
                  "description" : "A description of the error.",
                  "type" : "string"
               },
               "type" : {
                  "description" : "The type of error.\n\n Possible values: **invalidInput**, **dataMissing**.",
                  "enum" : [
                     "dataMissing",
                     "invalidInput",
                     "pendingStatus"
                  ],
                  "type" : "string"
               },
               "remediatingActions" : {
                  "description" : "Contains the actions that you can take to resolve the verification error.",
                  "items" : {
                     "$ref" : "#/components/schemas/RemediatingAction"
                  },
                  "type" : "array"
               }
            },
            "required" : [
               ]
         },
         "void" : {
            
         }
      },
      "securitySchemes" : {
         "ApiKeyAuth" : {
            "in" : "header",
            "name" : "X-API-Key",
            "type" : "apiKey"
         },
         "BasicAuth" : {
            "scheme" : "basic",
            "type" : "http"
         }
      },
      "examples" : {
         "delete-transactionRules-transactionRuleId-success-200" : {
            "summary" : "Transaction rule deleted",
            "description" : "Example response for successfully deleting a transaction rule",
            "value" : {
               "amount" : {
                  "currency" : "EUR",
                  "value" : 10000
               },
               "description" : "Allow up to 100 EUR per month",
               "interval" : {
                  "type" : "monthly"
               },
               "paymentInstrumentGroupId" : "PG3227C223222B5CMD3FJFKGZ",
               "reference" : "myRule16378",
               "startDate" : "2021-01-25T12:46:35",
               "type" : "velocity",
               "id" : "TR3227C223222B5CMDKQTBQ5M"
            }
         },
         "generic-400" : {
            "summary" : "Response code - 400 Bad request",
            "value" : {
               "type" : "https://docs.adyen.com/errors/general/bad-request",
               "title" : "Bad request",
               "status" : 400,
               "detail" : "Empty input which would have resulted in a null result.",
               "errorCode" : "00_400"
            }
         },
         "generic-401" : {
            "summary" : "Response code - 401 Unauthorized",
            "value" : {
               "type" : "https://docs.adyen.com/errors/security/unauthorized",
               "title" : "Unauthorized",
               "status" : 401,
               "errorCode" : "00_401"
            }
         },
         "generic-403" : {
            "summary" : "Response code - 403 Forbidden.",
            "value" : {
               "type" : "https://docs.adyen.com/errors/security/unauthorized",
               "title" : "Forbidden",
               "status" : 403,
               "detail" : "Not the right permission to access this service.",
               "errorCode" : "00_403"
            }
         },
         "generic-404" : {
            "summary" : "Response code 404 - Not found",
            "value" : {
               "type" : "https://docs.adyen.com/errors/general/not-found",
               "title" : "Not found",
               "status" : 404,
               "errorCode" : "00_404"
            }
         },
         "generic-422" : {
            "summary" : "Response code - 422 Unprocessable Entity.",
            "value" : {
               "type" : "https://docs.adyen.com/errors/general/invalid-field-value",
               "title" : "Invalid Payment Instrument information provided",
               "status" : 422,
               "detail" : "The balanceAccountId can only be changed when the status is Inactive or Requested",
               "requestId" : "1W1UI15PLVGC9V8O",
               "errorCode" : "30_031"
            }
         },
         "generic-500" : {
            "summary" : "Response code - 500 Internal Server Error",
            "value" : {
               "type" : "https://docs.adyen.com/errors/general/internal",
               "title" : "An internal error happened",
               "status" : 500,
               "detail" : "Unrecoverable error while trying to create payment instrument",
               "requestId" : "1WAF555PLWNTLYOQ",
               "errorCode" : "00_500"
            }
         },
         "generic-503" : {
            "summary" : "Response code - 503 Internal Server Error",
            "value" : {
               "type" : "https://docs.adyen.com/errors/general/processing-error",
               "title" : "Error processing request",
               "status" : 500,
               "detail" : "Error while determining the payment instrument workflow",
               "requestId" : "1W1UHY5O2CONU4R7",
               "errorCode" : "99_500"
            }
         },
         "get-accountHolders-id-balanceAccounts-success-200" : {
            "summary" : "List of balance accounts retrieved",
            "description" : "Example response when retrieving a list of balance accounts under an account holder",
            "value" : {
               "balanceAccounts" : [
                  {
                     "accountHolderId" : "AH32272223222B59K6ZKBBFNQ",
                     "defaultCurrencyCode" : "EUR",
                     "id" : "BA32272223222B59K6ZXHBFN6",
                     "status" : "Active"
                  },
                  {
                     "accountHolderId" : "AH32272223222B59K6ZKBBFNQ",
                     "defaultCurrencyCode" : "EUR",
                     "id" : "BA32272223222B59K72CKBFNJ",
                     "status" : "Active"
                  },
                  {
                     "accountHolderId" : "AH32272223222B59K6ZKBBFNQ",
                     "defaultCurrencyCode" : "EUR",
                     "id" : "BA32272223222B5BRR27B2M7G",
                     "status" : "Active"
                  }
               ],
               "hasNext" : true,
               "hasPrevious" : false
            }
         },
         "get-accountHolders-id-success-200" : {
            "summary" : "Account holder retrieved",
            "description" : "Example response when retrieving an account holder",
            "value" : {
               "balancePlatform" : "YOUR_BALANCE_PLATFORM",
               "contactDetails" : {
                  "address" : {
                     "city" : "Amsterdam",
                     "country" : "NL",
                     "houseNumberOrName" : "274",
                     "postalCode" : "1020CD",
                     "street" : "Brannan Street"
                  },
                  "email" : "s.hopper@example.com",
                  "phone" : {
                     "number" : "+315551231234",
                     "type" : "Mobile"
                  }
               },
               "description" : "S.Hopper - Staff 123",
               "id" : "AH32272223222B5CM4MWJ892H",
               "status" : "Active"
            }
         },
         "get-balanceAccounts-balanceAccountId-sweeps-success-200" : {
            "summary" : "Sweeps under a balance account retrieved",
            "description" : "Example response when retrieving sweeps under a balance account",
            "value" : {
               "hasNext" : false,
               "hasPrevious" : false,
               "sweeps" : [
                  {
                     "id" : "SWPC4227C224555B5FTD2NT2JV4WN5",
                     "schedule" : {
                        "type" : "daily"
                     },
                     "status" : "active",
                     "targetAmount" : {
                        "currency" : "EUR",
                        "value" : 0
                     },
                     "triggerAmount" : {
                        "currency" : "EUR",
                        "value" : 0
                     },
                     "type" : "push",
                     "counterparty" : {
                        "balanceAccountId" : "BA32272223222B5FTD2KR6TJD"
                     },
                     "currency" : "EUR"
                  }
               ]
            }
         },
         "get-balanceAccounts-balanceAccountId-sweeps-sweepId-success-200" : {
            "summary" : "Sweep retrieved",
            "description" : "Example response when retrieving a sweep",
            "value" : {
               "id" : "SWPC4227C224555B5FTD2NT2JV4WN5",
               "schedule" : {
                  "type" : "daily"
               },
               "status" : "active",
               "targetAmount" : {
                  "currency" : "EUR",
                  "value" : 0
               },
               "triggerAmount" : {
                  "currency" : "EUR",
                  "value" : 0
               },
               "type" : "push",
               "counterparty" : {
                  "balanceAccountId" : "BA32272223222B5FTD2KR6TJD"
               },
               "currency" : "EUR"
            }
         },
         "get-balanceAccounts-id-paymentInstruments-success-200" : {
            "summary" : "List of payment instruments retrieved",
            "description" : "Example response when retrieving a list of payment instruments under a balance account",
            "value" : {
               "hasNext" : "true",
               "hasPrevious" : "false",
               "paymentInstruments" : [
                  {
                     "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
                     "issuingCountryCode" : "GB",
                     "status" : "Active",
                     "type" : "card",
                     "card" : {
                        "brandVariant" : "mc",
                        "cardholderName" : "name",
                        "formFactor" : "virtual",
                        "bin" : "555544",
                        "expiration" : {
                           "month" : "12",
                           "year" : "2022"
                        },
                        "lastFour" : "2357",
                        "number" : "************2357"
                     },
                     "id" : "PI32272223222B59M5TM658DT"
                  },
                  {
                     "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
                     "issuingCountryCode" : "GB",
                     "status" : "Active",
                     "type" : "card",
                     "card" : {
                        "brandVariant" : "mc",
                        "cardholderName" : "name",
                        "formFactor" : "virtual",
                        "bin" : "555544",
                        "expiration" : {
                           "month" : "01",
                           "year" : "2023"
                        },
                        "lastFour" : "8331",
                        "number" : "************8331"
                     },
                     "id" : "PI32272223222B59PXDGQDLSF"
                  }
               ]
            }
         },
         "get-balanceAccounts-id-success-200" : {
            "summary" : "Balance account details retrieved",
            "description" : "Example response for retrieving a balance account",
            "value" : {
               "accountHolderId" : "AH32272223222B59K6RTQBFNZ",
               "defaultCurrencyCode" : "EUR",
               "balances" : [
                  {
                     "available" : 0,
                     "balance" : 0,
                     "currency" : "EUR",
                     "reserved" : 0
                  }
               ],
               "id" : "BA3227C223222B5BLP6JQC3FD",
               "status" : "Active"
            }
         },
         "get-balancePlatforms-id-accountHolders-success-200" : {
            "summary" : "List of account holders retrieved",
            "description" : "Example response when retrieving a list of account holders under a balance platform",
            "value" : {
               "accountHolders" : [
                  {
                     "contactDetails" : {
                        "address" : {
                           "city" : "Amsterdam",
                           "country" : "NL",
                           "houseNumberOrName" : "6",
                           "postalCode" : "12336750",
                           "street" : "Simon Carmiggeltstraat"
                        }
                     },
                     "description" : "J. Doe",
                     "id" : "AH32272223222B59DDWSCCMP7",
                     "status" : "Active"
                  },
                  {
                     "contactDetails" : {
                        "address" : {
                           "city" : "Amsterdam",
                           "country" : "NL",
                           "houseNumberOrName" : "11",
                           "postalCode" : "12336750",
                           "street" : "Simon Carmiggeltstraat"
                        }
                     },
                     "description" : "S. Hopper",
                     "id" : "AH32272223222B59DJ7QBCMPN",
                     "status" : "Active"
                  }
               ],
               "hasNext" : "true",
               "hasPrevious" : "false"
            }
         },
         "get-balancePlatforms-id-success-200" : {
            "summary" : "Balance platform retrieved",
            "description" : "Example response when retrieving a balance platform",
            "value" : {
               "id" : "YOUR_BALANCE_PLATFORM",
               "status" : "Active"
            }
         },
         "get-paymentInstrumentGroups-id-success-200" : {
            "summary" : "Payment instrument group retrieved",
            "description" : "Example response when retrieving a payment instrument group",
            "value" : {
               "balancePlatform" : "YOUR_BALANCE_PLATFORM",
               "txVariant" : "mc",
               "id" : "PG3227C223222B5CMD3FJFKGZ"
            }
         },
         "get-paymentInstrumentGroups-id-transactionRules-success-200" : {
            "summary" : "Transaction rules for a payment instrument group retrieved",
            "description" : "Example response when retrieving a list of transaction rules applied to a payment instrument group",
            "value" : {
               "transactionRules" : [
                  {
                     "description" : "Allow 5 transactions per month",
                     "interval" : {
                        "type" : "monthly"
                     },
                     "maxTransactions" : 5,
                     "paymentInstrumentGroupId" : "PG3227C223222B5CMD3FJFKGZ",
                     "reference" : "myRule12345",
                     "startDate" : "2021-01-25T12:46:35",
                     "status" : "active",
                     "type" : "velocity",
                     "id" : "TR32272223222B5CMDGMC9F4F"
                  },
                  {
                     "amount" : {
                        "currency" : "EUR",
                        "value" : 10000
                     },
                     "description" : "Allow up to 100 EUR per month",
                     "interval" : {
                        "type" : "monthly"
                     },
                     "paymentInstrumentGroupId" : "PG3227C223222B5CMD3FJFKGZ",
                     "reference" : "myRule16378",
                     "startDate" : "2021-01-25T12:46:35",
                     "status" : "active",
                     "type" : "velocity",
                     "id" : "TR32272223222B5CMDGT89F4F"
                  }
               ]
            }
         },
         "get-paymentInstruments-id-success-200" : {
            "summary" : "Payment instruments retrieved",
            "description" : "Example response for retrieving payment instruments associated with a balance account",
            "value" : {
               "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
               "description" : "S. Hopper - Main card",
               "issuingCountryCode" : "GB",
               "status" : "active",
               "type" : "card",
               "card" : {
                  "brand" : "mc",
                  "brandVariant" : "mcdebit",
                  "cardholderName" : "Simon Hopper",
                  "formFactor" : "virtual",
                  "bin" : "555544",
                  "expiration" : {
                     "month" : "01",
                     "year" : "2024"
                  },
                  "lastFour" : "3548",
                  "number" : "************3548"
               },
               "id" : "PI32272223222B5CMD3MQ3HXX"
            }
         },
         "get-paymentInstruments-id-transactionRules-success-200" : {
            "summary" : "Transaction rules for a payment instrument retrieved",
            "description" : "Example response when retrieving a list of transaction rules applied to a payment instrument",
            "value" : {
               "transactionRules" : [
                  {
                     "description" : "Allow 5 transactions per month",
                     "interval" : {
                        "type" : "monthly"
                     },
                     "maxTransactions" : 5,
                     "paymentInstrumentGroupId" : "PG3227C223222B5CMD3FJFKGZ",
                     "reference" : "myRule12345",
                     "startDate" : "2021-01-25T12:46:35.476629Z",
                     "status" : "active",
                     "type" : "velocity",
                     "id" : "TR32272223222B5CMDGMC9F4F"
                  },
                  {
                     "amount" : {
                        "currency" : "EUR",
                        "value" : 10000
                     },
                     "description" : "Allow up to 100 EUR per month",
                     "interval" : {
                        "type" : "monthly"
                     },
                     "paymentInstrumentGroupId" : "PG3227C223222B5CMD3FJFKGZ",
                     "reference" : "myRule16378",
                     "startDate" : "2021-01-25T12:46:35",
                     "status" : "active",
                     "type" : "velocity",
                     "id" : "TR32272223222B5CMDGT89F4F"
                  }
               ]
            }
         },
         "get-transactionRules-transactionRuleId-success-200" : {
            "summary" : "Transaction rules retrieved",
            "description" : "Example response when retrieving a transaction rule",
            "value" : {
               "transactionRule" : {
                  "description" : "Allow 5 transactions per month",
                  "interval" : {
                     "type" : "monthly"
                  },
                  "maxTransactions" : 5,
                  "paymentInstrumentId" : "PI3227C223222B59KGTXP884R",
                  "reference" : "myRule12345",
                  "startDate" : "2021-01-25T12:46:35",
                  "status" : "active",
                  "type" : "velocity",
                  "id" : "TR32272223222B5CMD3V73HXG"
               }
            }
         },
         "patch-accountHolders-id-requestAccountHolderCapability" : {
            "summary" : "Request account holder capability",
            "description" : "Example request for the `receivePayments` capability for an account holder",
            "value" : {
               "description" : "Liable account holder used for international payments and payouts",
               "reference" : "S.Eller-001",
               "legalEntityId" : "LE322JV223222D5GG42KN6869",
               "capabilities" : {
                  "receivePayments" : {
                     "requested" : true
                  }
               }
            }
         },
         "patch-accountHolders-id-requestAccountHolderCapability-200" : {
            "summary" : "Account holder capability requested",
            "description" : "Example response for requesting the `receivePayments` capability for an account holder",
            "value" : {
               "balancePlatform" : "APIExplorer",
               "description" : "Liable account holder used for international payments and payouts",
               "legalEntityId" : "LE322JV223222F5GKQZZ9DS99",
               "reference" : "S.Eller-001",
               "capabilities" : {
                  "receivePayments" : {
                     "enabled" : "false",
                     "requested" : "true",
                     "allowed" : "false",
                     "verificationStatus" : "pending"
                  }
               },
               "id" : "AH3227C223222C5GKR23686TF",
               "status" : "active"
            }
         },
         "patch-accountHolders-id-updateAccountHolderStatus" : {
            "summary" : "Deactivate an account holder",
            "description" : "Example request for permanently deactivating an account holder",
            "value" : {
               "status" : "closed"
            }
         },
         "patch-accountHolders-id-updateAccountHolderStatus-200" : {
            "summary" : "Account holder deactivated",
            "description" : "Example response for permanently deactivating an account holder",
            "value" : {
               "balancePlatform" : "APIExplorer",
               "description" : "Liable account holder used for international payments and payouts",
               "legalEntityId" : "LE322JV223222F5GKQZZ9DS99",
               "reference" : "S.Eller-001",
               "id" : "AH3227C223222C5GKR23686TF",
               "status" : "closed"
            }
         },
         "patch-balanceAccounts-balanceAccountId-sweeps-sweepId-updateSweep-status" : {
            "summary" : "Update the status of a sweep",
            "description" : "Example request for updating a sweep",
            "value" : {
               "status" : "inactive"
            }
         },
         "patch-balanceAccounts-balanceAccountId-sweeps-sweepId-updateSweep-status-200" : {
            "summary" : "Sweep status updated",
            "description" : "Example response for updating a sweep",
            "value" : {
               "id" : "SWPC4227C224555B5FTD2NT2JV4WN5",
               "counterparty" : {
                  "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
               },
               "triggerAmount" : {
                  "currency" : "EUR",
                  "value" : 50000
               },
               "currency" : "EUR",
               "schedule" : {
                  "type" : "balance"
               },
               "type" : "pull",
               "status" : "inactive"
            }
         },
         "patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount" : {
            "summary" : "Update the balance account linked to a payment instrument",
            "description" : "Example request for updating the balance account of a payment instrument",
            "value" : {
               "balanceAccountId" : "BA32272223222B5CM82WL892M"
            }
         },
         "patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount-200" : {
            "summary" : "Balance account updated",
            "description" : "Example response for updating the balance account linked to a payment instrument",
            "value" : {
               "balanceAccountId" : "BA32272223222B5CM82WL892M",
               "description" : "S. Hopper - Main card",
               "issuingCountryCode" : "GB",
               "status" : "inactive",
               "type" : "card",
               "card" : {
                  "brand" : "mc",
                  "brandVariant" : "mcdebit",
                  "cardholderName" : "Simon Hopper",
                  "formFactor" : "virtual",
                  "bin" : "555544",
                  "expiration" : {
                     "month" : "01",
                     "year" : "2024"
                  },
                  "lastFour" : "5785",
                  "number" : "************5785"
               },
               "id" : "PI3227C223222B5CMD278FKGS"
            }
         },
         "patch-paymentInstruments-id-updatePaymentInstrumentStatus" : {
            "summary" : "Update the status of a payment instrument",
            "description" : "Example request for updating the status of a payment instrument",
            "value" : {
               "status" : "suspended"
            }
         },
         "patch-paymentInstruments-id-updatePaymentInstrumentStatus-200" : {
            "summary" : "Payment instrument status updated",
            "description" : "Example response for updating the status of a payment instrument",
            "value" : {
               "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
               "description" : "S. Hopper - Main card",
               "issuingCountryCode" : "GB",
               "status" : "suspended",
               "type" : "card",
               "card" : {
                  "brand" : "mc",
                  "brandVariant" : "mcdebit",
                  "cardholderName" : "Simon Hopper",
                  "formFactor" : "virtual",
                  "bin" : "555544",
                  "expiration" : {
                     "month" : "01",
                     "year" : "2024"
                  },
                  "lastFour" : "5785",
                  "number" : "************5785"
               },
               "id" : "PI3227C223222B5CMD278FKGS"
            }
         },
         "patch-transactionRules-transactionRuleId-updateTransactionRuleStatus" : {
            "summary" : "Update the status of transaction rule",
            "description" : "Example request for updating the status of a transaction rule",
            "value" : {
               "status" : "inactive"
            }
         },
         "patch-transactionRules-transactionRuleId-updateTransactionRuleStatus-200" : {
            "summary" : "Transaction rule status updated",
            "description" : "Example response for successfully updating the status of a transaction rule",
            "value" : {
               "description" : "Allow 5 transactions per month",
               "interval" : {
                  "type" : "monthly"
               },
               "maxTransactions" : 5,
               "paymentInstrumentId" : "PI3227C223222B59KGTXP884R",
               "reference" : "myRule12345",
               "startDate" : "2021-01-21T12:46:35",
               "status" : "inactive",
               "type" : "velocity",
               "id" : "TR3227C223222B5B85CDV4DRS"
            }
         },
         "post-accountHolders-createAccountHolder" : {
            "summary" : "Create an account holder",
            "value" : {
               "description" : "Liable account holder used for international payments and payouts",
               "reference" : "S.Eller-001",
               "legalEntityId" : "LE322JV223222D5GG42KN6869"
            }
         },
         "post-accountHolders-createAccountHolder-200" : {
            "summary" : "Account holder created",
            "description" : "Example response for creating an account holder",
            "value" : {
               "balancePlatform" : "APIExplorer",
               "description" : "Liable account holder used for international payments and payouts",
               "legalEntityId" : "LE322JV223222D5GG42KN6869",
               "reference" : "S.Eller-001",
               "id" : "AH3227C223222C5GKR23686TF",
               "status" : "active"
            }
         },
         "post-balanceAccounts-balanceAccountId-sweeps-createSweep-pull" : {
            "summary" : "Create a sweep to pull funds in to a balance account",
            "description" : "Example request for creating a pull sweep",
            "value" : {
               "counterparty" : {
                  "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
               },
               "triggerAmount" : {
                  "currency" : "EUR",
                  "value" : 50000
               },
               "currency" : "EUR",
               "schedule" : {
                  "type" : "balance"
               },
               "type" : "pull",
               "status" : "active"
            }
         },
         "post-balanceAccounts-balanceAccountId-sweeps-createSweep-pull-200" : {
            "summary" : "Sweep of pull type created",
            "description" : "Example response for creating a pull sweep",
            "value" : {
               "id" : "SWPC4227C224555B5FTD2NT2JV4WN5",
               "counterparty" : {
                  "merchantAccount" : "YOUR_MERCHANT_ACCOUNT"
               },
               "triggerAmount" : {
                  "currency" : "EUR",
                  "value" : 50000
               },
               "currency" : "EUR",
               "schedule" : {
                  "type" : "balance"
               },
               "type" : "pull",
               "status" : "active"
            }
         },
         "post-balanceAccounts-balanceAccountId-sweeps-createSweep-push" : {
            "summary" : "Create a sweep to push funds out of a balance account",
            "description" : "Example request for creating a push sweep",
            "value" : {
               "counterparty" : {
                  "balanceAccountId" : "BA32278887611B5FTD2KR6TJD"
               },
               "triggerAmount" : {
                  "currency" : "EUR",
                  "value" : 50000
               },
               "currency" : "EUR",
               "schedule" : {
                  "type" : "weekly"
               },
               "type" : "push",
               "status" : "active"
            }
         },
         "post-balanceAccounts-balanceAccountId-sweeps-createSweep-push-200" : {
            "summary" : "Sweep of push type created",
            "description" : "Example response for creating a push sweep",
            "value" : {
               "id" : "SWPC4227C224555B5FTD2NT2JV4WN5",
               "counterparty" : {
                  "balanceAccountId" : "BA32278887611B5FTD2KR6TJD"
               },
               "triggerAmount" : {
                  "currency" : "EUR",
                  "value" : 50000
               },
               "currency" : "EUR",
               "schedule" : {
                  "type" : "weekly"
               },
               "type" : "push",
               "status" : "active"
            }
         },
         "post-balanceAccounts-createBalanceAccount" : {
            "summary" : "Create a balance account",
            "description" : "Example request for creating a balance account",
            "value" : {
               "accountHolderId" : "AH32272223222B59K6ZKBBFNQ",
               "description" : "S.Hopper - Main balance account"
            }
         },
         "post-balanceAccounts-createBalanceAccount-200" : {
            "summary" : "Balance account created",
            "description" : "Example response for creating a balance account",
            "value" : {
               "accountHolderId" : "AH32272223222B59K6ZKBBFNQ",
               "defaultCurrencyCode" : "EUR",
               "reference" : "S.Hopper - Main balance account",
               "balances" : [
                  {
                     "available" : 0,
                     "balance" : 0,
                     "currency" : "EUR",
                     "reserved" : 0
                  }
               ],
               "id" : "BA32272223222B59CZ3T52DKZ",
               "status" : "active"
            }
         },
         "post-paymentInstrumentGroups-createPaymentInstrumentGroups" : {
            "summary" : "Create a payment instrument group",
            "description" : "Example request for creating a payment instrument group",
            "value" : {
               "balancePlatform" : "YOUR_BALANCE_PLATFORM",
               "txVariant" : "mc"
            }
         },
         "post-paymentInstrumentGroups-createPaymentInstrumentGroups-200" : {
            "summary" : "Payment instrument group created",
            "description" : "Example response for successfully creating a payment instrument group",
            "value" : {
               "balancePlatform" : "YOUR_BALANCE_PLATFORM",
               "txVariant" : "mc",
               "id" : "PG3227C223222B5CMD3FJFKGZ"
            }
         },
         "post-paymentInstruments-createBusinessAccount" : {
            "summary" : "Create a business account",
            "description" : "Example request for creating a business account",
            "value" : {
               "type" : "bankAccount",
               "description" : "YOUR_DESCRIPTION",
               "balanceAccountId" : "BA3227C223222B5CTBLR8BWJB",
               "issuingCountryCode" : "NL"
            }
         },
         "post-paymentInstruments-createBusinessAccount-200" : {
            "summary" : "Business account created",
            "description" : "Example response for creating a business account",
            "value" : {
               "balanceAccountId" : "BA3227C223222B5CTBLR8BWJB",
               "issuingCountryCode" : "NL",
               "status" : "Active",
               "type" : "bankAccount",
               "bankAccount" : {
                  "iban" : "NL20ADYB2017000035"
               },
               "id" : "PI322LJ223222B5DJS7CD9LWL"
            }
         },
         "post-paymentInstruments-createPhysicalCard" : {
            "summary" : "Create a physical card",
            "description" : "Example request for creating a physical card",
            "value" : {
               "type" : "card",
               "issuingCountryCode" : "NL",
               "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
               "description" : "S.Hopper - Main card",
               "status" : "Inactive",
               "card" : {
                  "formFactor" : "physical",
                  "brand" : "mc",
                  "brandVariant" : "mcdebit",
                  "cardholderName" : "Sam Hopper",
                  "deliveryContact" : {
                     "address" : {
                        "city" : "Amsterdam",
                        "country" : "NL",
                        "stateOrProvince" : "NH",
                        "line1" : "Brannan Street",
                        "line2" : "274",
                        "postalCode" : "1020CD"
                     },
                     "name" : {
                        "firstName" : "Sam",
                        "lastName" : "Hopper"
                     }
                  },
                  "configuration" : {
                     "configurationProfileId" : "CP123AB45678C91ABCD2ABCDE"
                  }
               }
            }
         },
         "post-paymentInstruments-createPhysicalCard-200" : {
            "summary" : "Physical card created",
            "description" : "Example response for creating a physical card",
            "value" : {
               "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
               "description" : "S. Hopper - Main card",
               "issuingCountryCode" : "NL",
               "status" : "Inactive",
               "type" : "card",
               "card" : {
                  "brand" : "mc",
                  "brandVariant" : "mcdebit",
                  "cardholderName" : "Sam Hopper",
                  "formFactor" : "physical",
                  "bin" : "555544",
                  "expiration" : {
                     "month" : "08",
                     "year" : "2024"
                  },
                  "lastFour" : "2765",
                  "authentication" : {
                     "password" : "******",
                     "phone" : {
                        "number" : "+123456789",
                        "type" : "mobile"
                     }
                  },
                  "deliveryContact" : {
                     "address" : {
                        "city" : "Amsterdam",
                        "country" : "NL",
                        "stateOrProvince" : "NH",
                        "line1" : "Brannan Street",
                        "line2" : "274",
                        "postalCode" : "1020CD"
                     },
                     "name" : {
                        "firstName" : "Sam",
                        "lastName" : "Hopper"
                     }
                  },
                  "configuration" : {
                     "configurationProfileId" : "CP123AB45678C91ABCD2ABCDE"
                  }
               },
               "id" : "PI3227C223222B5BPCMFXD2XG"
            }
         },
         "post-paymentInstruments-createVirtualCard" : {
            "summary" : "Create a virtual card",
            "description" : "Example request for creating a virtual card",
            "value" : {
               "type" : "card",
               "description" : "S. Hopper - Main card",
               "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
               "issuingCountryCode" : "NL",
               "card" : {
                  "cardholderName" : "Sam Hopper",
                  "brand" : "mc",
                  "brandVariant" : "mcdebit",
                  "formFactor" : "virtual"
               }
            }
         },
         "post-paymentInstruments-createVirtualCard-200" : {
            "summary" : "Virtual card created",
            "description" : "Example response for creating a virtual card",
            "value" : {
               "balanceAccountId" : "BA32272223222B59CZ3T52DKZ",
               "description" : "S.Hopper - Virtual card",
               "issuingCountryCode" : "NL",
               "status" : "Active",
               "type" : "card",
               "card" : {
                  "brand" : "mc",
                  "brandVariant" : "mcdebit",
                  "cardholderName" : "Sam Hopper",
                  "formFactor" : "virtual",
                  "bin" : "555544",
                  "cvc" : "613",
                  "expiration" : {
                     "month" : "03",
                     "year" : "2025"
                  },
                  "lastFour" : "9883",
                  "number" : "5555444411209883"
               },
               "id" : "PI32272223222B5FR7Z5CFDW4"
            }
         },
         "post-transactionRules-createTransactionRuleAllowPos" : {
            "summary" : "Allow only point-of-sale transactions",
            "description" : "Example request to allow only point-of-sale transactions",
            "value" : {
               "description" : "Allow only point-of-sale transactions",
               "reference" : "YOUR_REFERENCE_4F7346",
               "entityKey" : {
                  "entityType" : "paymentInstrument",
                  "entityReference" : "PI3227C223222B5BPCMFXD2XG"
               },
               "status" : "active",
               "interval" : {
                  "type" : "perTransaction"
               },
               "ruleRestrictions" : {
                  "processingTypes" : {
                     "operation" : "noneMatch",
                     "value" : [
                        "pos"
                     ]
                  }
               },
               "type" : "blockList"
            }
         },
         "post-transactionRules-createTransactionRuleAllowPos-200" : {
            "summary" : "Transaction rule allowing only POS transactions created",
            "description" : "Example response for allowing only point-of-sale transactions",
            "value" : {
               "description" : "Allow only point-of-sale transactions",
               "entityKey" : {
                  "entityReference" : "PI3227C223222B5BPCMFXD2XG",
                  "entityType" : "paymentInstrument"
               },
               "interval" : {
                  "timeZone" : "UTC",
                  "type" : "perTransaction"
               },
               "outcomeType" : "hardBlock",
               "reference" : "YOUR_REFERENCE_4F7346",
               "requestType" : "authorization",
               "ruleRestrictions" : {
                  "processingTypes" : {
                     "operation" : "noneMatch",
                     "value" : [
                        "pos"
                     ]
                  }
               },
               "startDate" : "2022-03-23T15:05:11+01:00",
               "status" : "active",
               "type" : "blockList",
               "id" : "TR3227C223222B5FCB756DV9H"
            }
         },
         "post-transactionRules-createTransactionRuleIncreaseScore" : {
            "summary" : "Increase the score of a card",
            "description" : "Example request to increase the score of a card",
            "value" : {
               "description" : "Assign score if more than 500 EUR in 2 hours",
               "entityKey" : {
                  "entityReference" : "PI3227C223222B5FN65FN5NS9",
                  "entityType" : "paymentInstrument"
               },
               "interval" : {
                  "type" : "sliding",
                  "duration" : {
                     "value" : 2,
                     "unit" : "hours"
                  }
               },
               "outcomeType" : "scoreBased",
               "reference" : "myRule11789",
               "ruleRestrictions" : {
                  "totalAmount" : {
                     "operation" : "greaterThan",
                     "value" : {
                        "currency" : "EUR",
                        "value" : 50000
                     }
                  }
               },
               "score" : 20,
               "type" : "velocity"
            }
         },
         "post-transactionRules-createTransactionRuleIncreaseScore-200" : {
            "summary" : "Score-based transaction rule created",
            "description" : "Example response for increasing the score of a card",
            "value" : {
               "description" : "Assign score if more than 500 EUR in 2 hours",
               "entityKey" : {
                  "entityReference" : "PI3227C223222B5FN65FN5NS9",
                  "entityType" : "paymentInstrument"
               },
               "interval" : {
                  "duration" : {
                     "unit" : "hours",
                     "value" : 2
                  },
                  "timeZone" : "UTC",
                  "type" : "sliding"
               },
               "outcomeType" : "scoreBased",
               "reference" : "myRule11789",
               "requestType" : "authorization",
               "ruleRestrictions" : {
                  "totalAmount" : {
                     "operation" : "greaterThan",
                     "value" : {
                        "currency" : "EUR",
                        "value" : 50000
                     }
                  }
               },
               "score" : 20,
               "status" : "inactive",
               "type" : "velocity",
               "id" : "TR3227C223222B5FW3LVW8NRJ"
            }
         },
         "post-transactionRules-createTransactionRuleLimitSliding" : {
            "summary" : "Limit total amount in the last 12 hours",
            "description" : "Example request to limit the total amount in a sliding interval",
            "value" : {
               "description" : "Up to 1000 EUR per card for the last 12 hours",
               "reference" : "YOUR_REFERENCE_2918A",
               "status" : "active",
               "entityKey" : {
                  "entityReference" : "BA3227C223222B5FN65355NR3",
                  "entityType" : "balanceAccount"
               },
               "aggregationLevel" : "paymentInstrument",
               "interval" : {
                  "type" : "sliding",
                  "duration" : {
                     "value" : "12",
                     "unit" : "hours"
                  }
               },
               "outcomeType" : "hardBlock",
               "ruleRestrictions" : {
                  "totalAmount" : {
                     "operation" : "greaterThan",
                     "value" : {
                        "value" : 100000,
                        "currency" : "EUR"
                     }
                  }
               },
               "type" : "velocity"
            }
         },
         "post-transactionRules-createTransactionRuleLimitSliding-200" : {
            "summary" : "Transaction rule with a sliding interval created",
            "description" : "Example response for limiting the total amount in a sliding interval",
            "value" : {
               "aggregationLevel" : "paymentInstrument",
               "description" : "Up to 1000 EUR per card for the last 12 hours",
               "entityKey" : {
                  "entityReference" : "BA3227C223222B5FN65355NR3",
                  "entityType" : "balanceAccount"
               },
               "interval" : {
                  "duration" : {
                     "unit" : "hours",
                     "value" : 12
                  },
                  "timeZone" : "UTC",
                  "type" : "sliding"
               },
               "outcomeType" : "hardBlock",
               "reference" : "YOUR_REFERENCE_2918A",
               "requestType" : "authorization",
               "ruleRestrictions" : {
                  "totalAmount" : {
                     "operation" : "greaterThan",
                     "value" : {
                        "currency" : "EUR",
                        "value" : 100000
                     }
                  }
               },
               "startDate" : "2022-04-19T18:43:37+02:00",
               "status" : "active",
               "type" : "velocity",
               "id" : "TR32272223222B5FW3LZ74JFB"
            }
         },
         "post-transactionRules-createTransactionRuleLimitTransaction" : {
            "summary" : "Limit international payments",
            "description" : "Example request to limit total amount of international transations",
            "value" : {
               "description" : "Up to 50 EUR international transactions",
               "reference" : "YOUR_REFERENCE_B2634",
               "status" : "active",
               "entityKey" : {
                  "entityType" : "balanceAccount",
                  "entityReference" : "BA3227C223222B5FN65355NR3"
               },
               "interval" : {
                  "type" : "daily"
               },
               "outcomeType" : "hardBlock",
               "ruleRestrictions" : {
                  "totalAmount" : {
                     "operation" : "greaterThan",
                     "value" : {
                        "currency" : "EUR",
                        "value" : 5000
                     }
                  },
                  "internationalTransaction" : {
                     "operation" : "equals",
                     "value" : true
                  }
               },
               "type" : "velocity"
            }
         },
         "post-transactionRules-createTransactionRuleLimitTransaction-200" : {
            "summary" : "Transaction rule to limit international transactions created",
            "description" : "Example response for limiting the total amount of international transations",
            "value" : {
               "description" : "Up to 50 EUR international transactions",
               "entityKey" : {
                  "entityReference" : "BA3227C223222B5FN65355NR3",
                  "entityType" : "balanceAccount"
               },
               "interval" : {
                  "timeOfDay" : "00:00:00",
                  "timeZone" : "UTC",
                  "type" : "daily"
               },
               "outcomeType" : "hardBlock",
               "reference" : "YOUR_REFERENCE_B2634",
               "requestType" : "authorization",
               "ruleRestrictions" : {
                  "internationalTransaction" : {
                     "operation" : "equals",
                     "value" : true
                  },
                  "totalAmount" : {
                     "operation" : "greaterThan",
                     "value" : {
                        "currency" : "EUR",
                        "value" : 5000
                     }
                  }
               },
               "startDate" : "2022-04-19T18:45:03+02:00",
               "status" : "active",
               "type" : "velocity",
               "id" : "TR32272223222B5FW3M494JGX"
            }
         }
      }
   }
}