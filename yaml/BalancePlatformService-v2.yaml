openapi: 3.1.0
servers:
- url: https://balanceplatform-api-test.adyen.com/bcl/v2
info:
  version: '2'
  x-publicVersion: true
  title: Balance Platform Configuration API
  description: "The Balance Platform Configuration API enables you to create a platform\
    \ where you can onboard users as account holders and create balance accounts,\
    \ cards, and bank accounts.\n\nFor information about use cases, refer to [Adyen\
    \ Issuing](https://docs.adyen.com/issuing).\n\n ## Authentication\nYour Adyen\
    \ contact will provide your API credential and an API key. To connect to the API,\
    \ add an `X-API-Key` header with the API key as the value, for example:\n\n ```\n\
    curl\n-H \"Content-Type: application/json\" \\\n-H \"X-API-Key: YOUR_API_KEY\"\
    \ \\\n...\n```\n\nAlternatively, you can use the username and password to connect\
    \ to the API using basic authentication. For example:\n\n```\ncurl\n-H \"Content-Type:\
    \ application/json\" \\\n-U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\"\
    \ \\\n...\n```\n## Versioning\nThe Balance Platform Configuration API supports\
    \ [versioning](https://docs.adyen.com/development-resources/versioning) using\
    \ a version suffix in the endpoint URL. This suffix has the following format:\
    \ \"vXX\", where XX is the version number.\n\nFor example:\n```\nhttps://balanceplatform-api-test.adyen.com/bcl/v1\n\
    ```\n## Going live\nWhen going live, your Adyen contact will provide your API\
    \ credential for the live environment. You can then use the API key or the username\
    \ and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v1`.\n\
    \nFor more information, refer to our [Going live documentation](https://docs.adyen.com/issuing/integration-checklist#going-live)."
  termsOfService: https://www.adyen.com/legal/terms-and-conditions
  contact:
    name: Adyen Developer Experience team
    url: https://www.adyen.help/hc/en-us/community/topics
    email: developer-experience@adyen.com
x-groups:
- General
- Account holders
- Balance accounts
- Payment instruments
- Payment instrument groups
- Transaction rules
tags:
- name: Payment instrument groups
- name: Account holders
- name: Payment instruments
- name: General
- name: Balance accounts
- name: Transaction rules
paths:
  /accountHolders:
    post:
      tags:
      - Account holders
      summary: Create an account holder
      description: 'Creates an account holder that represents your user''s entity
        within the balance platform.


        For more information, refer to [Create accounts](https://docs.adyen.com/issuing/create-accounts).'
      x-addedInVersion: '1'
      operationId: post-accountHolders
      x-groupName: Account holders
      x-sortIndex: 1
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            examples:
              createAccountHolder:
                $ref: '#/components/examples/post-accountHolders-createAccountHolder'
            schema:
              $ref: '#/components/schemas/AccountHolderInfo'
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/post-accountHolders-success-200'
              schema:
                $ref: '#/components/schemas/AccountHolder'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /accountHolders/{id}:
    get:
      tags:
      - Account holders
      summary: Get an account holder
      description: Returns an account holder.
      x-addedInVersion: '1'
      operationId: get-accountHolders-id
      x-groupName: Account holders
      x-sortIndex: 3
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the account holder.
        name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-accountHolders-id-success-200'
              schema:
                $ref: '#/components/schemas/AccountHolder'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
    patch:
      tags:
      - Account holders
      summary: Update an account holder
      description: 'Updates an account holder. When updating an account holder resource,
        note that:


        * If a parameter is not provided in the request, the parameter is left unchanged.


        * When updating any parameter in the `contactDetails` object, you must send
        all other existing `contactDetails` parameters.'
      x-addedInVersion: '1'
      operationId: patch-accountHolders-id
      x-groupName: Account holders
      x-sortIndex: 2
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            examples:
              updateAccountHolderStatus:
                $ref: '#/components/examples/patch-accountHolders-id-updateAccountHolderStatus'
            schema:
              $ref: '#/components/schemas/AccountHolder'
      parameters:
      - description: The unique identifier of the account holder.
        name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/patch-accountHolders-id-success-200'
              schema:
                $ref: '#/components/schemas/AccountHolder'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /accountHolders/{id}/balanceAccounts:
    get:
      tags:
      - Account holders
      summary: Get all balance accounts of an account holder
      description: "Returns a paginated list of balance accounts associated with an\
        \ account holder. To fetch multiple pages, use the query parameters. \n\n\
        For example, to limit the page to 5 balance accounts and skip the first 10,\
        \ use `/accountHolders/{id}/balanceAccounts?limit=5&offset=10`."
      x-addedInVersion: '1'
      operationId: get-accountHolders-id-balanceAccounts
      x-groupName: Account holders
      x-sortIndex: 4
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the account holder.
        name: id
        in: path
        required: true
        schema:
          type: string
      - description: The number of items that you want to skip.
        name: offset
        in: query
        required: false
        schema:
          format: int32
          type: integer
      - description: The number of items returned per page, maximum 100 items. By
          default, the response returns 10 items per page.
        name: limit
        in: query
        required: false
        schema:
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-accountHolders-id-balanceAccounts-success-200'
              schema:
                $ref: '#/components/schemas/PaginatedBalanceAccountsResponse'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /balanceAccounts:
    post:
      tags:
      - Balance accounts
      summary: Create a balance account
      description: "Creates a balance account that holds the funds of the associated\
        \ account holder. \n\nFor more information, refer to [Create accounts](https://docs.adyen.com/issuing/create-accounts)."
      x-addedInVersion: '1'
      operationId: post-balanceAccounts
      x-groupName: Balance accounts
      x-sortIndex: 1
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            examples:
              createBalanceAccount:
                $ref: '#/components/examples/post-balanceAccounts-createBalanceAccount'
            schema:
              $ref: '#/components/schemas/BalanceAccountInfo'
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/post-balanceAccounts-success-200'
              schema:
                $ref: '#/components/schemas/BalanceAccount'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /balanceAccounts/{id}:
    get:
      tags:
      - Balance accounts
      summary: Get a balance account
      description: Returns a balance account.
      x-addedInVersion: '1'
      operationId: get-balanceAccounts-id
      x-groupName: Balance accounts
      x-sortIndex: 3
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the balance account.
        name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-balanceAccounts-id-success-200'
              schema:
                $ref: '#/components/schemas/BalanceAccount'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
    patch:
      tags:
      - Balance accounts
      summary: Update a balance account
      description: Updates a balance account.
      x-addedInVersion: '1'
      operationId: patch-balanceAccounts-id
      x-groupName: Balance accounts
      x-sortIndex: 2
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalanceAccountUpdateRequest'
      parameters:
      - description: The unique identifier of the balance account.
        name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceAccount'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /balanceAccounts/{id}/paymentInstruments:
    get:
      tags:
      - Balance accounts
      summary: Get all payment instruments for a balance account
      description: "Returns a paginated list of the payment instruments associated\
        \ with a balance account. \n\nTo fetch multiple pages, use the query parameters.For\
        \ example, to limit the page to 3 payment instruments and to skip the first\
        \ 6, use `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6`."
      x-addedInVersion: '1'
      operationId: get-balanceAccounts-id-paymentInstruments
      x-groupName: Balance accounts
      x-sortIndex: 4
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the balance account.
        name: id
        in: path
        required: true
        schema:
          type: string
      - description: The number of items that you want to skip.
        name: offset
        in: query
        required: false
        schema:
          format: int32
          type: integer
      - description: The number of items returned per page, maximum 100 items. By
          default, the response returns 10 items per page.
        name: limit
        in: query
        required: false
        schema:
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-balanceAccounts-id-paymentInstruments-success-200'
              schema:
                $ref: '#/components/schemas/PaginatedPaymentInstrumentsResponse'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /balancePlatforms/{id}:
    get:
      tags:
      - General
      summary: Get a balance platform
      description: Returns a balance platform.
      x-addedInVersion: '1'
      operationId: get-balancePlatforms-id
      x-groupName: General
      x-sortIndex: 0
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the balance platform.
        name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-balancePlatforms-id-success-200'
              schema:
                $ref: '#/components/schemas/BalancePlatform'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /balancePlatforms/{id}/accountHolders:
    get:
      tags:
      - General
      summary: Get all account holders under a balance platform
      description: "Returns a paginated list of all the account holders that belong\
        \ to the balance platform. To fetch multiple pages, use the query parameters.\
        \ \n\nFor example, to limit the page to 5 account holders and to skip the\
        \ first 20, use `/balancePlatforms/{id}/accountHolders?limit=5&offset=20`."
      x-addedInVersion: '1'
      operationId: get-balancePlatforms-id-accountHolders
      x-groupName: General
      x-sortIndex: 0
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the balance platform.
        name: id
        in: path
        required: true
        schema:
          type: string
      - description: The number of items that you want to skip.
        name: offset
        in: query
        required: false
        schema:
          format: int32
          type: integer
      - description: The number of items returned per page, maximum 100 items. By
          default, the response returns 10 items per page.
        name: limit
        in: query
        required: false
        schema:
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-balancePlatforms-id-accountHolders-success-200'
              schema:
                $ref: '#/components/schemas/PaginatedAccountHoldersResponse'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /paymentInstrumentGroups:
    post:
      tags:
      - Payment instrument groups
      summary: Create a payment instrument group
      description: Creates a payment instrument group to associate and group payment
        instrument resources together. You can apply a transaction rule to a payment
        instrument group.
      x-addedInVersion: '1'
      operationId: post-paymentInstrumentGroups
      x-groupName: Payment instrument groups
      x-sortIndex: 1
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            examples:
              createPaymentInstrumentGroups:
                $ref: '#/components/examples/post-paymentInstrumentGroups-createPaymentInstrumentGroups'
            schema:
              $ref: '#/components/schemas/PaymentInstrumentGroupInfo'
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/post-paymentInstrumentGroups-success-200'
              schema:
                $ref: '#/components/schemas/PaymentInstrumentGroup'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /paymentInstrumentGroups/{id}:
    get:
      tags:
      - Payment instrument groups
      summary: Get a payment instrument group
      description: Returns a payment instrument group.
      x-addedInVersion: '1'
      operationId: get-paymentInstrumentGroups-id
      x-groupName: Payment instrument groups
      x-sortIndex: 2
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the payment instrument group.
        name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-paymentInstrumentGroups-id-success-200'
              schema:
                $ref: '#/components/schemas/PaymentInstrumentGroup'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /paymentInstrumentGroups/{id}/transactionRules:
    get:
      tags:
      - Payment instrument groups
      summary: Get all transaction rules for a payment instrument group
      description: Returns a list of all the transaction rules associated with a payment
        instrument group.
      x-addedInVersion: '1'
      operationId: get-paymentInstrumentGroups-id-transactionRules
      x-groupName: Payment instrument groups
      x-sortIndex: 3
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the payment instrument group.
        name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-paymentInstrumentGroups-id-transactionRules-success-200'
              schema:
                $ref: '#/components/schemas/TransactionRulesResponse'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /paymentInstruments:
    post:
      tags:
      - Payment instruments
      summary: Create a payment instrument
      description: "Creates a payment instrument to issue either a physical or a virtual\
        \ card to your user.\n\n For more information, refer to [Create cards](https://docs.adyen.com/issuing/create-cards)."
      x-addedInVersion: '1'
      operationId: post-paymentInstruments
      x-groupName: Payment instruments
      x-sortIndex: 11
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            examples:
              createPhysicalCard:
                $ref: '#/components/examples/post-paymentInstruments-createPhysicalCard'
              createVirtualCard:
                $ref: '#/components/examples/post-paymentInstruments-createVirtualCard'
            schema:
              $ref: '#/components/schemas/PaymentInstrumentInfo'
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/post-paymentInstruments-success-200'
              schema:
                $ref: '#/components/schemas/PaymentInstrument'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /paymentInstruments/{id}:
    get:
      tags:
      - Payment instruments
      summary: Get a payment instrument
      description: Returns a payment instrument.
      x-addedInVersion: '1'
      operationId: get-paymentInstruments-id
      x-groupName: Payment instruments
      x-sortIndex: 13
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the payment instrument.
        name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-paymentInstruments-id-success-200'
              schema:
                $ref: '#/components/schemas/PaymentInstrument'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
    patch:
      tags:
      - Payment instruments
      summary: Update a payment instrument
      description: Updates a payment instrument. Once a payment instrument is already
        active, you can only update its status. However, for cards created with **inactive**
        status, you can still update the balance account associated with the card.
      x-addedInVersion: '1'
      operationId: patch-paymentInstruments-id
      x-groupName: Payment instruments
      x-sortIndex: 12
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            examples:
              updatePaymentInstrumentBalanceAccount:
                $ref: '#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount'
              updatePaymentInstrumentStatus:
                $ref: '#/components/examples/patch-paymentInstruments-id-updatePaymentInstrumentStatus'
            schema:
              $ref: '#/components/schemas/PaymentInstrumentUpdateRequest'
      parameters:
      - description: The unique identifier of the payment instrument.
        name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/patch-paymentInstruments-id-success-200'
              schema:
                $ref: '#/components/schemas/PaymentInstrument'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
                invalidData:
                  $ref: '#/components/examples/patch-paymentInstruments-id-invalidData-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /paymentInstruments/{id}/transactionRules:
    get:
      tags:
      - Payment instruments
      summary: Get all transaction rules for a payment instrument
      description: Returns a list of transaction rules associated with a payment instrument.
      x-addedInVersion: '1'
      operationId: get-paymentInstruments-id-transactionRules
      x-groupName: Payment instruments
      x-sortIndex: 14
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the payment instrument.
        name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-paymentInstruments-id-transactionRules-success-200'
              schema:
                $ref: '#/components/schemas/TransactionRulesResponse'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /transactionRules:
    post:
      tags:
      - Transaction rules
      summary: Create a transaction rule
      description: 'Creates a transaction rule to define conditions for automatically
        approving or denying transactions. You can apply transaction rules to a specific
        payment instrument, a group of payment instruments, or to all the payment
        instruments in your balance platform.


        For more information on how you can set conditions, refer to [Transaction
        rules](https://docs.adyen.com/issuing/transaction-rules).'
      x-addedInVersion: '1'
      operationId: post-transactionRules
      x-groupName: Transaction rules
      x-sortIndex: 1
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            examples:
              createTransactionRule:
                $ref: '#/components/examples/post-transactionRules-createTransactionRule'
            schema:
              $ref: '#/components/schemas/TransactionRuleInfo'
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/post-transactionRules-success-200'
              schema:
                $ref: '#/components/schemas/TransactionRule'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
  /transactionRules/{transactionRuleId}:
    delete:
      tags:
      - Transaction rules
      summary: Delete a transaction rule
      description: Deletes a transaction rule.
      x-addedInVersion: '1'
      operationId: delete-transactionRules-transactionRuleId
      x-groupName: Transaction rules
      x-sortIndex: 5
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the transaction rule.
        name: transactionRuleId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/delete-transactionRules-transactionRuleId-success-200'
              schema:
                $ref: '#/components/schemas/TransactionRule'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
    get:
      tags:
      - Transaction rules
      summary: Get a transaction rule
      description: Returns a transaction rule.
      x-addedInVersion: '1'
      operationId: get-transactionRules-transactionRuleId
      x-groupName: Transaction rules
      x-sortIndex: 2
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      parameters:
      - description: The unique identifier of the transaction rule.
        name: transactionRuleId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/get-transactionRules-transactionRuleId-success-200'
              schema:
                $ref: '#/components/schemas/TransactionRuleResponse'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
    patch:
      tags:
      - Transaction rules
      summary: Update a transaction rule
      description: "Updates a transaction rule. \n\n* To update only the status of\
        \ a transaction rule, send only the `status` parameter. All other parameters\
        \ not provided in the request are left unchanged.\n\n* When updating any other\
        \ parameter, you need to send all existing resource parameters. If you omit\
        \ a parameter in the request, that parameter is removed from the resource."
      x-addedInVersion: '1'
      operationId: patch-transactionRules-transactionRuleId
      x-groupName: Transaction rules
      x-sortIndex: 3
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            examples:
              updateTransactionRuleStatus:
                $ref: '#/components/examples/patch-transactionRules-transactionRuleId-updateTransactionRuleStatus'
            schema:
              $ref: '#/components/schemas/TransactionRuleInfo'
      parameters:
      - description: The unique identifier of the transaction rule.
        name: transactionRuleId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                success:
                  $ref: '#/components/examples/patch-transactionRules-transactionRuleId-success-200'
              schema:
                $ref: '#/components/schemas/TransactionRule'
          description: OK - the request has succeeded.
        '400':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-400'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Bad Request - a problem reading or understanding the request.
        '401':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-401'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unauthorized - authentication required.
        '403':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-403'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Forbidden - insufficient permissions to process the request.
        '422':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-422'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Unprocessable Entity - a request validation error.
        '500':
          content:
            application/json:
              examples:
                generic:
                  $ref: '#/components/examples/generic-500'
              schema:
                $ref: '#/components/schemas/RestServiceError'
          description: Internal Server Error - the server could not process the request.
components:
  schemas:
    AccountHolder:
      properties:
        balancePlatform:
          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id)
            to which the account holder belongs. Required in the request if your API
            credentials can be used for multiple balance platforms.
          type: string
        capabilities:
          additionalProperties:
            $ref: '#/components/schemas/AccountHolderCapability'
          description: Contains key-value pairs that specify the actions that an account
            holder can do in your platform. The key is a capability required for your
            integration. For example, **issueCard** for Issuing.The value is an object
            containing the settings for the capability.
          type: object
        contactDetails:
          description: Contact details of the account holder.
          $ref: '#/components/schemas/ContactDetails'
        description:
          description: Your description for the account holder, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the account holder.
          type: string
        legalEntityId:
          description: 'The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities__resParam_id)
            associated with the account holder. Adyen performs a verification process
            against the legal entity of the account holder.


            For more information on how to create a legal entity, refer to [Onboard
            and verify account holders](https://docs.adyen.com/issuing/kyc-verification).'
          type: string
        primaryBalanceAccount:
          description: The ID of the account holder's primary balance account. By
            default, this is set to the first balance account that you create for
            the account holder. To assign a different balance account, send a PATCH
            request.
          type: string
        reference:
          description: Your reference for the account holder, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: "The status of the account holder.\n\nPossible values: \n\n\
            \ * **Active**: The account holder is active. This the default status\
            \ when creating an account holder. \n\n * **Suspended**: The account holder\
            \ is temporarily suspended. You can set the account back to active or\
            \ close it permanently. \n\n* **Closed**: The account holder is permanently\
            \ deactivated. This action cannot be undone."
          enum:
          - active
          - closed
          - inactive
          - suspended
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: '#/components/schemas/SweepConfiguration'
          description: "Contains key-value pairs that specify configurations for balance\
            \ sweeps per currency code. A sweep pulls in or pushes out funds based\
            \ on a defined schedule, amount, and a source (for pulling funds) or a\
            \ destination (for pushing funds).\n\n Sweep configurations on the account\
            \ holder level applies to all of the account holder's balance accounts.\n\
            \n The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)\
            \ in uppercase. For example, **EUR**. The value must be an object containing\
            \ the sweep configuration.\n\nEither `balanceAccountId`, `transferInstrumentId`,\
            \ or `merchantAccount` must be specified in the request."
          type: object
      required:
      - legalEntityId
      - id
    AccountHolderCapability:
      properties:
        allowed:
          description: Indicates whether the capability is allowed. Adyen sets this
            to **true** if the verification is successful and the account holder is
            permitted to use the capability.
          readOnly: true
          type: boolean
        allowedLevel:
          description: 'The capability level that is allowed for the account holder.


            Possible values: **notApplicable**, **low**, **medium**, **high**.'
          enum:
          - high
          - low
          - medium
          - notApplicable
          readOnly: true
          type: string
        allowedSettings:
          description: A JSON object containing the settings that are allowed for
            the account holder.
          readOnly: true
          $ref: '#/components/schemas/JSONObject'
        deadline:
          description: Contains capability deadline date and corresponding action
            to be taken at this date.
          readOnly: true
          $ref: '#/components/schemas/CapabilityDeadline'
        enabled:
          description: Indicates whether the capability is enabled. If **false**,
            the capability is temporarily disabled for the account holder.
          type: boolean
        problems:
          description: Contains verification errors and the actions that you can take
            to resolve them.
          items:
            $ref: '#/components/schemas/CapabilityProblem'
          readOnly: true
          type: array
        requested:
          description: Indicates whether the capability is requested. To check whether
            the account holder is permitted to use the capability, refer to the `allowed`
            field.
          type: boolean
        requestedLevel:
          description: 'The requested level of the capability. Some capabilities,
            such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels),
            have different levels. Levels increase the capability, but also require
            additional checks and increased monitoring.


            Possible values: **notApplicable**, **low**, **medium**, **high**.'
          enum:
          - high
          - low
          - medium
          - notApplicable
          type: string
        requestedSettings:
          description: A JSON object containing the settings that were requested for
            the account holder.
          readOnly: true
          $ref: '#/components/schemas/JSONObject'
        verificationStatus:
          description: 'The status of the verification checks for the capability.


            Possible values:


            * **pending**: Adyen is running the verification.


            * **invalid**: The verification failed. Check if the `errors` array contains
            more information.


            * **valid**: The verification has been successfully completed.


            * **rejected**: Adyen has verified the information, but found reasons
            to not allow the capability.

            '
          enum:
          - invalid
          - pending
          - rejected
          - valid
          readOnly: true
          type: string
    AccountHolderInfo:
      properties:
        balancePlatform:
          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id)
            to which the account holder belongs. Required in the request if your API
            credentials can be used for multiple balance platforms.
          type: string
        contactDetails:
          description: Contact details of the account holder.
          $ref: '#/components/schemas/ContactDetails'
        description:
          description: Your description for the account holder, maximum 300 characters.
          maxLength: 300
          type: string
        legalEntityId:
          description: 'The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/legalEntities__resParam_id)
            associated with the account holder. Adyen performs a verification process
            against the legal entity of the account holder.


            For more information on how to create a legal entity, refer to [Onboard
            and verify account holders](https://docs.adyen.com/issuing/kyc-verification).'
          type: string
        reference:
          description: Your reference for the account holder, maximum 150 characters.
          maxLength: 150
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: '#/components/schemas/SweepConfiguration'
          description: "Contains key-value pairs that specify configurations for balance\
            \ sweeps per currency code. A sweep pulls in or pushes out funds based\
            \ on a defined schedule, amount, and a source (for pulling funds) or a\
            \ destination (for pushing funds).\n\n Sweep configurations on the account\
            \ holder level applies to all of the account holder's balance accounts.\n\
            \n The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)\
            \ in uppercase. For example, **EUR**. The value must be an object containing\
            \ the sweep configuration.\n\nEither `balanceAccountId`, `transferInstrumentId`,\
            \ or `merchantAccount` must be specified in the request."
          type: object
      required:
      - legalEntityId
    Address2:
      properties:
        city:
          description: 'The name of the city. '
          type: string
        country:
          description: 'The two-character ISO-3166-1 alpha-2 country code. For example,
            **US**.

            > If you don''t know the country or are not collecting the country from
            the shopper, provide `country` as `ZZ`.'
          type: string
        houseNumberOrName:
          description: 'The number or name of the house. '
          type: string
        postalCode:
          description: A maximum of five digits for an address in the US, or a maximum
            of ten characters for an address in all other countries.
          type: string
        stateOrProvince:
          description: 'The two-character ISO 3166-2 state or province code. For example,
            **CA** in the US or **ON** in Canada.

            > Required for the US and Canada.'
          type: string
        street:
          description: "The name of the street. \n> The house number should not be\
            \ included in this field; it should be separately provided via `houseNumberOrName`."
          type: string
      required:
      - street
      - houseNumberOrName
      - city
      - postalCode
      - country
    Address3:
      properties:
        city:
          description: The name of the city.
          type: string
        country:
          description: 'The two-character ISO-3166-1 alpha-2 country code. For example,
            **US**.

            >If you don''t know the country or are not collecting the country from
            the shopper, provide `country` as `ZZ`.'
          type: string
        line1:
          description: First line of the address.
          type: string
        line2:
          description: Second line of the address.
          type: string
        line3:
          description: Third line of the address.
          type: string
        postalCode:
          description: 'The postal code.

            Maximum length:

            * 5 digits for an address in the US.

            * 10 characters for an address in all other countries.'
          type: string
        stateOrProvince:
          description: 'The two-letterISO 3166-2 state or province code. For example,
            **CA** in the US or **ON** in Canada.

            > Required for the US and Canada.'
          type: string
      required:
      - country
    Amount:
      properties:
        currency:
          description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
          maxLength: 3
          minLength: 3
          type: string
        value:
          description: The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
          format: int64
          type: integer
      required:
      - value
      - currency
    Authentication:
      properties:
        email:
          description: The email address where the one-time password (OTP) is sent.
          type: string
        password:
          description: "The password used for 3D Secure password-based authentication.\
            \ The value must be between 1 to 30 characters and must only contain the\
            \ following supported characters.\n\n* Characters between **a-z**, **A-Z**,\
            \ and **0-9**\n\n* Special characters: **\xE4\xF6\xFC\xDF\xC4\xD6\xDC\
            +-*/\xE7%()=?!~#'\",;:$&\xE0\xF9\xF2\xE2\xF4\xFB\xE1\xFA\xF3**"
          maxLength: 30
          minLength: 1
          type: string
        phone:
          description: 'The phone number where the one-time password (OTP) is sent.


            This object must have:


            * A `type` set to **mobile**.


            * A `number` with a valid country code.


            * A `number` with more than 4 digits, excluding the country code.


            >Make sure to verify that the card user owns the phone number.'
          $ref: '#/components/schemas/Phone'
    Balance:
      properties:
        available:
          description: The remaining amount available for spending.
          format: int64
          type: integer
        balance:
          description: The total amount in the balance.
          format: int64
          type: integer
        currency:
          description: The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)
            of the balance.
          type: string
        reserved:
          description: The amount reserved for payments that have been authorised,
            but have not been captured yet.
          format: int64
          type: integer
      required:
      - currency
      - balance
      - reserved
      - available
    BalanceAccount:
      properties:
        accountHolderId:
          description: The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id)
            associated with the balance account.
          type: string
        balances:
          description: List of balances with the amount and currency.
          items:
            $ref: '#/components/schemas/Balance'
          type: array
        defaultCurrencyCode:
          description: 'The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)
            of the balance account.

            The default value is **EUR**.'
          type: string
        description:
          description: A human-readable description of the balance account, maximum
            300 characters. You can use this parameter to distinguish between multiple
            balance accounts under an account holder.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the balance account.
          type: string
        reference:
          description: Your reference for the balance account, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          description: "The status of the balance account, set to **Active** by default.\
            \ \n"
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: '#/components/schemas/SweepConfiguration'
          description: 'Contains key-value pairs that specify configurations for balance
            sweeps per currency code. A sweep pulls in or pushes out funds based on
            a defined schedule, amount, and a source (for pulling funds) or a destination
            (for pushing funds).


            Sweep configurations on the balance account override [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/accountHolders__reqParam_sweepConfigurations)
            configurations.


            The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)
            in uppercase. For example, **EUR**. The value must be an object containing
            the sweep configuration.'
          type: object
      required:
      - accountHolderId
      - id
    BalanceAccountInfo:
      properties:
        accountHolderId:
          description: The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id)
            associated with the balance account.
          type: string
        defaultCurrencyCode:
          description: 'The default three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)
            of the balance account.

            The default value is **EUR**.'
          type: string
        description:
          description: A human-readable description of the balance account, maximum
            300 characters. You can use this parameter to distinguish between multiple
            balance accounts under an account holder.
          maxLength: 300
          type: string
        reference:
          description: Your reference for the balance account, maximum 150 characters.
          maxLength: 150
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: '#/components/schemas/SweepConfiguration'
          description: 'Contains key-value pairs that specify configurations for balance
            sweeps per currency code. A sweep pulls in or pushes out funds based on
            a defined schedule, amount, and a source (for pulling funds) or a destination
            (for pushing funds).


            Sweep configurations on the balance account override [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/accountHolders__reqParam_sweepConfigurations)
            configurations.


            The key must be a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)
            in uppercase. For example, **EUR**. The value must be an object containing
            the sweep configuration.'
          type: object
      required:
      - accountHolderId
    BalanceAccountUpdateRequest:
      properties:
        accountHolderId:
          description: The unique identifier of the [account holder](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/accountHolders__resParam_id)
            associated with the balance account.
          type: string
        description:
          description: A human-readable description of the balance account, maximum
            300 characters. You can use this parameter to distinguish between multiple
            balance accounts under an account holder.
          maxLength: 300
          type: string
        status:
          description: 'The status of the balance account. Payment instruments linked
            to the balance account can only be used if the balance account status
            is **Active**.


            Possible values: **Active**, **Inactive**, **Closed**, **Suspended**.'
          enum:
          - Active
          - Closed
          - Inactive
          - Suspended
          type: string
        sweepConfigurations:
          additionalProperties:
            $ref: '#/components/schemas/SweepConfiguration'
          description: "Contains key-value pairs that specify [balance sweep configuration\
            \ per currency code](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__reqParam_sweepConfigurations).\n\
            \nYou can update the balance account to add, update, or delete configurations.\n\
            \n* To add a configuration, send the currency code as a key and the configuration\
            \ as the object.\n\n * To update a configuration, send the whole configuration\
            \ with your updates.\n\n* To delete a configuration, set the value to\
            \ **null**. For example, `\"EUR\": null`."
          type: object
    BalancePlatform:
      properties:
        description:
          description: Your description of the balance platform, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the balance platform.
          type: string
        status:
          description: 'The status of the balance platform.


            Possible values: **Active**, **Inactive**, **Closed**, **Suspended**.'
          type: string
      required:
      - id
    BrandVariantsRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          description: "List of card brand variants.\n\nPossible values: \n\n- **mc**,\
            \ **mccredit**, **mccommercialcredit_b2b**, **mcdebit**, **mcbusinessdebit**,\
            \ **mcbusinessworlddebit**, **mcprepaid**, **mcmaestro**\n\n - **visa**,\
            \ **visacredit**, **visadebit**, **visaprepaid**.\n\nYou can specify a\
            \ rule for a generic variant. For example, to create a rule for all Mastercard\
            \ payment instruments, use **mc**. The rule is applied to all payment\
            \ instruments under **mc**, such as **mcbusinessdebit** and **mcdebit**.\n\
            \n"
          items:
            type: string
          type: array
      required:
      - operation
    BulkAddress:
      properties:
        city:
          description: The name of the city.
          type: string
        company:
          description: The name of the company.
          type: string
        country:
          description: The two-character ISO-3166-1 alpha-2 country code. For example,
            **US**.
          type: string
        email:
          description: The email address.
          type: string
        houseNumberOrName:
          description: The house number or name.
          type: string
        mobile:
          description: The full telephone number.
          type: string
        postalCode:
          description: 'The postal code.


            Maximum length:


            * 5 digits for addresses in the US.


            * 10 characters for all other countries.'
          type: string
        stateOrProvince:
          description: 'The two-letter ISO 3166-2 state or province code.


            Maximum length: 2 characters for addresses in the US.'
          type: string
        street:
          description: The streetname of the house.
          type: string
      required:
      - country
    CapabilityDeadline:
      properties:
        action:
          description: Action that will be executed at executesAt date
          enum:
          - deactivateAccount
          type: string
        executesAt:
          description: Capability deadline date. The date is in ISO-8601 format yyyy-mm-dd
            (e.g. 2000-01-31).
          type: string
    CapabilityProblem:
      properties:
        entity:
          description: Contains the type of the entity and the corresponding ID.
          $ref: '#/components/schemas/CapabilityProblemEntity'
        verificationErrors:
          description: Contains information about the verification error.
          items:
            $ref: '#/components/schemas/VerificationError'
          type: array
    CapabilityProblemEntity:
      properties:
        id:
          description: The ID of the entity.
          type: string
        owner:
          description: Contains details about the owner of the entity that has an
            error.
          $ref: '#/components/schemas/CapabilityProblemEntity-recursive'
        type:
          description: "Type of entity. \n\nPossible values: **LegalEntity**, **BankAccount**,\
            \ **Document**."
          enum:
          - BankAccount
          - Document
          - LegalEntity
          type: string
    CapabilityProblemEntity-recursive:
      properties:
        id:
          description: The ID of the entity.
          type: string
        type:
          description: "Type of entity. \n\nPossible values: **LegalEntity**, **BankAccount**,\
            \ **Document**."
          enum:
          - BankAccount
          - Document
          - LegalEntity
          type: string
      required: []
    Card:
      properties:
        authentication:
          description: Contains the card user's password and mobile phone number.
            This is required when you issue cards that can be used to make online
            payments within the EEA and the UK, or can be added to digital wallets.
            Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets)
            for more information.
          $ref: '#/components/schemas/Authentication'
        bin:
          description: The bank identification number (BIN) of the card number.
          type: string
        brand:
          description: 'The brand of the payment instrument.

            Possible values: **visa**, **mc**.'
          type: string
        brandVariant:
          description: 'The brand variant of the payment instrument.

            >Contact your Adyen Implementation Manager to get the values that are
            relevant to your integration. Examples: **visadebit**, **mcprepaid**.'
          type: string
        cardholderName:
          description: "The name of the card holder.\n Maximum length: 26 characters."
          maxLength: 26
          type: string
        configuration:
          description: "Settings required when creating a physical card. \n\nReach\
            \ out to your Adyen contact to get the values that you can send in this\
            \ object."
          $ref: '#/components/schemas/CardConfiguration'
        cvc:
          description: 'The CVC2 value of the card.

            > The CVC2 is not sent by default. This is only returned in the `POST`
            response for single-use virtual cards.'
          type: string
        deliveryContact:
          x-addedInVersion: '2'
          description: The delivery contact (name and address) for physical card delivery.
          $ref: '#/components/schemas/DeliveryContact'
        expiration:
          description: The expiration date of the card.
          $ref: '#/components/schemas/Expiry'
        formFactor:
          description: 'The form factor of the card.

            Possible values: **virtual**, **physical**.'
          enum:
          - physical
          - unknown
          - virtual
          type: string
        lastFour:
          description: Last last four digits of the card number.
          type: string
        number:
          description: 'The primary account number (PAN) of the card.

            > The PAN is masked by default and returned only for single-use virtual
            cards.'
          readOnly: true
          type: string
      required:
      - formFactor
      - cardholderName
      - brand
      - brandVariant
      - number
    CardConfiguration:
      properties:
        activation:
          description: Overrides the activation label design ID defined in the `configurationProfileId`.
            The activation label is attached to the card and contains the activation
            instructions.
          type: string
        activationUrl:
          description: "Your app's URL, if you want to activate cards through your\
            \ app. For example, **my-app://ref1236a7d**. A QR code is created based\
            \ on this URL, and is included in the carrier. Before you use this field,\
            \ reach out to your Adyen contact to set up the QR code process. \n\n\
            Maximum length: 255 characters."
          maxLength: 255
          type: string
        bulkAddress:
          description: Overrides the shipment bulk address defined in the `configurationProfileId`.
          $ref: '#/components/schemas/BulkAddress'
        cardImageId:
          description: The ID of the card image. This is the image that will be printed
            on the full front of the card.
          type: string
        carrier:
          description: Overrides the carrier design ID defined in the `configurationProfileId`.
            The carrier is the letter or packaging to which the card is attached.
          type: string
        carrierImageId:
          description: The ID of the carrier image. This is the image that will printed
            on the letter to which the card is attached.
          type: string
        configurationProfileId:
          description: 'The ID of the card configuration profile that contains the
            settings of the card. For example, the envelope and PIN mailer designs
            or the logistics company handling the shipment. All the settings in the
            profile are applied to the card, unless you provide other fields to override
            them.


            For example, send the `shipmentMethod` to override the logistics company
            defined in the card configuration profile.'
          type: string
        currency:
          description: The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217)
            currency code of the card. For example, **EUR**.
          type: string
        envelope:
          description: 'Overrides the envelope design ID defined in the `configurationProfileId`. '
          type: string
        insert:
          description: Overrides the insert design ID defined in the `configurationProfileId`.
            An insert is any additional material, such as marketing materials, that
            are shipped together with the card.
          type: string
        language:
          description: The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
            language code of the card. For example, **en**.
          type: string
        logoImageId:
          description: The ID of the logo image. This is the image that will be printed
            on the partial front of the card, such as a logo on the upper right corner.
          type: string
        pinMailer:
          description: Overrides the PIN mailer design ID defined in the `configurationProfileId`.
            The PIN mailer is the letter on which the PIN is printed.
          type: string
        shipmentMethod:
          description: Overrides the logistics company defined in the `configurationProfileId`.
          type: string
      required:
      - configurationProfileId
    CardInfo:
      properties:
        authentication:
          description: Contains the card user's password and mobile phone number.
            This is required when you issue cards that can be used to make online
            payments within the EEA and the UK, or can be added to digital wallets.
            Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets)
            for more information.
          $ref: '#/components/schemas/Authentication'
        brand:
          description: 'The brand of the payment instrument.

            Possible values: **visa**, **mc**.'
          type: string
        brandVariant:
          description: 'The brand variant of the payment instrument.

            >Contact your Adyen Implementation Manager to get the values that are
            relevant to your integration. Examples: **visadebit**, **mcprepaid**.'
          type: string
        cardholderName:
          description: "The name of the card holder.\n Maximum length: 26 characters."
          maxLength: 26
          type: string
        configuration:
          description: "Settings required when creating a physical card. \n\nReach\
            \ out to your Adyen contact to get the values that you can send in this\
            \ object."
          $ref: '#/components/schemas/CardConfiguration'
        deliveryContact:
          x-addedInVersion: '2'
          description: The delivery contact (name and address) for physical card delivery.
          $ref: '#/components/schemas/DeliveryContact'
        formFactor:
          description: 'The form factor of the card.

            Possible values: **virtual**, **physical**.'
          enum:
          - physical
          - unknown
          - virtual
          type: string
      required:
      - formFactor
      - cardholderName
      - brand
      - brandVariant
    ContactDetails:
      properties:
        address:
          description: The address of the account holder.
          $ref: '#/components/schemas/Address2'
        email:
          description: The email address of the account holder.
          type: string
        phone:
          description: The phone number of the account holder.
          $ref: '#/components/schemas/Phone'
        webAddress:
          description: The URL of the account holder's website.
          type: string
      required:
      - email
      - phone
      - address
    CountriesRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          description: List of two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            country codes.
          items:
            type: string
          type: array
      required:
      - operation
    DeliveryContact:
      properties:
        address:
          description: The address of the contact.
          $ref: '#/components/schemas/Address3'
        email:
          description: The email address of the contact.
          type: string
        fullPhoneNumber:
          description: 'The full phone number of the contact provided as a single
            string. It will be handled as a landline phone.

            **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"'
          type: string
        name:
          description: The name of the contact.
          $ref: '#/components/schemas/Name2'
        phoneNumber:
          description: The phone number of the contact.
          $ref: '#/components/schemas/PhoneNumber2'
        webAddress:
          description: The URL of the contact's website.
          type: string
    DifferentCurrenciesRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          description: 'Checks the currency of the payment against the currency of
            the payment instrument.


            Possible values:


            - **true**: The currency of the payment is different from the currency
            of the payment instrument.


            - **false**: The currencies are the same.


            '
          type: boolean
      required:
      - operation
    EntryModesRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          description: 'List of point-of-sale entry modes.


            Possible values: **manual**, **chip**, **magstripe**, **contactless**,
            **cof**, **token**, **server**, **barcode**, **ocr**.


            '
          items:
            enum:
            - barcode
            - chip
            - cof
            - contactless
            - magstripe
            - manual
            - ocr
            - server
            - token
            - unknown
            type: string
          type: array
      required:
      - operation
    Expiry:
      properties:
        month:
          description: The month in which the card will expire.
          type: string
        year:
          description: The year in which the card will expire.
          type: string
    InternationalTransactionRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          description: 'Boolean indicating whether transaction is an international
            transaction.


            Possible values:


            - **true**: The transaction is an international transaction.


            - **false**: The transaction is a domestic transaction.


            '
          type: boolean
      required:
      - operation
    InvalidField:
      properties:
        message:
          description: Description of the validation error.
          type: string
        name:
          description: The field that has an invalid value.
          type: string
        value:
          description: The invalid value.
          type: string
      required:
      - name
      - value
      - message
    JSONObject:
      properties:
        paths:
          items:
            $ref: '#/components/schemas/JSONPath'
          type: array
        rootPath:
          $ref: '#/components/schemas/JSONPath'
    JSONPath:
      properties:
        content:
          items:
            type: string
          type: array
    MatchingTransactionsRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          description: The number of transactions.
          format: int32
          type: integer
      required:
      - operation
    MccsRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          description: List of merchant category codes (MCCs).
          items:
            type: string
          type: array
      required:
      - operation
    MerchantAcquirerPair:
      properties:
        acquirerId:
          description: The acquirer ID.
          type: string
        merchantId:
          description: The merchant identification number (MID).
          type: string
    MerchantsRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          description: List of merchant ID and acquirer ID pairs.
          items:
            $ref: '#/components/schemas/MerchantAcquirerPair'
          type: array
      required:
      - operation
    Name2:
      properties:
        firstName:
          description: The first name.
          type: string
        lastName:
          description: The last name.
          type: string
      required:
      - firstName
      - lastName
    PaginatedAccountHoldersResponse:
      properties:
        accountHolders:
          description: List of account holders.
          items:
            $ref: '#/components/schemas/AccountHolder'
          type: array
        hasNext:
          description: Indicates whether there are more items on the next page.
          type: boolean
        hasPrevious:
          description: Indicates whether there are more items on the previous page.
          type: boolean
      required:
      - accountHolders
      - hasPrevious
      - hasNext
    PaginatedBalanceAccountsResponse:
      properties:
        balanceAccounts:
          description: List of balance accounts.
          items:
            $ref: '#/components/schemas/BalanceAccount'
          type: array
        hasNext:
          description: Indicates whether there are more items on the next page.
          type: boolean
        hasPrevious:
          description: Indicates whether there are more items on the previous page.
          type: boolean
      required:
      - balanceAccounts
      - hasPrevious
      - hasNext
    PaginatedPaymentInstrumentsResponse:
      properties:
        hasNext:
          description: Indicates whether there are more items on the next page.
          type: boolean
        hasPrevious:
          description: Indicates whether there are more items on the previous page.
          type: boolean
        paymentInstruments:
          description: List of payment instruments associated with the balance account.
          items:
            $ref: '#/components/schemas/PaymentInstrument'
          type: array
      required:
      - paymentInstruments
      - hasPrevious
      - hasNext
    PaymentInstrument:
      properties:
        balanceAccountId:
          description: The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id)
            associated with the payment instrument.
          type: string
        card:
          description: Contains information about the card payment instrument.
          $ref: '#/components/schemas/Card'
        description:
          description: Your description for the payment instrument, maximum 300 characters.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the payment instrument.
          type: string
        issuingCountryCode:
          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            country code where the payment instrument is issued. For example, **NL**
            or **US**.
          type: string
        paymentInstrumentGroupId:
          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id)
            to which the payment instrument belongs.
          type: string
        reference:
          description: Your reference for the payment instrument, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          x-enum:
          - description: The payment instrument is suspended. Either because it was
              stolen or lost.
            value: blocked
          - description: The payment instrument is permanently closed. This action
              cannot be undone.
            value: discarded
          - description: The payment instrument is active and can be used to make
              payments.
            value: active
          - description: The payment instrument is inactive and cannot be used to
              make payments.
            value: inactive
          - description: The payment instrument is suspended. Either because it was
              stolen or lost.
            value: suspended
          - description: The payment instrument is permanently closed. This action
              cannot be undone.
            value: closed
          description: "The status of the payment instrument. If a status is not specified\
            \ when creating a payment instrument, it is set to **active** by default.\
            \ However, there can be exceptions based on the `card.formFactor` and\
            \ the `issuingCountryCode`. For example, when issuing physical cards in\
            \ the US, the default status is **inactive**.\n\nPossible values: \n\n\
            \ * **active**:  The payment instrument is active and can be used to make\
            \ payments. \n\n * **inactive**: The payment instrument is inactive and\
            \ cannot be used to make payments. \n\n * **suspended**: The payment instrument\
            \ is suspended, either because it was stolen or lost. \n\n * **closed**:\
            \ The payment instrument is permanently closed. This action cannot be\
            \ undone. \n\n"
          enum:
          - active
          - blocked
          - closed
          - discarded
          - inactive
          - suspended
          type: string
        statusReason:
          x-addedInVersion: '2'
          description: 'The reason for updating the status of the payment instrument.


            Possible values: **lost**, **stolen**, **damaged**, **suspectedFraud**,
            **expired**, **endOfLife**, **accountClosure**, **other**.

            If the reason is **other**, you must also send the `statusComment` parameter
            describing the status change.'
          enum:
          - accountClosure
          - damaged
          - endOfLife
          - expired
          - lost
          - other
          - stolen
          - suspectedFraud
          type: string
        type:
          description: 'Type of payment instrument.


            Possible value: **card**. '
          enum:
          - card
          type: string
      required:
      - balanceAccountId
      - issuingCountryCode
      - type
      - id
    PaymentInstrumentGroup:
      properties:
        balancePlatform:
          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id)
            to which the payment instrument group belongs.
          type: string
        description:
          description: Your description for the payment instrument group, maximum
            300 characters.
          maxLength: 300
          type: string
        id:
          description: The unique identifier of the payment instrument group.
          type: string
        properties:
          additionalProperties:
            type: string
          description: Properties of the payment instrument group.
          type: object
        reference:
          description: Your reference for the payment instrument group, maximum 150
            characters.
          maxLength: 150
          type: string
        txVariant:
          description: The tx variant of the payment instrument group.
          type: string
      required:
      - balancePlatform
      - txVariant
    PaymentInstrumentGroupInfo:
      properties:
        balancePlatform:
          description: The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id)
            to which the payment instrument group belongs.
          type: string
        description:
          description: Your description for the payment instrument group, maximum
            300 characters.
          maxLength: 300
          type: string
        properties:
          additionalProperties:
            type: string
          description: Properties of the payment instrument group.
          type: object
        reference:
          description: Your reference for the payment instrument group, maximum 150
            characters.
          maxLength: 150
          type: string
        txVariant:
          description: The tx variant of the payment instrument group.
          type: string
      required:
      - balancePlatform
      - txVariant
    PaymentInstrumentInfo:
      properties:
        balanceAccountId:
          description: The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id)
            associated with the payment instrument.
          type: string
        card:
          description: Contains information about the card. Required when you create
            a payment instrument of `type` **card**.
          $ref: '#/components/schemas/CardInfo'
        description:
          description: Your description for the payment instrument, maximum 300 characters.
          maxLength: 300
          type: string
        issuingCountryCode:
          description: The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            country code where the payment instrument is issued. For example, **NL**
            or **US**.
          type: string
        paymentInstrumentGroupId:
          description: The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id)
            to which the payment instrument belongs.
          type: string
        reference:
          description: Your reference for the payment instrument, maximum 150 characters.
          maxLength: 150
          type: string
        status:
          x-enum:
          - description: The payment instrument is suspended. Either because it was
              stolen or lost.
            value: blocked
          - description: The payment instrument is permanently closed. This action
              cannot be undone.
            value: discarded
          - description: The payment instrument is active and can be used to make
              payments.
            value: active
          - description: The payment instrument is inactive and cannot be used to
              make payments.
            value: inactive
          - description: The payment instrument is suspended. Either because it was
              stolen or lost.
            value: suspended
          - description: The payment instrument is permanently closed. This action
              cannot be undone.
            value: closed
          description: "The status of the payment instrument. If a status is not specified\
            \ when creating a payment instrument, it is set to **active** by default.\
            \ However, there can be exceptions based on the `card.formFactor` and\
            \ the `issuingCountryCode`. For example, when issuing physical cards in\
            \ the US, the default status is **inactive**.\n\nPossible values: \n\n\
            \ * **active**:  The payment instrument is active and can be used to make\
            \ payments. \n\n * **inactive**: The payment instrument is inactive and\
            \ cannot be used to make payments. \n\n * **suspended**: The payment instrument\
            \ is suspended, either because it was stolen or lost. \n\n * **closed**:\
            \ The payment instrument is permanently closed. This action cannot be\
            \ undone. \n\n"
          enum:
          - active
          - blocked
          - closed
          - discarded
          - inactive
          - suspended
          type: string
        statusReason:
          x-addedInVersion: '2'
          description: 'The reason for updating the status of the payment instrument.


            Possible values: **lost**, **stolen**, **damaged**, **suspectedFraud**,
            **expired**, **endOfLife**, **accountClosure**, **other**.

            If the reason is **other**, you must also send the `statusComment` parameter
            describing the status change.'
          enum:
          - accountClosure
          - damaged
          - endOfLife
          - expired
          - lost
          - other
          - stolen
          - suspectedFraud
          type: string
        type:
          description: 'Type of payment instrument.


            Possible value: **card**. '
          enum:
          - card
          type: string
      required:
      - balanceAccountId
      - issuingCountryCode
      - type
    PaymentInstrumentUpdateRequest:
      properties:
        balanceAccountId:
          description: 'The unique identifier of the balance account associated with
            this payment instrument.

            >You can only change the balance account ID if the payment instrument
            has **inactive** status.'
          type: string
        card:
          description: Object that contains information about the card payment instrument.
          $ref: '#/components/schemas/CardInfo'
        status:
          x-enum:
          - description: The payment instrument is suspended. Either because it was
              stolen or lost.
            value: blocked
          - description: The payment instrument is permanently closed. This action
              cannot be undone.
            value: discarded
          - description: The payment instrument is active and can be used to make
              payments.
            value: active
          - description: The payment instrument is inactive and cannot be used to
              make payments.
            value: inactive
          - description: The payment instrument is suspended. Either because it was
              stolen or lost.
            value: suspended
          - description: The payment instrument is permanently closed. This action
              cannot be undone.
            value: closed
          description: "The status of the payment instrument. If a status is not specified\
            \ when creating a payment instrument, it is set to **active** by default.\
            \ However, there can be exceptions based on the `card.formFactor` and\
            \ the `issuingCountryCode`. For example, when issuing physical cards in\
            \ the US, the default status is **inactive**.\n\nPossible values: \n\n\
            \ * **active**:  The payment instrument is active and can be used to make\
            \ payments. \n\n * **inactive**: The payment instrument is inactive and\
            \ cannot be used to make payments. \n\n * **suspended**: The payment instrument\
            \ is suspended, either because it was stolen or lost. \n\n * **closed**:\
            \ The payment instrument is permanently closed. This action cannot be\
            \ undone. \n\n"
          enum:
          - active
          - blocked
          - closed
          - discarded
          - inactive
          - suspended
          type: string
        statusComment:
          description: 'Comment for the status of the payment instrument.


            Required if `statusReason` is **other**.'
          type: string
        statusReason:
          x-addedInVersion: '2'
          description: 'The reason for updating the status of the payment instrument.


            Possible values: **lost**, **stolen**, **damaged**, **suspectedFraud**,
            **expired**, **endOfLife**, **accountClosure**, **other**.

            If the reason is **other**, you must also send the `statusComment` parameter
            describing the status change.'
          enum:
          - accountClosure
          - damaged
          - endOfLife
          - expired
          - lost
          - other
          - stolen
          - suspectedFraud
          type: string
    Phone:
      properties:
        number:
          description: "The full phone number provided as a single string. \nFor example,\
            \ **\"0031 6 11 22 33 44\"**, **\"+316/1122-3344\"**, \n\n or **\"(0031)\
            \ 611223344\"**."
          type: string
        type:
          description: "Type of phone number.\nPossible values: \n**Landline**, **Mobile**.\n"
          enum:
          - landline
          - mobile
          type: string
      required:
      - number
      - type
    PhoneNumber2:
      properties:
        phoneCountryCode:
          description: 'The two-character ISO-3166-1 alpha-2 country code of the phone
            number.

            For example, **US** or **NL**.'
          type: string
        phoneNumber:
          description: 'The phone number.

            The inclusion of the phone number country code is not necessary.'
          type: string
        phoneType:
          description: 'The type of the phone number.

            Possible values: **Landline**, **Mobile**, **SIP**, **Fax**.'
          enum:
          - Fax
          - Landline
          - Mobile
          - SIP
          type: string
      required:
      - phoneCountryCode
      - phoneNumber
    ProcessingTypesRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          description: 'List of processing types.


            Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**,
            **balanceInquiry**.


            '
          items:
            enum:
            - atmWithdraw
            - balanceInquiry
            - ecommerce
            - moto
            - pos
            - purchaseWithCashback
            - recurring
            - token
            - unknown
            type: string
          type: array
      required:
      - operation
    RemediatingAction:
      properties:
        code:
          description: The remediating action code.
          type: string
        message:
          description: A description of how you can resolve the verification error.
          type: string
    RestServiceError:
      properties:
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          type: string
        errorCode:
          description: A code that identifies the problem type.
          type: string
        errorType:
          description: A URI that identifies the problem type, pointing to human-readable
            documentation on this problem type.
          type: string
        instance:
          description: A unique URI that identifies the specific occurrence of the
            problem.
          type: string
        invalidFields:
          description: Detailed explanation of each validation error, when applicable.
          items:
            $ref: '#/components/schemas/InvalidField'
          type: array
        requestId:
          description: A unique reference for the request, essentially the same as
            `pspReference`.
          type: string
        response:
          description: JSON response payload.
          $ref: '#/components/schemas/JSONObject'
        status:
          description: The HTTP status code.
          format: int32
          type: integer
        title:
          description: A short, human-readable summary of the problem type.
          type: string
      required:
      - errorType
      - errorCode
      - title
      - detail
      - status
    SweepConfiguration:
      properties:
        balanceAccountId:
          description: The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id)
            that will be the source or destination of the balance sweep. This can
            only be used for periodic sweep schedules such as `schedule.type` **daily**
            or **monthly**.
          type: string
        merchantAccount:
          description: The merchant account that will be the source of funds. You
            can only use this if you are processing payments with Adyen. This can
            only be used for sweeps of `type` **pull** and `schedule.type` **balance**.
          type: string
        schedule:
          description: The schedule when the `triggerAmount` is evaluated. If the
            balance meets the threshold, funds are pushed out of or pulled in to the
            balance account.
          $ref: '#/components/schemas/SweepSchedule'
        sweepAmount:
          description: The amount that must be pushed out or pulled in. You can configure
            either `sweepAmount` or `targetAmount`, not both.
          $ref: '#/components/schemas/Amount'
        targetAmount:
          description: The amount that must be available in the balance account after
            the sweep. You can configure either `sweepAmount` or `targetAmount`, not
            both.
          $ref: '#/components/schemas/Amount'
        transferInstrumentId:
          description: 'The unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id)
            that will be the source or destination of the balance sweep. This can
            be used for periodic or instant sweep schedules.


            If specified in combination with a merchant account, it instructs a direct
            debit from this instrument for the configured merchant account.'
          type: string
        triggerAmount:
          description: 'The threshold amount that triggers the sweep. If not specified,
            the amount defaults to zero. The `triggerAmount` is evaluated according
            to the specified `schedule.type`.


            * For `type` **pull**, if the balance is less than or equal to the `triggerAmount`,
            funds are pulled in to the balance account.


            * For `type` **push**, if the balance is more than or equal to the `triggerAmount`,
            funds are pushed out of the balance account.'
          $ref: '#/components/schemas/Amount'
        type:
          default: push
          description: "The direction of sweep.\n\nPossible values:\n\n * **push**:\
            \ _Push funds out_ to a destination balance account or transfer instrument.\n\
            \n * **pull**: _Pull funds in_ from a source merchant account, transfer\
            \ instrument, or balance account. "
          enum:
          - pull
          - push
          type: string
      required:
      - schedule
      - type
    SweepSchedule:
      properties:
        type:
          description: 'The schedule type.


            Possible values:


            * **daily**: Push out funds daily at 07:00 AM CET.


            * **weekly**: Push out funds every Monday at 07:00 AM CET.


            * **monthly**: Push out funds every 1st of the month at 07:00 AM CET.


            * **balance**: Only for sweeps of `type` **pull** and with a `merchantAccount`
            or `transferInstrument` source. Pull in funds instantly if the balance
            is less than or equal to the `triggerAmount`.'
          enum:
          - balance
          - daily
          - monthly
          - weekly
          type: string
    TimeOfDay:
      properties:
        endTime:
          description: 'The end time in a time-only ISO-8601 extended offset format.
            For example: **08:00:00+02:00**, **22:30:00-03:00**.


            '
          type: string
        startTime:
          description: 'The start time in a time-only ISO-8601 extended offset format.
            For example: **08:00:00+02:00**, **22:30:00-03:00**.


            '
          type: string
    TimeOfDayRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          $ref: '#/components/schemas/TimeOfDay'
      required:
      - operation
    TotalAmountRestriction:
      properties:
        operation:
          description: Defines how the condition must be evaluated.
          type: string
        value:
          description: The amount value and currency.
          $ref: '#/components/schemas/Amount'
      required:
      - operation
    TransactionRule:
      properties:
        description:
          description: Your description for the transaction rule, maximum 300 characters.
          maxLength: 300
          type: string
        endDate:
          description: 'The date when the rule will stop being evaluated, in ISO 8601
            extended offset date-time format.  For example, **2020-12-18T10:15:30+01:00**.


            If not provided when creating a transaction rule, the rule will be evaluated
            until the rule status is set to **inactive**.'
          type: string
        entityKey:
          x-addedInVersion: '2'
          description: The ID and type of resource to which the rule applies.
          $ref: '#/components/schemas/TransactionRuleEntityKey'
        id:
          description: The unique identifier of the transaction rule.
          type: string
        interval:
          description: The interval when the rule conditions must be applied.
          $ref: '#/components/schemas/TransactionRuleInterval'
        reference:
          description: Your reference for the transaction rule, maximum 150 characters.
          maxLength: 150
          type: string
        ruleRestrictions:
          x-addedInVersion: '2'
          description: 'Contains one or more objects that define the conditions of
            the rule. Each object must have a value and an operation which determines
            how the values must be evaluated.


            For example, a `countries` object can have a list of country codes **["US",
            "CA"]** in the `value` field and **anyMatch** in the `operation` field.'
          $ref: '#/components/schemas/TransactionRuleRestrictions'
        startDate:
          description: "The date when the rule will start to be evaluated, in ISO\
            \ 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\
            \nIf not provided when creating a transaction rule, the `startDate` is\
            \ set to the date when the rule status is set to **active**. \n\n"
          type: string
        status:
          description: "The status of the transaction rule. If you provide a `startDate`\
            \ in the request, the rule is automatically created \nwith an **active**\
            \ status. \n\nPossible values: **active**, **inactive**."
          enum:
          - active
          - inactive
          type: string
        type:
          x-enum:
          - description: The rule provides categories (such as country and MCC) where
              payments must be allowed.
            value: allowList
          - description: The rule provides categories (such as country and MCC) where
              payments must be blocked.
            value: blockList
          - description: The rule sets limits for the maximum amount or maximum number
              of transactions for a given time interval.
            value: velocity
          - description: The rule sets limits for the maximum amount or maximum number
              of transactions for the lifetime of the payment instrument.
            value: maxUsage
          description: "Type of conditions provided in the rule.\n\nPossible values:\n\
            \  * **blockList**: The rule provides categories (such as country and\
            \ MCC) where payments must be blocked. \n * **maxUsage**: The rule sets\
            \ limits for the maximum amount or maximum number of transactions for\
            \ the lifetime of the payment instrument. \n * **velocity**: The rule\
            \ sets limits for the maximum amount or maximum number of transactions\
            \ for a given time interval.\n"
          enum:
          - allowList
          - blockList
          - maxUsage
          - velocity
          type: string
      required:
      - type
      - description
      - reference
      - entityKey
      - interval
      - ruleRestrictions
    TransactionRuleEntityKey:
      properties:
        entityReference:
          description: The ID of the resource.
          type: string
        entityType:
          description: 'The type of resource.


            Possible values: **balancePlatform**, **paymentInstrumentGroup**, **accountHolder**,
            **balanceAccount**, **paymentInstrument**.'
          type: string
    TransactionRuleInfo:
      properties:
        description:
          description: Your description for the transaction rule, maximum 300 characters.
          maxLength: 300
          type: string
        endDate:
          description: 'The date when the rule will stop being evaluated, in ISO 8601
            extended offset date-time format.  For example, **2020-12-18T10:15:30+01:00**.


            If not provided when creating a transaction rule, the rule will be evaluated
            until the rule status is set to **inactive**.'
          type: string
        entityKey:
          x-addedInVersion: '2'
          description: The ID and type of resource to which the rule applies.
          $ref: '#/components/schemas/TransactionRuleEntityKey'
        interval:
          description: The interval when the rule conditions must be applied.
          $ref: '#/components/schemas/TransactionRuleInterval'
        reference:
          description: Your reference for the transaction rule, maximum 150 characters.
          maxLength: 150
          type: string
        ruleRestrictions:
          x-addedInVersion: '2'
          description: 'Contains one or more objects that define the conditions of
            the rule. Each object must have a value and an operation which determines
            how the values must be evaluated.


            For example, a `countries` object can have a list of country codes **["US",
            "CA"]** in the `value` field and **anyMatch** in the `operation` field.'
          $ref: '#/components/schemas/TransactionRuleRestrictions'
        startDate:
          description: "The date when the rule will start to be evaluated, in ISO\
            \ 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.\n\
            \nIf not provided when creating a transaction rule, the `startDate` is\
            \ set to the date when the rule status is set to **active**. \n\n"
          type: string
        status:
          description: "The status of the transaction rule. If you provide a `startDate`\
            \ in the request, the rule is automatically created \nwith an **active**\
            \ status. \n\nPossible values: **active**, **inactive**."
          enum:
          - active
          - inactive
          type: string
        type:
          x-enum:
          - description: The rule provides categories (such as country and MCC) where
              payments must be allowed.
            value: allowList
          - description: The rule provides categories (such as country and MCC) where
              payments must be blocked.
            value: blockList
          - description: The rule sets limits for the maximum amount or maximum number
              of transactions for a given time interval.
            value: velocity
          - description: The rule sets limits for the maximum amount or maximum number
              of transactions for the lifetime of the payment instrument.
            value: maxUsage
          description: "Type of conditions provided in the rule.\n\nPossible values:\n\
            \  * **blockList**: The rule provides categories (such as country and\
            \ MCC) where payments must be blocked. \n * **maxUsage**: The rule sets\
            \ limits for the maximum amount or maximum number of transactions for\
            \ the lifetime of the payment instrument. \n * **velocity**: The rule\
            \ sets limits for the maximum amount or maximum number of transactions\
            \ for a given time interval.\n"
          enum:
          - allowList
          - blockList
          - maxUsage
          - velocity
          type: string
      required:
      - type
      - description
      - reference
      - entityKey
      - interval
      - ruleRestrictions
    TransactionRuleInterval:
      properties:
        type:
          description: "Defines the period during which the rule conditions and limits\
            \ apply, and how often the amount and transaction counters are reset.\n\
            \nPossible values:\n  * **perTransaction**: The conditions are evaluated\
            \ and the counters are reset for every transaction.\n * **daily**: The\
            \ counters are reset daily at 00:00:00 UTC.\n * **weekly**: The counters\
            \ are reset every Monday at 00:00:00 UTC. \n * **monthly**: The counters\
            \ reset every 1st day of the month at 00:00:00 UTC. \n * **lifetime**:\
            \ The conditions and limits apply to the lifetime of the payment instrument."
          enum:
          - daily
          - lifetime
          - monthly
          - perTransaction
          - weekly
          type: string
      required:
      - type
    TransactionRuleResponse:
      properties:
        transactionRule:
          description: The transaction rule.
          $ref: '#/components/schemas/TransactionRule'
    TransactionRuleRestrictions:
      properties:
        brandVariants:
          description: 'List of card brand variants and the operation.


            Supported operations: **anyMatch**, **noneMatch**.'
          $ref: '#/components/schemas/BrandVariantsRestriction'
        countries:
          description: 'List of countries and the operation.


            Supported operations: **anyMatch**, **noneMatch**.'
          $ref: '#/components/schemas/CountriesRestriction'
        differentCurrencies:
          description: 'Compares the currency of the payment against the currency
            of the payment instrument, and specifies the operation.


            Supported operations: **equals**, **notEquals**.'
          $ref: '#/components/schemas/DifferentCurrenciesRestriction'
        entryModes:
          description: 'List of point-of-sale entry modes and the operation..


            Supported operations: **anyMatch**, **noneMatch**.'
          $ref: '#/components/schemas/EntryModesRestriction'
        internationalTransaction:
          description: 'Indicates whether transaction is an international transaction
            and specifies the operation.


            Supported operations: **equals**, **notEquals**.'
          $ref: '#/components/schemas/InternationalTransactionRestriction'
        matchingTransactions:
          description: 'The number of transactions and the operation.


            Supported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**,
            **greaterThan**, **lessThanOrEqualTo**, **lessThan**.'
          $ref: '#/components/schemas/MatchingTransactionsRestriction'
        mccs:
          description: 'List of merchant category codes (MCCs) and the operation.


            Supported operations: **anyMatch**, **noneMatch**.'
          $ref: '#/components/schemas/MccsRestriction'
        merchants:
          description: 'List of merchant ID and acquirer ID pairs, and the operation.


            Supported operations: **anyMatch**, **noneMatch**.'
          $ref: '#/components/schemas/MerchantsRestriction'
        processingTypes:
          description: 'List of processing types and the operation.


            Supported operations: **anyMatch**, **noneMatch**.'
          $ref: '#/components/schemas/ProcessingTypesRestriction'
        timeOfDay:
          description: 'A start and end time in a time-only ISO-8601 extended offset
            format. Supported operations: **equals**, **notEquals**.'
          $ref: '#/components/schemas/TimeOfDayRestriction'
        totalAmount:
          description: 'The total amount and the operation.


            Supported operations: **equals**, **notEquals**, **greaterThanOrEqualTo**,
            **greaterThan**, **lessThanOrEqualTo**, **lessThan**.'
          $ref: '#/components/schemas/TotalAmountRestriction'
    TransactionRulesResponse:
      properties:
        transactionRules:
          description: List of transaction rules.
          items:
            $ref: '#/components/schemas/TransactionRule'
          type: array
    VerificationError:
      properties:
        code:
          description: The verification error code.
          type: string
        message:
          description: A description of the error.
          type: string
        remediatingActions:
          description: Contains the actions that you can take to resolve the verification
            error.
          items:
            $ref: '#/components/schemas/RemediatingAction'
          type: array
        subErrors:
          description: Contains more granular information about the verification error.
          items:
            $ref: '#/components/schemas/VerificationError-recursive'
          type: array
        type:
          description: "The type of error.\n\n Possible values: **invalidInput**,\
            \ **dataMissing**."
          enum:
          - dataMissing
          - invalidInput
          - pendingStatus
          type: string
    VerificationError-recursive:
      properties:
        code:
          description: The verification error code.
          type: string
        message:
          description: A description of the error.
          type: string
        type:
          description: "The type of error.\n\n Possible values: **invalidInput**,\
            \ **dataMissing**."
          enum:
          - dataMissing
          - invalidInput
          - pendingStatus
          type: string
        remediatingActions:
          description: Contains the actions that you can take to resolve the verification
            error.
          items:
            $ref: '#/components/schemas/RemediatingAction'
          type: array
      required: []
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
    BasicAuth:
      scheme: basic
      type: http
  examples:
    delete-transactionRules-transactionRuleId-success-200:
      summary: Response code - 200 OK
      description: Example response for successfully deleting a transaction rule
      value:
        amount:
          currency: EUR
          value: 10000
        description: Allow up to 100 EUR per month
        interval:
          type: monthly
        paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
        reference: myRule16378
        startDate: '2021-01-25T12:46:35.476629Z'
        type: velocity
        id: TR3227C223222B5CMDKQTBQ5M
    generic-400:
      summary: Response code - 400 Bad request
      value:
        type: https://docs.adyen.com/errors/general/bad-request
        title: Bad request
        status: 400
        detail: Empty input which would have resulted in a null result.
        errorCode: '00_400'
    generic-401:
      summary: Response code - 401 Unauthorized
      value:
        type: https://docs.adyen.com/errors/security/unauthorized
        title: Unauthorized
        status: 401
        errorCode: '00_401'
    generic-403:
      summary: Response code - 403 Forbidden.
      value:
        type: https://docs.adyen.com/errors/security/unauthorized
        title: Forbidden
        status: 403
        detail: Not the right permission to access this service.
        errorCode: '00_403'
    generic-404:
      summary: Response code 404 - Not found
      value:
        type: https://docs.adyen.com/errors/general/not-found
        title: Not found
        status: 404
        errorCode: '00_404'
    generic-422:
      summary: Response code - 422 Unprocessable Entity.
      value:
        type: https://docs.adyen.com/errors/general/invalid-field-value
        title: Invalid Payment Instrument information provided
        status: 422
        detail: The balanceAccountId can only be changed when the status is Inactive
          or Requested
        requestId: 1W1UI15PLVGC9V8O
        errorCode: '30_031'
    generic-500:
      summary: Response code - 500 Internal Server Error
      value:
        type: https://docs.adyen.com/errors/general/internal
        title: An internal error happened
        status: 500
        detail: Unrecoverable error while trying to create payment instrument
        requestId: 1WAF555PLWNTLYOQ
        errorCode: '00_500'
    generic-503:
      summary: Response code - 503 Internal Server Error
      value:
        type: https://docs.adyen.com/errors/general/processing-error
        title: Error processing request
        status: 500
        detail: Error while determining the payment instrument workflow
        requestId: 1W1UHY5O2CONU4R7
        errorCode: '99_500'
    get-accountHolders-id-balanceAccounts-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving a list of balance accounts under
        an account holder
      value:
        balanceAccounts:
        - accountHolderId: AH32272223222B59K6ZKBBFNQ
          defaultCurrencyCode: EUR
          id: BA32272223222B59K6ZXHBFN6
          status: Active
        - accountHolderId: AH32272223222B59K6ZKBBFNQ
          defaultCurrencyCode: EUR
          id: BA32272223222B59K72CKBFNJ
          status: Active
        - accountHolderId: AH32272223222B59K6ZKBBFNQ
          defaultCurrencyCode: EUR
          id: BA32272223222B5BRR27B2M7G
          status: Active
        hasNext: true
        hasPrevious: false
    get-accountHolders-id-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving an account holder
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        contactDetails:
          address:
            city: Amsterdam
            country: NL
            houseNumberOrName: '274'
            postalCode: 1020CD
            street: Brannan Street
          email: s.hopper@example.com
          phone:
            number: '+315551231234'
            type: Mobile
        description: S.Hopper - Staff 123
        id: AH32272223222B5CM4MWJ892H
        status: Active
    get-balanceAccounts-id-paymentInstruments-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving a list of payment instruments
        under a balance account
      value:
        hasNext: 'true'
        hasPrevious: 'false'
        paymentInstruments:
        - balanceAccountId: BA32272223222B59CZ3T52DKZ
          issuingCountryCode: GB
          status: Active
          type: card
          card:
            brandVariant: mc
            cardholderName: name
            formFactor: virtual
            bin: '555544'
            expiration:
              month: '12'
              year: '2022'
            lastFour: '2357'
            number: '************2357'
          id: PI32272223222B59M5TM658DT
        - balanceAccountId: BA32272223222B59CZ3T52DKZ
          issuingCountryCode: GB
          status: Active
          type: card
          card:
            brandVariant: mc
            cardholderName: name
            formFactor: virtual
            bin: '555544'
            expiration:
              month: '01'
              year: '2023'
            lastFour: '8331'
            number: '************8331'
          id: PI32272223222B59PXDGQDLSF
    get-balanceAccounts-id-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving a balance account
      value:
        accountHolderId: AH32272223222B59K6RTQBFNZ
        defaultCurrencyCode: EUR
        balances:
        - available: 0
          balance: 0
          currency: EUR
          reserved: 0
        id: BA3227C223222B5BLP6JQC3FD
        paymentInstruments:
        - id: PI32272223222B5BRM4FZ7J9J
        status: Active
    get-balancePlatforms-id-accountHolders-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving a list of account holders under
        a balance platform
      value:
        accountHolders:
        - contactDetails:
            address:
              city: Amsterdam
              country: NL
              houseNumberOrName: '6'
              postalCode: '12336750'
              street: Simon Carmiggeltstraat
          description: J. Doe
          id: AH32272223222B59DDWSCCMP7
          status: Active
        - contactDetails:
            address:
              city: Amsterdam
              country: NL
              houseNumberOrName: '11'
              postalCode: '12336750'
              street: Simon Carmiggeltstraat
          description: S. Hopper
          id: AH32272223222B59DJ7QBCMPN
          status: Active
        hasNext: 'true'
        hasPrevious: 'false'
    get-balancePlatforms-id-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving a balance platform
      value:
        id: YOUR_BALANCE_PLATFORM
        status: Active
    get-paymentInstrumentGroups-id-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving a payment instrument group
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        txVariant: mc
        id: PG3227C223222B5CMD3FJFKGZ
    get-paymentInstrumentGroups-id-transactionRules-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving a list of transaction rules applied
        to a payment instrument group
      value:
        transactionRules:
        - description: Allow 5 transactions per month
          interval:
            type: monthly
          maxTransactions: 5
          paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
          reference: myRule12345
          startDate: '2021-01-25T12:46:35.476629Z'
          status: active
          type: velocity
          id: TR32272223222B5CMDGMC9F4F
        - amount:
            currency: EUR
            value: 10000
          description: Allow up to 100 EUR per month
          interval:
            type: monthly
          paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
          reference: myRule16378
          startDate: '2021-01-25T12:46:35.476629Z'
          status: active
          type: velocity
          id: TR32272223222B5CMDGT89F4F
    get-paymentInstruments-id-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving a payment instrument
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        description: S. Hopper - Main card
        issuingCountryCode: GB
        status: Active
        type: card
        card:
          brand: mc
          brandVariant: mcdebit
          cardholderName: Simon Hopper
          formFactor: virtual
          bin: '555544'
          expiration:
            month: '01'
            year: '2024'
          lastFour: '3548'
          number: '************3548'
        id: PI32272223222B5CMD3MQ3HXX
    get-paymentInstruments-id-transactionRules-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving a list of transaction rules applied
        to a payment instrument
      value:
        transactionRules:
        - description: Allow 5 transactions per month
          interval:
            type: monthly
          maxTransactions: 5
          paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
          reference: myRule12345
          startDate: '2021-01-25T12:46:35.476629Z'
          status: active
          type: velocity
          id: TR32272223222B5CMDGMC9F4F
        - amount:
            currency: EUR
            value: 10000
          description: Allow up to 100 EUR per month
          interval:
            type: monthly
          paymentInstrumentGroupId: PG3227C223222B5CMD3FJFKGZ
          reference: myRule16378
          startDate: '2021-01-25T12:46:35.476629Z'
          status: active
          type: velocity
          id: TR32272223222B5CMDGT89F4F
    get-transactionRules-transactionRuleId-success-200:
      summary: Response code - 200 OK
      description: Example response when retrieving a transaction rule
      value:
        transactionRule:
          description: Allow 5 transactions per month
          interval:
            type: monthly
          maxTransactions: 5
          paymentInstrumentId: PI3227C223222B59KGTXP884R
          reference: myRule12345
          startDate: '2021-01-25T12:46:35.476629Z'
          status: active
          type: velocity
          id: TR32272223222B5CMD3V73HXG
    patch-accountHolders-id-success-200:
      summary: Response code - 200 OK
      description: Example response for successfully updating the status of an account
        holder
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        contactDetails:
          address:
            city: Amsterdam
            country: NL
            houseNumberOrName: '274'
            postalCode: 1020CD
            street: Brannan Street
          email: s.hopper@example.com
          phone:
            number: '+315551231234'
            type: Mobile
        description: S.Hopper - Staff 123
        id: AH32272223222B5CM4MWJ892H
        status: Suspended
    patch-accountHolders-id-updateAccountHolderStatus:
      summary: Update the status of an account holder.
      description: Example request for updating the status of an account holder
      value:
        status: Suspended
    patch-paymentInstruments-id-invalidData-422:
      summary: Response code - 422 Unprocessable Entity
      description: Example response for a failed request to update the balance account
        ID
      value:
        type: https://docs.adyen.com/errors/general/invalid-field-value
        title: Invalid Payment Instrument information provided
        status: 422
        detail: The balanceAccountId can only be changed when the status is Inactive
          or Requested
        requestId: 1W1UI15PLVGC9V8O
        errorCode: '30_031'
    patch-paymentInstruments-id-success-200:
      summary: Response code - 200 OK
      description: Example respones for successfully updating the status of a payment
        instrument
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        description: S. Hopper - Main card
        issuingCountryCode: GB
        status: Suspended
        type: card
        card:
          brand: mc
          brandVariant: mcdebit
          cardholderName: Simon Hopper
          formFactor: virtual
          bin: '555544'
          expiration:
            month: '01'
            year: '2024'
          lastFour: '5785'
          number: '************5785'
        id: PI3227C223222B5CMD278FKGS
    patch-paymentInstruments-id-updatePaymentInstrumentBalanceAccount:
      summary: Update the balance account linked to a payment instrument.
      description: Example request for updating the balance account of a payment instrument
      value:
        balanceAccountId: BA32272223222B5CM82WL892M
    patch-paymentInstruments-id-updatePaymentInstrumentStatus:
      summary: Update the status of a payment instrument.
      value:
        status: Suspended
    patch-transactionRules-transactionRuleId-success-200:
      summary: Response code - 200 OK
      description: Example response for successfully updating the status of a transaction
        rule
      value:
        description: Allow 5 transactions per month
        interval:
          type: monthly
        maxTransactions: 5
        paymentInstrumentId: PI3227C223222B59KGTXP884R
        reference: myRule12345
        startDate: '2021-01-21T12:46:35.476629Z'
        status: inactive
        type: velocity
        id: TR3227C223222B5B85CDV4DRS
    patch-transactionRules-transactionRuleId-updateTransactionRuleStatus:
      summary: Update the status of transaction rule.
      description: Example request for updating the status of a transaction rule
      value:
        status: inactive
    post-accountHolders-createAccountHolder:
      summary: Create an account holder.
      description: Example request for creating an account holder
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        description: S.Hopper - Staff 123
        contactDetails:
          email: s.hopper@example.com
          phone:
            number: '+315551231234'
            type: Mobile
          address:
            city: Amsterdam
            country: NL
            street: Brannan Street
            houseNumberOrName: '274'
            postalCode: 1020CD
    post-accountHolders-success-200:
      summary: Response code - 200 OK
      description: Example response for successfully creating an account holder
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        contactDetails:
          address:
            city: Amsterdam
            country: NL
            houseNumberOrName: '274'
            postalCode: 1020CD
            street: Brannan Street
          email: s.hopper@example.com
          phone:
            number: '+315551231234'
            type: Mobile
        description: S.Hopper - Staff 123
        id: AH3227C223222B5CMD2SXFKGT
        status: Active
    post-balanceAccounts-createBalanceAccount:
      summary: Create a balance account.
      description: Example request for creating a balance account
      value:
        accountHolderId: AH32272223222B59K6ZKBBFNQ
        description: S.Hopper - Main balance account
    post-balanceAccounts-success-200:
      summary: Response code - 200 OK
      description: Example response for successfully creating a balance account
      value:
        accountHolderId: AH32272223222B59K6ZKBBFNQ
        defaultCurrencyCode: EUR
        description: S.Hopper - Main balance account
        balances:
        - available: 0
          balance: 0
          currency: EUR
          reserved: 0
        id: BA3227C223222B5CMD38HFKGH
        status: Active
    post-paymentInstrumentGroups-createPaymentInstrumentGroups:
      summary: Create a payment instrument group.
      description: Example request for creating a payment instrument group
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        txVariant: mc
    post-paymentInstrumentGroups-success-200:
      summary: Response code - 200 OK
      description: Example response for successfully creating a payment instrument
        group
      value:
        balancePlatform: YOUR_BALANCE_PLATFORM
        txVariant: mc
        id: PG3227C223222B5CMD3FJFKGZ
    post-paymentInstruments-createPhysicalCard:
      summary: Create a physical card
      description: Example request for creating a physical card
      value:
        type: card
        issuingCountryCode: NL
        balanceAccountId: BALANCE_ACCOUNT_ID
        status: Inactive
        card:
          formFactor: physical
          brand: mc
          brandVariant: mcdebit
          cardholderName: Sam Hopper
          deliveryContact:
            address:
              city: Amsterdam
              country: NL
              stateOrProvince: NH
              street: Simon Carmiggeltstraat
              houseNumberOrName: 6-50
              postalCode: 1011DJ
            name:
              firstName: Sam
              lastName: Hopper
          configuration:
            configurationProfileId: YOUR_CONFIGURATION_PROFILE_ID
          expiry:
            month: 8
            year: 2024
        description: S.Hopper - Main card
    post-paymentInstruments-createVirtualCard:
      summary: Create a virtual card.
      description: Example request for creating a virtual card
      value:
        type: card
        description: S. Hopper - Main card
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        issuingCountryCode: GB
        card:
          cardholderName: Simon Hopper
          brand: mc
          brandVariant: mcdebit
          formFactor: virtual
    post-paymentInstruments-success-200:
      summary: Response code - 200 OK
      description: Example response for successfully creating a virtual card
      value:
        balanceAccountId: BA32272223222B59CZ3T52DKZ
        description: S. Hopper - Main card
        issuingCountryCode: GB
        status: Active
        type: card
        card:
          brand: mc
          brandVariant: mcdebit
          cardholderName: Simon Hopper
          formFactor: virtual
          bin: '555544'
          cvc: '873'
          expiration:
            month: '01'
            year: '2024'
          lastFour: '3548'
        id: PI32272223222B5CMD3MQ3HXX
    post-transactionRules-createTransactionRule:
      summary: Create a transaction rule.
      value:
        description: Allow 5 transactions per month
        interval:
          type: monthly
        maxTransactions: 5
        paymentInstrumentId: PI3227C223222B59KGTXP884R
        reference: myRule12345
        startDate: '2021-01-21T12:46:35.476629Z'
        status: inactive
        type: velocity
    post-transactionRules-success-200:
      summary: Response code - 200 OK
      description: Example response for successfully creating a transaction rule
      value:
        description: Allow 5 transactions per month
        interval:
          type: monthly
        maxTransactions: 5
        paymentInstrumentId: PI3227C223222B59KGTXP884R
        reference: myRule12345
        startDate: '2021-01-21T12:46:35.476629Z'
        status: active
        type: velocity
        id: TR32272223222B5CMD3V73HXG
